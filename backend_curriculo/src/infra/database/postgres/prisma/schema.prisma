generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  output        = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 String                               @id @default(uuid())
  email                              String                               @unique
  name                               String
  bio                                String?                              @db.Text
  password                           String?
  Habilities                         Habilities[]
  Contacts                           Contacts[]
  Languages                          Languages[]
  ProfessionalExperiences            ProfessionalExperiences[]
  AcademicEducations                 AcademicEducations[]
  PersonalDatas                      PersonalData[]
  Address                            Address[]
  ProfessionalExperiencesDescription ProfessionalExperiencesDescription[]

  @@map("users")
}

model Habilities {
  id      String @id @default(uuid())
  name    String
  slug    String @unique
  value   Int    @default(0)
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@map("habilities")
}

model Contacts {
  id           String         @id @default(uuid())
  name         String
  phone        String
  is_whatsapp  Boolean
  user         User           @relation(fields: [user_id], references: [id])
  user_id      String
  SocialMedias SocialMedias[]

  @@map("contacts")
}

model SocialMedias {
  id          String   @id @default(uuid())
  name        String
  slug        String
  url         String
  contacts    Contacts @relation(fields: [contacts_id], references: [id])
  contacts_id String

  @@map("social_medias")
}

model Languages {
  id        String   @id @default(uuid())
  name      String
  slug      String
  stars     Int      @default(0)
  user      User     @relation(fields: [user_id], references: [id])
  user_id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("languages")
}

model ProfessionalExperiences {
  id                                 String                               @id @default(uuid())
  title                              String
  company                            String
  date_init                          DateTime
  date_end                           DateTime?
  is_actual_job                      Boolean                              @default(false)
  user                               User                                 @relation(fields: [user_id], references: [id])
  user_id                            String
  ProfessionalExperiencesDescription ProfessionalExperiencesDescription[]

  @@map("professional_experiences")
}

model ProfessionalExperiencesDescription {
  id                          String                  @id @default(uuid())
  description                 String
  professional_experiences    ProfessionalExperiences @relation(fields: [professional_experiences_id], references: [id])
  professional_experiences_id String
  user                        User                    @relation(fields: [user_id], references: [id])
  user_id                     String

  @@map("professional_experiences_description")
}

model AcademicEducations {
  id          String   @id @default(uuid())
  title       String
  university  String
  description String
  date_init   DateTime
  date_end    DateTime
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("academic_educations")
}

model PersonalData {
  id         String   @id @default(uuid())
  fullname   String
  document   String
  avatar_url String   @default("https://avatars.githubusercontent.com/u/59853942?v=4")
  birthday   DateTime
  profession String?
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String

  @@map("personal_data")
}

model Address {
  id        String   @id @default(uuid())
  street    String
  number    String
  district  String
  city      String
  state     String
  country   String
  zipcode   String
  user      User     @relation(fields: [user_id], references: [id])
  user_id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}
