
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Habilities
 * 
 */
export type Habilities = $Result.DefaultSelection<Prisma.$HabilitiesPayload>
/**
 * Model Contacts
 * 
 */
export type Contacts = $Result.DefaultSelection<Prisma.$ContactsPayload>
/**
 * Model SocialMedias
 * 
 */
export type SocialMedias = $Result.DefaultSelection<Prisma.$SocialMediasPayload>
/**
 * Model Languages
 * 
 */
export type Languages = $Result.DefaultSelection<Prisma.$LanguagesPayload>
/**
 * Model ProfessionalExperiences
 * 
 */
export type ProfessionalExperiences = $Result.DefaultSelection<Prisma.$ProfessionalExperiencesPayload>
/**
 * Model ProfessionalExperiencesDescription
 * 
 */
export type ProfessionalExperiencesDescription = $Result.DefaultSelection<Prisma.$ProfessionalExperiencesDescriptionPayload>
/**
 * Model AcademicEducations
 * 
 */
export type AcademicEducations = $Result.DefaultSelection<Prisma.$AcademicEducationsPayload>
/**
 * Model PersonalData
 * 
 */
export type PersonalData = $Result.DefaultSelection<Prisma.$PersonalDataPayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.habilities`: Exposes CRUD operations for the **Habilities** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Habilities
    * const habilities = await prisma.habilities.findMany()
    * ```
    */
  get habilities(): Prisma.HabilitiesDelegate<ExtArgs>;

  /**
   * `prisma.contacts`: Exposes CRUD operations for the **Contacts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contacts.findMany()
    * ```
    */
  get contacts(): Prisma.ContactsDelegate<ExtArgs>;

  /**
   * `prisma.socialMedias`: Exposes CRUD operations for the **SocialMedias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SocialMedias
    * const socialMedias = await prisma.socialMedias.findMany()
    * ```
    */
  get socialMedias(): Prisma.SocialMediasDelegate<ExtArgs>;

  /**
   * `prisma.languages`: Exposes CRUD operations for the **Languages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Languages
    * const languages = await prisma.languages.findMany()
    * ```
    */
  get languages(): Prisma.LanguagesDelegate<ExtArgs>;

  /**
   * `prisma.professionalExperiences`: Exposes CRUD operations for the **ProfessionalExperiences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfessionalExperiences
    * const professionalExperiences = await prisma.professionalExperiences.findMany()
    * ```
    */
  get professionalExperiences(): Prisma.ProfessionalExperiencesDelegate<ExtArgs>;

  /**
   * `prisma.professionalExperiencesDescription`: Exposes CRUD operations for the **ProfessionalExperiencesDescription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfessionalExperiencesDescriptions
    * const professionalExperiencesDescriptions = await prisma.professionalExperiencesDescription.findMany()
    * ```
    */
  get professionalExperiencesDescription(): Prisma.ProfessionalExperiencesDescriptionDelegate<ExtArgs>;

  /**
   * `prisma.academicEducations`: Exposes CRUD operations for the **AcademicEducations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AcademicEducations
    * const academicEducations = await prisma.academicEducations.findMany()
    * ```
    */
  get academicEducations(): Prisma.AcademicEducationsDelegate<ExtArgs>;

  /**
   * `prisma.personalData`: Exposes CRUD operations for the **PersonalData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PersonalData
    * const personalData = await prisma.personalData.findMany()
    * ```
    */
  get personalData(): Prisma.PersonalDataDelegate<ExtArgs>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Habilities: 'Habilities',
    Contacts: 'Contacts',
    SocialMedias: 'SocialMedias',
    Languages: 'Languages',
    ProfessionalExperiences: 'ProfessionalExperiences',
    ProfessionalExperiencesDescription: 'ProfessionalExperiencesDescription',
    AcademicEducations: 'AcademicEducations',
    PersonalData: 'PersonalData',
    Address: 'Address'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'habilities' | 'contacts' | 'socialMedias' | 'languages' | 'professionalExperiences' | 'professionalExperiencesDescription' | 'academicEducations' | 'personalData' | 'address'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Habilities: {
        payload: Prisma.$HabilitiesPayload<ExtArgs>
        fields: Prisma.HabilitiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HabilitiesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HabilitiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HabilitiesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HabilitiesPayload>
          }
          findFirst: {
            args: Prisma.HabilitiesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HabilitiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HabilitiesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HabilitiesPayload>
          }
          findMany: {
            args: Prisma.HabilitiesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HabilitiesPayload>[]
          }
          create: {
            args: Prisma.HabilitiesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HabilitiesPayload>
          }
          createMany: {
            args: Prisma.HabilitiesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HabilitiesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HabilitiesPayload>
          }
          update: {
            args: Prisma.HabilitiesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HabilitiesPayload>
          }
          deleteMany: {
            args: Prisma.HabilitiesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HabilitiesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HabilitiesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HabilitiesPayload>
          }
          aggregate: {
            args: Prisma.HabilitiesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHabilities>
          }
          groupBy: {
            args: Prisma.HabilitiesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HabilitiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.HabilitiesCountArgs<ExtArgs>,
            result: $Utils.Optional<HabilitiesCountAggregateOutputType> | number
          }
        }
      }
      Contacts: {
        payload: Prisma.$ContactsPayload<ExtArgs>
        fields: Prisma.ContactsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactsPayload>
          }
          findFirst: {
            args: Prisma.ContactsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactsPayload>
          }
          findMany: {
            args: Prisma.ContactsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactsPayload>[]
          }
          create: {
            args: Prisma.ContactsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactsPayload>
          }
          createMany: {
            args: Prisma.ContactsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ContactsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactsPayload>
          }
          update: {
            args: Prisma.ContactsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactsPayload>
          }
          deleteMany: {
            args: Prisma.ContactsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContactsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContactsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactsPayload>
          }
          aggregate: {
            args: Prisma.ContactsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContacts>
          }
          groupBy: {
            args: Prisma.ContactsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContactsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactsCountArgs<ExtArgs>,
            result: $Utils.Optional<ContactsCountAggregateOutputType> | number
          }
        }
      }
      SocialMedias: {
        payload: Prisma.$SocialMediasPayload<ExtArgs>
        fields: Prisma.SocialMediasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SocialMediasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialMediasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SocialMediasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialMediasPayload>
          }
          findFirst: {
            args: Prisma.SocialMediasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialMediasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SocialMediasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialMediasPayload>
          }
          findMany: {
            args: Prisma.SocialMediasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialMediasPayload>[]
          }
          create: {
            args: Prisma.SocialMediasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialMediasPayload>
          }
          createMany: {
            args: Prisma.SocialMediasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SocialMediasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialMediasPayload>
          }
          update: {
            args: Prisma.SocialMediasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialMediasPayload>
          }
          deleteMany: {
            args: Prisma.SocialMediasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SocialMediasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SocialMediasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialMediasPayload>
          }
          aggregate: {
            args: Prisma.SocialMediasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSocialMedias>
          }
          groupBy: {
            args: Prisma.SocialMediasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SocialMediasGroupByOutputType>[]
          }
          count: {
            args: Prisma.SocialMediasCountArgs<ExtArgs>,
            result: $Utils.Optional<SocialMediasCountAggregateOutputType> | number
          }
        }
      }
      Languages: {
        payload: Prisma.$LanguagesPayload<ExtArgs>
        fields: Prisma.LanguagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          findFirst: {
            args: Prisma.LanguagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          findMany: {
            args: Prisma.LanguagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>[]
          }
          create: {
            args: Prisma.LanguagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          createMany: {
            args: Prisma.LanguagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LanguagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          update: {
            args: Prisma.LanguagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          deleteMany: {
            args: Prisma.LanguagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LanguagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LanguagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          aggregate: {
            args: Prisma.LanguagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLanguages>
          }
          groupBy: {
            args: Prisma.LanguagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LanguagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguagesCountArgs<ExtArgs>,
            result: $Utils.Optional<LanguagesCountAggregateOutputType> | number
          }
        }
      }
      ProfessionalExperiences: {
        payload: Prisma.$ProfessionalExperiencesPayload<ExtArgs>
        fields: Prisma.ProfessionalExperiencesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionalExperiencesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionalExperiencesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesPayload>
          }
          findFirst: {
            args: Prisma.ProfessionalExperiencesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionalExperiencesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesPayload>
          }
          findMany: {
            args: Prisma.ProfessionalExperiencesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesPayload>[]
          }
          create: {
            args: Prisma.ProfessionalExperiencesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesPayload>
          }
          createMany: {
            args: Prisma.ProfessionalExperiencesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfessionalExperiencesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesPayload>
          }
          update: {
            args: Prisma.ProfessionalExperiencesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesPayload>
          }
          deleteMany: {
            args: Prisma.ProfessionalExperiencesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionalExperiencesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfessionalExperiencesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesPayload>
          }
          aggregate: {
            args: Prisma.ProfessionalExperiencesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfessionalExperiences>
          }
          groupBy: {
            args: Prisma.ProfessionalExperiencesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfessionalExperiencesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionalExperiencesCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfessionalExperiencesCountAggregateOutputType> | number
          }
        }
      }
      ProfessionalExperiencesDescription: {
        payload: Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>
        fields: Prisma.ProfessionalExperiencesDescriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionalExperiencesDescriptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesDescriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionalExperiencesDescriptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesDescriptionPayload>
          }
          findFirst: {
            args: Prisma.ProfessionalExperiencesDescriptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesDescriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionalExperiencesDescriptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesDescriptionPayload>
          }
          findMany: {
            args: Prisma.ProfessionalExperiencesDescriptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesDescriptionPayload>[]
          }
          create: {
            args: Prisma.ProfessionalExperiencesDescriptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesDescriptionPayload>
          }
          createMany: {
            args: Prisma.ProfessionalExperiencesDescriptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfessionalExperiencesDescriptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesDescriptionPayload>
          }
          update: {
            args: Prisma.ProfessionalExperiencesDescriptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesDescriptionPayload>
          }
          deleteMany: {
            args: Prisma.ProfessionalExperiencesDescriptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionalExperiencesDescriptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfessionalExperiencesDescriptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessionalExperiencesDescriptionPayload>
          }
          aggregate: {
            args: Prisma.ProfessionalExperiencesDescriptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfessionalExperiencesDescription>
          }
          groupBy: {
            args: Prisma.ProfessionalExperiencesDescriptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfessionalExperiencesDescriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionalExperiencesDescriptionCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfessionalExperiencesDescriptionCountAggregateOutputType> | number
          }
        }
      }
      AcademicEducations: {
        payload: Prisma.$AcademicEducationsPayload<ExtArgs>
        fields: Prisma.AcademicEducationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AcademicEducationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicEducationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AcademicEducationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicEducationsPayload>
          }
          findFirst: {
            args: Prisma.AcademicEducationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicEducationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AcademicEducationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicEducationsPayload>
          }
          findMany: {
            args: Prisma.AcademicEducationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicEducationsPayload>[]
          }
          create: {
            args: Prisma.AcademicEducationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicEducationsPayload>
          }
          createMany: {
            args: Prisma.AcademicEducationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AcademicEducationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicEducationsPayload>
          }
          update: {
            args: Prisma.AcademicEducationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicEducationsPayload>
          }
          deleteMany: {
            args: Prisma.AcademicEducationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AcademicEducationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AcademicEducationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AcademicEducationsPayload>
          }
          aggregate: {
            args: Prisma.AcademicEducationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAcademicEducations>
          }
          groupBy: {
            args: Prisma.AcademicEducationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AcademicEducationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AcademicEducationsCountArgs<ExtArgs>,
            result: $Utils.Optional<AcademicEducationsCountAggregateOutputType> | number
          }
        }
      }
      PersonalData: {
        payload: Prisma.$PersonalDataPayload<ExtArgs>
        fields: Prisma.PersonalDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonalDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonalDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonalDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonalDataPayload>
          }
          findFirst: {
            args: Prisma.PersonalDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonalDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonalDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonalDataPayload>
          }
          findMany: {
            args: Prisma.PersonalDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonalDataPayload>[]
          }
          create: {
            args: Prisma.PersonalDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonalDataPayload>
          }
          createMany: {
            args: Prisma.PersonalDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PersonalDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonalDataPayload>
          }
          update: {
            args: Prisma.PersonalDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonalDataPayload>
          }
          deleteMany: {
            args: Prisma.PersonalDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PersonalDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PersonalDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonalDataPayload>
          }
          aggregate: {
            args: Prisma.PersonalDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePersonalData>
          }
          groupBy: {
            args: Prisma.PersonalDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PersonalDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonalDataCountArgs<ExtArgs>,
            result: $Utils.Optional<PersonalDataCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>,
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Habilities: number
    Contacts: number
    Languages: number
    ProfessionalExperiences: number
    AcademicEducations: number
    PersonalDatas: number
    Address: number
    ProfessionalExperiencesDescription: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Habilities?: boolean | UserCountOutputTypeCountHabilitiesArgs
    Contacts?: boolean | UserCountOutputTypeCountContactsArgs
    Languages?: boolean | UserCountOutputTypeCountLanguagesArgs
    ProfessionalExperiences?: boolean | UserCountOutputTypeCountProfessionalExperiencesArgs
    AcademicEducations?: boolean | UserCountOutputTypeCountAcademicEducationsArgs
    PersonalDatas?: boolean | UserCountOutputTypeCountPersonalDatasArgs
    Address?: boolean | UserCountOutputTypeCountAddressArgs
    ProfessionalExperiencesDescription?: boolean | UserCountOutputTypeCountProfessionalExperiencesDescriptionArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHabilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HabilitiesWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactsWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLanguagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguagesWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfessionalExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalExperiencesWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAcademicEducationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicEducationsWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPersonalDatasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonalDataWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfessionalExperiencesDescriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalExperiencesDescriptionWhereInput
  }



  /**
   * Count Type ContactsCountOutputType
   */

  export type ContactsCountOutputType = {
    SocialMedias: number
  }

  export type ContactsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SocialMedias?: boolean | ContactsCountOutputTypeCountSocialMediasArgs
  }

  // Custom InputTypes

  /**
   * ContactsCountOutputType without action
   */
  export type ContactsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactsCountOutputType
     */
    select?: ContactsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ContactsCountOutputType without action
   */
  export type ContactsCountOutputTypeCountSocialMediasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialMediasWhereInput
  }



  /**
   * Count Type ProfessionalExperiencesCountOutputType
   */

  export type ProfessionalExperiencesCountOutputType = {
    ProfessionalExperiencesDescription: number
  }

  export type ProfessionalExperiencesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ProfessionalExperiencesDescription?: boolean | ProfessionalExperiencesCountOutputTypeCountProfessionalExperiencesDescriptionArgs
  }

  // Custom InputTypes

  /**
   * ProfessionalExperiencesCountOutputType without action
   */
  export type ProfessionalExperiencesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesCountOutputType
     */
    select?: ProfessionalExperiencesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProfessionalExperiencesCountOutputType without action
   */
  export type ProfessionalExperiencesCountOutputTypeCountProfessionalExperiencesDescriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalExperiencesDescriptionWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    bio: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    bio: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    bio: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    bio?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    bio?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    bio?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    bio: string | null
    password: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    bio?: boolean
    password?: boolean
    Habilities?: boolean | User$HabilitiesArgs<ExtArgs>
    Contacts?: boolean | User$ContactsArgs<ExtArgs>
    Languages?: boolean | User$LanguagesArgs<ExtArgs>
    ProfessionalExperiences?: boolean | User$ProfessionalExperiencesArgs<ExtArgs>
    AcademicEducations?: boolean | User$AcademicEducationsArgs<ExtArgs>
    PersonalDatas?: boolean | User$PersonalDatasArgs<ExtArgs>
    Address?: boolean | User$AddressArgs<ExtArgs>
    ProfessionalExperiencesDescription?: boolean | User$ProfessionalExperiencesDescriptionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    bio?: boolean
    password?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Habilities?: boolean | User$HabilitiesArgs<ExtArgs>
    Contacts?: boolean | User$ContactsArgs<ExtArgs>
    Languages?: boolean | User$LanguagesArgs<ExtArgs>
    ProfessionalExperiences?: boolean | User$ProfessionalExperiencesArgs<ExtArgs>
    AcademicEducations?: boolean | User$AcademicEducationsArgs<ExtArgs>
    PersonalDatas?: boolean | User$PersonalDatasArgs<ExtArgs>
    Address?: boolean | User$AddressArgs<ExtArgs>
    ProfessionalExperiencesDescription?: boolean | User$ProfessionalExperiencesDescriptionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Habilities: Prisma.$HabilitiesPayload<ExtArgs>[]
      Contacts: Prisma.$ContactsPayload<ExtArgs>[]
      Languages: Prisma.$LanguagesPayload<ExtArgs>[]
      ProfessionalExperiences: Prisma.$ProfessionalExperiencesPayload<ExtArgs>[]
      AcademicEducations: Prisma.$AcademicEducationsPayload<ExtArgs>[]
      PersonalDatas: Prisma.$PersonalDataPayload<ExtArgs>[]
      Address: Prisma.$AddressPayload<ExtArgs>[]
      ProfessionalExperiencesDescription: Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      bio: string | null
      password: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Habilities<T extends User$HabilitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$HabilitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabilitiesPayload<ExtArgs>, T, 'findMany'> | Null>;

    Contacts<T extends User$ContactsArgs<ExtArgs> = {}>(args?: Subset<T, User$ContactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Languages<T extends User$LanguagesArgs<ExtArgs> = {}>(args?: Subset<T, User$LanguagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findMany'> | Null>;

    ProfessionalExperiences<T extends User$ProfessionalExperiencesArgs<ExtArgs> = {}>(args?: Subset<T, User$ProfessionalExperiencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalExperiencesPayload<ExtArgs>, T, 'findMany'> | Null>;

    AcademicEducations<T extends User$AcademicEducationsArgs<ExtArgs> = {}>(args?: Subset<T, User$AcademicEducationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicEducationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    PersonalDatas<T extends User$PersonalDatasArgs<ExtArgs> = {}>(args?: Subset<T, User$PersonalDatasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalDataPayload<ExtArgs>, T, 'findMany'> | Null>;

    Address<T extends User$AddressArgs<ExtArgs> = {}>(args?: Subset<T, User$AddressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findMany'> | Null>;

    ProfessionalExperiencesDescription<T extends User$ProfessionalExperiencesDescriptionArgs<ExtArgs> = {}>(args?: Subset<T, User$ProfessionalExperiencesDescriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Habilities
   */
  export type User$HabilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habilities
     */
    select?: HabilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HabilitiesInclude<ExtArgs> | null
    where?: HabilitiesWhereInput
    orderBy?: HabilitiesOrderByWithRelationInput | HabilitiesOrderByWithRelationInput[]
    cursor?: HabilitiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HabilitiesScalarFieldEnum | HabilitiesScalarFieldEnum[]
  }


  /**
   * User.Contacts
   */
  export type User$ContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contacts
     */
    select?: ContactsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactsInclude<ExtArgs> | null
    where?: ContactsWhereInput
    orderBy?: ContactsOrderByWithRelationInput | ContactsOrderByWithRelationInput[]
    cursor?: ContactsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactsScalarFieldEnum | ContactsScalarFieldEnum[]
  }


  /**
   * User.Languages
   */
  export type User$LanguagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    where?: LanguagesWhereInput
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    cursor?: LanguagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguagesScalarFieldEnum | LanguagesScalarFieldEnum[]
  }


  /**
   * User.ProfessionalExperiences
   */
  export type User$ProfessionalExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiences
     */
    select?: ProfessionalExperiencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesInclude<ExtArgs> | null
    where?: ProfessionalExperiencesWhereInput
    orderBy?: ProfessionalExperiencesOrderByWithRelationInput | ProfessionalExperiencesOrderByWithRelationInput[]
    cursor?: ProfessionalExperiencesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionalExperiencesScalarFieldEnum | ProfessionalExperiencesScalarFieldEnum[]
  }


  /**
   * User.AcademicEducations
   */
  export type User$AcademicEducationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEducations
     */
    select?: AcademicEducationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicEducationsInclude<ExtArgs> | null
    where?: AcademicEducationsWhereInput
    orderBy?: AcademicEducationsOrderByWithRelationInput | AcademicEducationsOrderByWithRelationInput[]
    cursor?: AcademicEducationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AcademicEducationsScalarFieldEnum | AcademicEducationsScalarFieldEnum[]
  }


  /**
   * User.PersonalDatas
   */
  export type User$PersonalDatasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalData
     */
    select?: PersonalDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonalDataInclude<ExtArgs> | null
    where?: PersonalDataWhereInput
    orderBy?: PersonalDataOrderByWithRelationInput | PersonalDataOrderByWithRelationInput[]
    cursor?: PersonalDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonalDataScalarFieldEnum | PersonalDataScalarFieldEnum[]
  }


  /**
   * User.Address
   */
  export type User$AddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    cursor?: AddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * User.ProfessionalExperiencesDescription
   */
  export type User$ProfessionalExperiencesDescriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesDescription
     */
    select?: ProfessionalExperiencesDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesDescriptionInclude<ExtArgs> | null
    where?: ProfessionalExperiencesDescriptionWhereInput
    orderBy?: ProfessionalExperiencesDescriptionOrderByWithRelationInput | ProfessionalExperiencesDescriptionOrderByWithRelationInput[]
    cursor?: ProfessionalExperiencesDescriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionalExperiencesDescriptionScalarFieldEnum | ProfessionalExperiencesDescriptionScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Habilities
   */

  export type AggregateHabilities = {
    _count: HabilitiesCountAggregateOutputType | null
    _avg: HabilitiesAvgAggregateOutputType | null
    _sum: HabilitiesSumAggregateOutputType | null
    _min: HabilitiesMinAggregateOutputType | null
    _max: HabilitiesMaxAggregateOutputType | null
  }

  export type HabilitiesAvgAggregateOutputType = {
    value: number | null
  }

  export type HabilitiesSumAggregateOutputType = {
    value: number | null
  }

  export type HabilitiesMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    value: number | null
    user_id: string | null
  }

  export type HabilitiesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    value: number | null
    user_id: string | null
  }

  export type HabilitiesCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    value: number
    user_id: number
    _all: number
  }


  export type HabilitiesAvgAggregateInputType = {
    value?: true
  }

  export type HabilitiesSumAggregateInputType = {
    value?: true
  }

  export type HabilitiesMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    value?: true
    user_id?: true
  }

  export type HabilitiesMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    value?: true
    user_id?: true
  }

  export type HabilitiesCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    value?: true
    user_id?: true
    _all?: true
  }

  export type HabilitiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Habilities to aggregate.
     */
    where?: HabilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habilities to fetch.
     */
    orderBy?: HabilitiesOrderByWithRelationInput | HabilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HabilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Habilities
    **/
    _count?: true | HabilitiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HabilitiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HabilitiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HabilitiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HabilitiesMaxAggregateInputType
  }

  export type GetHabilitiesAggregateType<T extends HabilitiesAggregateArgs> = {
        [P in keyof T & keyof AggregateHabilities]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHabilities[P]>
      : GetScalarType<T[P], AggregateHabilities[P]>
  }




  export type HabilitiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HabilitiesWhereInput
    orderBy?: HabilitiesOrderByWithAggregationInput | HabilitiesOrderByWithAggregationInput[]
    by: HabilitiesScalarFieldEnum[] | HabilitiesScalarFieldEnum
    having?: HabilitiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HabilitiesCountAggregateInputType | true
    _avg?: HabilitiesAvgAggregateInputType
    _sum?: HabilitiesSumAggregateInputType
    _min?: HabilitiesMinAggregateInputType
    _max?: HabilitiesMaxAggregateInputType
  }

  export type HabilitiesGroupByOutputType = {
    id: string
    name: string
    slug: string
    value: number
    user_id: string
    _count: HabilitiesCountAggregateOutputType | null
    _avg: HabilitiesAvgAggregateOutputType | null
    _sum: HabilitiesSumAggregateOutputType | null
    _min: HabilitiesMinAggregateOutputType | null
    _max: HabilitiesMaxAggregateOutputType | null
  }

  type GetHabilitiesGroupByPayload<T extends HabilitiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HabilitiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HabilitiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HabilitiesGroupByOutputType[P]>
            : GetScalarType<T[P], HabilitiesGroupByOutputType[P]>
        }
      >
    >


  export type HabilitiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    value?: boolean
    user_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["habilities"]>

  export type HabilitiesSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    value?: boolean
    user_id?: boolean
  }

  export type HabilitiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $HabilitiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Habilities"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      value: number
      user_id: string
    }, ExtArgs["result"]["habilities"]>
    composites: {}
  }


  type HabilitiesGetPayload<S extends boolean | null | undefined | HabilitiesDefaultArgs> = $Result.GetResult<Prisma.$HabilitiesPayload, S>

  type HabilitiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HabilitiesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: HabilitiesCountAggregateInputType | true
    }

  export interface HabilitiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Habilities'], meta: { name: 'Habilities' } }
    /**
     * Find zero or one Habilities that matches the filter.
     * @param {HabilitiesFindUniqueArgs} args - Arguments to find a Habilities
     * @example
     * // Get one Habilities
     * const habilities = await prisma.habilities.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HabilitiesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HabilitiesFindUniqueArgs<ExtArgs>>
    ): Prisma__HabilitiesClient<$Result.GetResult<Prisma.$HabilitiesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Habilities that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HabilitiesFindUniqueOrThrowArgs} args - Arguments to find a Habilities
     * @example
     * // Get one Habilities
     * const habilities = await prisma.habilities.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HabilitiesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HabilitiesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HabilitiesClient<$Result.GetResult<Prisma.$HabilitiesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Habilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitiesFindFirstArgs} args - Arguments to find a Habilities
     * @example
     * // Get one Habilities
     * const habilities = await prisma.habilities.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HabilitiesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HabilitiesFindFirstArgs<ExtArgs>>
    ): Prisma__HabilitiesClient<$Result.GetResult<Prisma.$HabilitiesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Habilities that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitiesFindFirstOrThrowArgs} args - Arguments to find a Habilities
     * @example
     * // Get one Habilities
     * const habilities = await prisma.habilities.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HabilitiesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HabilitiesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HabilitiesClient<$Result.GetResult<Prisma.$HabilitiesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Habilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Habilities
     * const habilities = await prisma.habilities.findMany()
     * 
     * // Get first 10 Habilities
     * const habilities = await prisma.habilities.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const habilitiesWithIdOnly = await prisma.habilities.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HabilitiesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HabilitiesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabilitiesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Habilities.
     * @param {HabilitiesCreateArgs} args - Arguments to create a Habilities.
     * @example
     * // Create one Habilities
     * const Habilities = await prisma.habilities.create({
     *   data: {
     *     // ... data to create a Habilities
     *   }
     * })
     * 
    **/
    create<T extends HabilitiesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HabilitiesCreateArgs<ExtArgs>>
    ): Prisma__HabilitiesClient<$Result.GetResult<Prisma.$HabilitiesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Habilities.
     *     @param {HabilitiesCreateManyArgs} args - Arguments to create many Habilities.
     *     @example
     *     // Create many Habilities
     *     const habilities = await prisma.habilities.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HabilitiesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HabilitiesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Habilities.
     * @param {HabilitiesDeleteArgs} args - Arguments to delete one Habilities.
     * @example
     * // Delete one Habilities
     * const Habilities = await prisma.habilities.delete({
     *   where: {
     *     // ... filter to delete one Habilities
     *   }
     * })
     * 
    **/
    delete<T extends HabilitiesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HabilitiesDeleteArgs<ExtArgs>>
    ): Prisma__HabilitiesClient<$Result.GetResult<Prisma.$HabilitiesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Habilities.
     * @param {HabilitiesUpdateArgs} args - Arguments to update one Habilities.
     * @example
     * // Update one Habilities
     * const habilities = await prisma.habilities.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HabilitiesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HabilitiesUpdateArgs<ExtArgs>>
    ): Prisma__HabilitiesClient<$Result.GetResult<Prisma.$HabilitiesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Habilities.
     * @param {HabilitiesDeleteManyArgs} args - Arguments to filter Habilities to delete.
     * @example
     * // Delete a few Habilities
     * const { count } = await prisma.habilities.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HabilitiesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HabilitiesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Habilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Habilities
     * const habilities = await prisma.habilities.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HabilitiesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HabilitiesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Habilities.
     * @param {HabilitiesUpsertArgs} args - Arguments to update or create a Habilities.
     * @example
     * // Update or create a Habilities
     * const habilities = await prisma.habilities.upsert({
     *   create: {
     *     // ... data to create a Habilities
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Habilities we want to update
     *   }
     * })
    **/
    upsert<T extends HabilitiesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HabilitiesUpsertArgs<ExtArgs>>
    ): Prisma__HabilitiesClient<$Result.GetResult<Prisma.$HabilitiesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Habilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitiesCountArgs} args - Arguments to filter Habilities to count.
     * @example
     * // Count the number of Habilities
     * const count = await prisma.habilities.count({
     *   where: {
     *     // ... the filter for the Habilities we want to count
     *   }
     * })
    **/
    count<T extends HabilitiesCountArgs>(
      args?: Subset<T, HabilitiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HabilitiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Habilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HabilitiesAggregateArgs>(args: Subset<T, HabilitiesAggregateArgs>): Prisma.PrismaPromise<GetHabilitiesAggregateType<T>>

    /**
     * Group by Habilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabilitiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HabilitiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HabilitiesGroupByArgs['orderBy'] }
        : { orderBy?: HabilitiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HabilitiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHabilitiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Habilities model
   */
  readonly fields: HabilitiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Habilities.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HabilitiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Habilities model
   */ 
  interface HabilitiesFieldRefs {
    readonly id: FieldRef<"Habilities", 'String'>
    readonly name: FieldRef<"Habilities", 'String'>
    readonly slug: FieldRef<"Habilities", 'String'>
    readonly value: FieldRef<"Habilities", 'Int'>
    readonly user_id: FieldRef<"Habilities", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Habilities findUnique
   */
  export type HabilitiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habilities
     */
    select?: HabilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HabilitiesInclude<ExtArgs> | null
    /**
     * Filter, which Habilities to fetch.
     */
    where: HabilitiesWhereUniqueInput
  }


  /**
   * Habilities findUniqueOrThrow
   */
  export type HabilitiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habilities
     */
    select?: HabilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HabilitiesInclude<ExtArgs> | null
    /**
     * Filter, which Habilities to fetch.
     */
    where: HabilitiesWhereUniqueInput
  }


  /**
   * Habilities findFirst
   */
  export type HabilitiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habilities
     */
    select?: HabilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HabilitiesInclude<ExtArgs> | null
    /**
     * Filter, which Habilities to fetch.
     */
    where?: HabilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habilities to fetch.
     */
    orderBy?: HabilitiesOrderByWithRelationInput | HabilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Habilities.
     */
    cursor?: HabilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Habilities.
     */
    distinct?: HabilitiesScalarFieldEnum | HabilitiesScalarFieldEnum[]
  }


  /**
   * Habilities findFirstOrThrow
   */
  export type HabilitiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habilities
     */
    select?: HabilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HabilitiesInclude<ExtArgs> | null
    /**
     * Filter, which Habilities to fetch.
     */
    where?: HabilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habilities to fetch.
     */
    orderBy?: HabilitiesOrderByWithRelationInput | HabilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Habilities.
     */
    cursor?: HabilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Habilities.
     */
    distinct?: HabilitiesScalarFieldEnum | HabilitiesScalarFieldEnum[]
  }


  /**
   * Habilities findMany
   */
  export type HabilitiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habilities
     */
    select?: HabilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HabilitiesInclude<ExtArgs> | null
    /**
     * Filter, which Habilities to fetch.
     */
    where?: HabilitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habilities to fetch.
     */
    orderBy?: HabilitiesOrderByWithRelationInput | HabilitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Habilities.
     */
    cursor?: HabilitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habilities.
     */
    skip?: number
    distinct?: HabilitiesScalarFieldEnum | HabilitiesScalarFieldEnum[]
  }


  /**
   * Habilities create
   */
  export type HabilitiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habilities
     */
    select?: HabilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HabilitiesInclude<ExtArgs> | null
    /**
     * The data needed to create a Habilities.
     */
    data: XOR<HabilitiesCreateInput, HabilitiesUncheckedCreateInput>
  }


  /**
   * Habilities createMany
   */
  export type HabilitiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Habilities.
     */
    data: HabilitiesCreateManyInput | HabilitiesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Habilities update
   */
  export type HabilitiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habilities
     */
    select?: HabilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HabilitiesInclude<ExtArgs> | null
    /**
     * The data needed to update a Habilities.
     */
    data: XOR<HabilitiesUpdateInput, HabilitiesUncheckedUpdateInput>
    /**
     * Choose, which Habilities to update.
     */
    where: HabilitiesWhereUniqueInput
  }


  /**
   * Habilities updateMany
   */
  export type HabilitiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Habilities.
     */
    data: XOR<HabilitiesUpdateManyMutationInput, HabilitiesUncheckedUpdateManyInput>
    /**
     * Filter which Habilities to update
     */
    where?: HabilitiesWhereInput
  }


  /**
   * Habilities upsert
   */
  export type HabilitiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habilities
     */
    select?: HabilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HabilitiesInclude<ExtArgs> | null
    /**
     * The filter to search for the Habilities to update in case it exists.
     */
    where: HabilitiesWhereUniqueInput
    /**
     * In case the Habilities found by the `where` argument doesn't exist, create a new Habilities with this data.
     */
    create: XOR<HabilitiesCreateInput, HabilitiesUncheckedCreateInput>
    /**
     * In case the Habilities was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HabilitiesUpdateInput, HabilitiesUncheckedUpdateInput>
  }


  /**
   * Habilities delete
   */
  export type HabilitiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habilities
     */
    select?: HabilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HabilitiesInclude<ExtArgs> | null
    /**
     * Filter which Habilities to delete.
     */
    where: HabilitiesWhereUniqueInput
  }


  /**
   * Habilities deleteMany
   */
  export type HabilitiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Habilities to delete
     */
    where?: HabilitiesWhereInput
  }


  /**
   * Habilities without action
   */
  export type HabilitiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habilities
     */
    select?: HabilitiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HabilitiesInclude<ExtArgs> | null
  }



  /**
   * Model Contacts
   */

  export type AggregateContacts = {
    _count: ContactsCountAggregateOutputType | null
    _min: ContactsMinAggregateOutputType | null
    _max: ContactsMaxAggregateOutputType | null
  }

  export type ContactsMinAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    is_whatsapp: boolean | null
    user_id: string | null
  }

  export type ContactsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    is_whatsapp: boolean | null
    user_id: string | null
  }

  export type ContactsCountAggregateOutputType = {
    id: number
    name: number
    phone: number
    is_whatsapp: number
    user_id: number
    _all: number
  }


  export type ContactsMinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    is_whatsapp?: true
    user_id?: true
  }

  export type ContactsMaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    is_whatsapp?: true
    user_id?: true
  }

  export type ContactsCountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    is_whatsapp?: true
    user_id?: true
    _all?: true
  }

  export type ContactsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to aggregate.
     */
    where?: ContactsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactsOrderByWithRelationInput | ContactsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactsMaxAggregateInputType
  }

  export type GetContactsAggregateType<T extends ContactsAggregateArgs> = {
        [P in keyof T & keyof AggregateContacts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContacts[P]>
      : GetScalarType<T[P], AggregateContacts[P]>
  }




  export type ContactsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactsWhereInput
    orderBy?: ContactsOrderByWithAggregationInput | ContactsOrderByWithAggregationInput[]
    by: ContactsScalarFieldEnum[] | ContactsScalarFieldEnum
    having?: ContactsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactsCountAggregateInputType | true
    _min?: ContactsMinAggregateInputType
    _max?: ContactsMaxAggregateInputType
  }

  export type ContactsGroupByOutputType = {
    id: string
    name: string
    phone: string
    is_whatsapp: boolean
    user_id: string
    _count: ContactsCountAggregateOutputType | null
    _min: ContactsMinAggregateOutputType | null
    _max: ContactsMaxAggregateOutputType | null
  }

  type GetContactsGroupByPayload<T extends ContactsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactsGroupByOutputType[P]>
            : GetScalarType<T[P], ContactsGroupByOutputType[P]>
        }
      >
    >


  export type ContactsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    is_whatsapp?: boolean
    user_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    SocialMedias?: boolean | Contacts$SocialMediasArgs<ExtArgs>
    _count?: boolean | ContactsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contacts"]>

  export type ContactsSelectScalar = {
    id?: boolean
    name?: boolean
    phone?: boolean
    is_whatsapp?: boolean
    user_id?: boolean
  }

  export type ContactsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    SocialMedias?: boolean | Contacts$SocialMediasArgs<ExtArgs>
    _count?: boolean | ContactsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ContactsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contacts"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      SocialMedias: Prisma.$SocialMediasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      phone: string
      is_whatsapp: boolean
      user_id: string
    }, ExtArgs["result"]["contacts"]>
    composites: {}
  }


  type ContactsGetPayload<S extends boolean | null | undefined | ContactsDefaultArgs> = $Result.GetResult<Prisma.$ContactsPayload, S>

  type ContactsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContactsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ContactsCountAggregateInputType | true
    }

  export interface ContactsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contacts'], meta: { name: 'Contacts' } }
    /**
     * Find zero or one Contacts that matches the filter.
     * @param {ContactsFindUniqueArgs} args - Arguments to find a Contacts
     * @example
     * // Get one Contacts
     * const contacts = await prisma.contacts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContactsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ContactsFindUniqueArgs<ExtArgs>>
    ): Prisma__ContactsClient<$Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Contacts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContactsFindUniqueOrThrowArgs} args - Arguments to find a Contacts
     * @example
     * // Get one Contacts
     * const contacts = await prisma.contacts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContactsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContactsClient<$Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsFindFirstArgs} args - Arguments to find a Contacts
     * @example
     * // Get one Contacts
     * const contacts = await prisma.contacts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContactsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactsFindFirstArgs<ExtArgs>>
    ): Prisma__ContactsClient<$Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Contacts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsFindFirstOrThrowArgs} args - Arguments to find a Contacts
     * @example
     * // Get one Contacts
     * const contacts = await prisma.contacts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContactsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContactsClient<$Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contacts.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contacts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactsWithIdOnly = await prisma.contacts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContactsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Contacts.
     * @param {ContactsCreateArgs} args - Arguments to create a Contacts.
     * @example
     * // Create one Contacts
     * const Contacts = await prisma.contacts.create({
     *   data: {
     *     // ... data to create a Contacts
     *   }
     * })
     * 
    **/
    create<T extends ContactsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactsCreateArgs<ExtArgs>>
    ): Prisma__ContactsClient<$Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Contacts.
     *     @param {ContactsCreateManyArgs} args - Arguments to create many Contacts.
     *     @example
     *     // Create many Contacts
     *     const contacts = await prisma.contacts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContactsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contacts.
     * @param {ContactsDeleteArgs} args - Arguments to delete one Contacts.
     * @example
     * // Delete one Contacts
     * const Contacts = await prisma.contacts.delete({
     *   where: {
     *     // ... filter to delete one Contacts
     *   }
     * })
     * 
    **/
    delete<T extends ContactsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContactsDeleteArgs<ExtArgs>>
    ): Prisma__ContactsClient<$Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Contacts.
     * @param {ContactsUpdateArgs} args - Arguments to update one Contacts.
     * @example
     * // Update one Contacts
     * const contacts = await prisma.contacts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactsUpdateArgs<ExtArgs>>
    ): Prisma__ContactsClient<$Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Contacts.
     * @param {ContactsDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contacts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contacts = await prisma.contacts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContactsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contacts.
     * @param {ContactsUpsertArgs} args - Arguments to update or create a Contacts.
     * @example
     * // Update or create a Contacts
     * const contacts = await prisma.contacts.upsert({
     *   create: {
     *     // ... data to create a Contacts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contacts we want to update
     *   }
     * })
    **/
    upsert<T extends ContactsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContactsUpsertArgs<ExtArgs>>
    ): Prisma__ContactsClient<$Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contacts.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactsCountArgs>(
      args?: Subset<T, ContactsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactsAggregateArgs>(args: Subset<T, ContactsAggregateArgs>): Prisma.PrismaPromise<GetContactsAggregateType<T>>

    /**
     * Group by Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactsGroupByArgs['orderBy'] }
        : { orderBy?: ContactsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contacts model
   */
  readonly fields: ContactsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contacts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    SocialMedias<T extends Contacts$SocialMediasArgs<ExtArgs> = {}>(args?: Subset<T, Contacts$SocialMediasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialMediasPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Contacts model
   */ 
  interface ContactsFieldRefs {
    readonly id: FieldRef<"Contacts", 'String'>
    readonly name: FieldRef<"Contacts", 'String'>
    readonly phone: FieldRef<"Contacts", 'String'>
    readonly is_whatsapp: FieldRef<"Contacts", 'Boolean'>
    readonly user_id: FieldRef<"Contacts", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Contacts findUnique
   */
  export type ContactsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contacts
     */
    select?: ContactsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactsInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where: ContactsWhereUniqueInput
  }


  /**
   * Contacts findUniqueOrThrow
   */
  export type ContactsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contacts
     */
    select?: ContactsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactsInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where: ContactsWhereUniqueInput
  }


  /**
   * Contacts findFirst
   */
  export type ContactsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contacts
     */
    select?: ContactsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactsInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactsOrderByWithRelationInput | ContactsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactsScalarFieldEnum | ContactsScalarFieldEnum[]
  }


  /**
   * Contacts findFirstOrThrow
   */
  export type ContactsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contacts
     */
    select?: ContactsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactsInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactsOrderByWithRelationInput | ContactsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactsScalarFieldEnum | ContactsScalarFieldEnum[]
  }


  /**
   * Contacts findMany
   */
  export type ContactsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contacts
     */
    select?: ContactsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactsInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactsOrderByWithRelationInput | ContactsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactsScalarFieldEnum | ContactsScalarFieldEnum[]
  }


  /**
   * Contacts create
   */
  export type ContactsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contacts
     */
    select?: ContactsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactsInclude<ExtArgs> | null
    /**
     * The data needed to create a Contacts.
     */
    data: XOR<ContactsCreateInput, ContactsUncheckedCreateInput>
  }


  /**
   * Contacts createMany
   */
  export type ContactsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactsCreateManyInput | ContactsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Contacts update
   */
  export type ContactsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contacts
     */
    select?: ContactsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactsInclude<ExtArgs> | null
    /**
     * The data needed to update a Contacts.
     */
    data: XOR<ContactsUpdateInput, ContactsUncheckedUpdateInput>
    /**
     * Choose, which Contacts to update.
     */
    where: ContactsWhereUniqueInput
  }


  /**
   * Contacts updateMany
   */
  export type ContactsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactsUpdateManyMutationInput, ContactsUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactsWhereInput
  }


  /**
   * Contacts upsert
   */
  export type ContactsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contacts
     */
    select?: ContactsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactsInclude<ExtArgs> | null
    /**
     * The filter to search for the Contacts to update in case it exists.
     */
    where: ContactsWhereUniqueInput
    /**
     * In case the Contacts found by the `where` argument doesn't exist, create a new Contacts with this data.
     */
    create: XOR<ContactsCreateInput, ContactsUncheckedCreateInput>
    /**
     * In case the Contacts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactsUpdateInput, ContactsUncheckedUpdateInput>
  }


  /**
   * Contacts delete
   */
  export type ContactsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contacts
     */
    select?: ContactsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactsInclude<ExtArgs> | null
    /**
     * Filter which Contacts to delete.
     */
    where: ContactsWhereUniqueInput
  }


  /**
   * Contacts deleteMany
   */
  export type ContactsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactsWhereInput
  }


  /**
   * Contacts.SocialMedias
   */
  export type Contacts$SocialMediasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedias
     */
    select?: SocialMediasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialMediasInclude<ExtArgs> | null
    where?: SocialMediasWhereInput
    orderBy?: SocialMediasOrderByWithRelationInput | SocialMediasOrderByWithRelationInput[]
    cursor?: SocialMediasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SocialMediasScalarFieldEnum | SocialMediasScalarFieldEnum[]
  }


  /**
   * Contacts without action
   */
  export type ContactsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contacts
     */
    select?: ContactsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactsInclude<ExtArgs> | null
  }



  /**
   * Model SocialMedias
   */

  export type AggregateSocialMedias = {
    _count: SocialMediasCountAggregateOutputType | null
    _min: SocialMediasMinAggregateOutputType | null
    _max: SocialMediasMaxAggregateOutputType | null
  }

  export type SocialMediasMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    url: string | null
    contacts_id: string | null
  }

  export type SocialMediasMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    url: string | null
    contacts_id: string | null
  }

  export type SocialMediasCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    url: number
    contacts_id: number
    _all: number
  }


  export type SocialMediasMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    url?: true
    contacts_id?: true
  }

  export type SocialMediasMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    url?: true
    contacts_id?: true
  }

  export type SocialMediasCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    url?: true
    contacts_id?: true
    _all?: true
  }

  export type SocialMediasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialMedias to aggregate.
     */
    where?: SocialMediasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialMedias to fetch.
     */
    orderBy?: SocialMediasOrderByWithRelationInput | SocialMediasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SocialMediasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SocialMedias
    **/
    _count?: true | SocialMediasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SocialMediasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SocialMediasMaxAggregateInputType
  }

  export type GetSocialMediasAggregateType<T extends SocialMediasAggregateArgs> = {
        [P in keyof T & keyof AggregateSocialMedias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSocialMedias[P]>
      : GetScalarType<T[P], AggregateSocialMedias[P]>
  }




  export type SocialMediasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialMediasWhereInput
    orderBy?: SocialMediasOrderByWithAggregationInput | SocialMediasOrderByWithAggregationInput[]
    by: SocialMediasScalarFieldEnum[] | SocialMediasScalarFieldEnum
    having?: SocialMediasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SocialMediasCountAggregateInputType | true
    _min?: SocialMediasMinAggregateInputType
    _max?: SocialMediasMaxAggregateInputType
  }

  export type SocialMediasGroupByOutputType = {
    id: string
    name: string
    slug: string
    url: string
    contacts_id: string
    _count: SocialMediasCountAggregateOutputType | null
    _min: SocialMediasMinAggregateOutputType | null
    _max: SocialMediasMaxAggregateOutputType | null
  }

  type GetSocialMediasGroupByPayload<T extends SocialMediasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SocialMediasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SocialMediasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SocialMediasGroupByOutputType[P]>
            : GetScalarType<T[P], SocialMediasGroupByOutputType[P]>
        }
      >
    >


  export type SocialMediasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    url?: boolean
    contacts_id?: boolean
    contacts?: boolean | ContactsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["socialMedias"]>

  export type SocialMediasSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    url?: boolean
    contacts_id?: boolean
  }

  export type SocialMediasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contacts?: boolean | ContactsDefaultArgs<ExtArgs>
  }


  export type $SocialMediasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SocialMedias"
    objects: {
      contacts: Prisma.$ContactsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      url: string
      contacts_id: string
    }, ExtArgs["result"]["socialMedias"]>
    composites: {}
  }


  type SocialMediasGetPayload<S extends boolean | null | undefined | SocialMediasDefaultArgs> = $Result.GetResult<Prisma.$SocialMediasPayload, S>

  type SocialMediasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SocialMediasFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SocialMediasCountAggregateInputType | true
    }

  export interface SocialMediasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SocialMedias'], meta: { name: 'SocialMedias' } }
    /**
     * Find zero or one SocialMedias that matches the filter.
     * @param {SocialMediasFindUniqueArgs} args - Arguments to find a SocialMedias
     * @example
     * // Get one SocialMedias
     * const socialMedias = await prisma.socialMedias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SocialMediasFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SocialMediasFindUniqueArgs<ExtArgs>>
    ): Prisma__SocialMediasClient<$Result.GetResult<Prisma.$SocialMediasPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SocialMedias that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SocialMediasFindUniqueOrThrowArgs} args - Arguments to find a SocialMedias
     * @example
     * // Get one SocialMedias
     * const socialMedias = await prisma.socialMedias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SocialMediasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SocialMediasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SocialMediasClient<$Result.GetResult<Prisma.$SocialMediasPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SocialMedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediasFindFirstArgs} args - Arguments to find a SocialMedias
     * @example
     * // Get one SocialMedias
     * const socialMedias = await prisma.socialMedias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SocialMediasFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SocialMediasFindFirstArgs<ExtArgs>>
    ): Prisma__SocialMediasClient<$Result.GetResult<Prisma.$SocialMediasPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SocialMedias that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediasFindFirstOrThrowArgs} args - Arguments to find a SocialMedias
     * @example
     * // Get one SocialMedias
     * const socialMedias = await prisma.socialMedias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SocialMediasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SocialMediasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SocialMediasClient<$Result.GetResult<Prisma.$SocialMediasPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SocialMedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SocialMedias
     * const socialMedias = await prisma.socialMedias.findMany()
     * 
     * // Get first 10 SocialMedias
     * const socialMedias = await prisma.socialMedias.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const socialMediasWithIdOnly = await prisma.socialMedias.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SocialMediasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SocialMediasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialMediasPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SocialMedias.
     * @param {SocialMediasCreateArgs} args - Arguments to create a SocialMedias.
     * @example
     * // Create one SocialMedias
     * const SocialMedias = await prisma.socialMedias.create({
     *   data: {
     *     // ... data to create a SocialMedias
     *   }
     * })
     * 
    **/
    create<T extends SocialMediasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SocialMediasCreateArgs<ExtArgs>>
    ): Prisma__SocialMediasClient<$Result.GetResult<Prisma.$SocialMediasPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SocialMedias.
     *     @param {SocialMediasCreateManyArgs} args - Arguments to create many SocialMedias.
     *     @example
     *     // Create many SocialMedias
     *     const socialMedias = await prisma.socialMedias.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SocialMediasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SocialMediasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SocialMedias.
     * @param {SocialMediasDeleteArgs} args - Arguments to delete one SocialMedias.
     * @example
     * // Delete one SocialMedias
     * const SocialMedias = await prisma.socialMedias.delete({
     *   where: {
     *     // ... filter to delete one SocialMedias
     *   }
     * })
     * 
    **/
    delete<T extends SocialMediasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SocialMediasDeleteArgs<ExtArgs>>
    ): Prisma__SocialMediasClient<$Result.GetResult<Prisma.$SocialMediasPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SocialMedias.
     * @param {SocialMediasUpdateArgs} args - Arguments to update one SocialMedias.
     * @example
     * // Update one SocialMedias
     * const socialMedias = await prisma.socialMedias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SocialMediasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SocialMediasUpdateArgs<ExtArgs>>
    ): Prisma__SocialMediasClient<$Result.GetResult<Prisma.$SocialMediasPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SocialMedias.
     * @param {SocialMediasDeleteManyArgs} args - Arguments to filter SocialMedias to delete.
     * @example
     * // Delete a few SocialMedias
     * const { count } = await prisma.socialMedias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SocialMediasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SocialMediasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SocialMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SocialMedias
     * const socialMedias = await prisma.socialMedias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SocialMediasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SocialMediasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SocialMedias.
     * @param {SocialMediasUpsertArgs} args - Arguments to update or create a SocialMedias.
     * @example
     * // Update or create a SocialMedias
     * const socialMedias = await prisma.socialMedias.upsert({
     *   create: {
     *     // ... data to create a SocialMedias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SocialMedias we want to update
     *   }
     * })
    **/
    upsert<T extends SocialMediasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SocialMediasUpsertArgs<ExtArgs>>
    ): Prisma__SocialMediasClient<$Result.GetResult<Prisma.$SocialMediasPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SocialMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediasCountArgs} args - Arguments to filter SocialMedias to count.
     * @example
     * // Count the number of SocialMedias
     * const count = await prisma.socialMedias.count({
     *   where: {
     *     // ... the filter for the SocialMedias we want to count
     *   }
     * })
    **/
    count<T extends SocialMediasCountArgs>(
      args?: Subset<T, SocialMediasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SocialMediasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SocialMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SocialMediasAggregateArgs>(args: Subset<T, SocialMediasAggregateArgs>): Prisma.PrismaPromise<GetSocialMediasAggregateType<T>>

    /**
     * Group by SocialMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SocialMediasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SocialMediasGroupByArgs['orderBy'] }
        : { orderBy?: SocialMediasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SocialMediasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSocialMediasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SocialMedias model
   */
  readonly fields: SocialMediasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SocialMedias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SocialMediasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    contacts<T extends ContactsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContactsDefaultArgs<ExtArgs>>): Prisma__ContactsClient<$Result.GetResult<Prisma.$ContactsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SocialMedias model
   */ 
  interface SocialMediasFieldRefs {
    readonly id: FieldRef<"SocialMedias", 'String'>
    readonly name: FieldRef<"SocialMedias", 'String'>
    readonly slug: FieldRef<"SocialMedias", 'String'>
    readonly url: FieldRef<"SocialMedias", 'String'>
    readonly contacts_id: FieldRef<"SocialMedias", 'String'>
  }
    

  // Custom InputTypes

  /**
   * SocialMedias findUnique
   */
  export type SocialMediasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedias
     */
    select?: SocialMediasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialMediasInclude<ExtArgs> | null
    /**
     * Filter, which SocialMedias to fetch.
     */
    where: SocialMediasWhereUniqueInput
  }


  /**
   * SocialMedias findUniqueOrThrow
   */
  export type SocialMediasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedias
     */
    select?: SocialMediasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialMediasInclude<ExtArgs> | null
    /**
     * Filter, which SocialMedias to fetch.
     */
    where: SocialMediasWhereUniqueInput
  }


  /**
   * SocialMedias findFirst
   */
  export type SocialMediasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedias
     */
    select?: SocialMediasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialMediasInclude<ExtArgs> | null
    /**
     * Filter, which SocialMedias to fetch.
     */
    where?: SocialMediasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialMedias to fetch.
     */
    orderBy?: SocialMediasOrderByWithRelationInput | SocialMediasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialMedias.
     */
    cursor?: SocialMediasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialMedias.
     */
    distinct?: SocialMediasScalarFieldEnum | SocialMediasScalarFieldEnum[]
  }


  /**
   * SocialMedias findFirstOrThrow
   */
  export type SocialMediasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedias
     */
    select?: SocialMediasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialMediasInclude<ExtArgs> | null
    /**
     * Filter, which SocialMedias to fetch.
     */
    where?: SocialMediasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialMedias to fetch.
     */
    orderBy?: SocialMediasOrderByWithRelationInput | SocialMediasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialMedias.
     */
    cursor?: SocialMediasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialMedias.
     */
    distinct?: SocialMediasScalarFieldEnum | SocialMediasScalarFieldEnum[]
  }


  /**
   * SocialMedias findMany
   */
  export type SocialMediasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedias
     */
    select?: SocialMediasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialMediasInclude<ExtArgs> | null
    /**
     * Filter, which SocialMedias to fetch.
     */
    where?: SocialMediasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialMedias to fetch.
     */
    orderBy?: SocialMediasOrderByWithRelationInput | SocialMediasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SocialMedias.
     */
    cursor?: SocialMediasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialMedias.
     */
    skip?: number
    distinct?: SocialMediasScalarFieldEnum | SocialMediasScalarFieldEnum[]
  }


  /**
   * SocialMedias create
   */
  export type SocialMediasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedias
     */
    select?: SocialMediasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialMediasInclude<ExtArgs> | null
    /**
     * The data needed to create a SocialMedias.
     */
    data: XOR<SocialMediasCreateInput, SocialMediasUncheckedCreateInput>
  }


  /**
   * SocialMedias createMany
   */
  export type SocialMediasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SocialMedias.
     */
    data: SocialMediasCreateManyInput | SocialMediasCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SocialMedias update
   */
  export type SocialMediasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedias
     */
    select?: SocialMediasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialMediasInclude<ExtArgs> | null
    /**
     * The data needed to update a SocialMedias.
     */
    data: XOR<SocialMediasUpdateInput, SocialMediasUncheckedUpdateInput>
    /**
     * Choose, which SocialMedias to update.
     */
    where: SocialMediasWhereUniqueInput
  }


  /**
   * SocialMedias updateMany
   */
  export type SocialMediasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SocialMedias.
     */
    data: XOR<SocialMediasUpdateManyMutationInput, SocialMediasUncheckedUpdateManyInput>
    /**
     * Filter which SocialMedias to update
     */
    where?: SocialMediasWhereInput
  }


  /**
   * SocialMedias upsert
   */
  export type SocialMediasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedias
     */
    select?: SocialMediasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialMediasInclude<ExtArgs> | null
    /**
     * The filter to search for the SocialMedias to update in case it exists.
     */
    where: SocialMediasWhereUniqueInput
    /**
     * In case the SocialMedias found by the `where` argument doesn't exist, create a new SocialMedias with this data.
     */
    create: XOR<SocialMediasCreateInput, SocialMediasUncheckedCreateInput>
    /**
     * In case the SocialMedias was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SocialMediasUpdateInput, SocialMediasUncheckedUpdateInput>
  }


  /**
   * SocialMedias delete
   */
  export type SocialMediasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedias
     */
    select?: SocialMediasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialMediasInclude<ExtArgs> | null
    /**
     * Filter which SocialMedias to delete.
     */
    where: SocialMediasWhereUniqueInput
  }


  /**
   * SocialMedias deleteMany
   */
  export type SocialMediasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialMedias to delete
     */
    where?: SocialMediasWhereInput
  }


  /**
   * SocialMedias without action
   */
  export type SocialMediasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMedias
     */
    select?: SocialMediasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialMediasInclude<ExtArgs> | null
  }



  /**
   * Model Languages
   */

  export type AggregateLanguages = {
    _count: LanguagesCountAggregateOutputType | null
    _avg: LanguagesAvgAggregateOutputType | null
    _sum: LanguagesSumAggregateOutputType | null
    _min: LanguagesMinAggregateOutputType | null
    _max: LanguagesMaxAggregateOutputType | null
  }

  export type LanguagesAvgAggregateOutputType = {
    stars: number | null
  }

  export type LanguagesSumAggregateOutputType = {
    stars: number | null
  }

  export type LanguagesMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    stars: number | null
    user_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LanguagesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    stars: number | null
    user_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LanguagesCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    stars: number
    user_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LanguagesAvgAggregateInputType = {
    stars?: true
  }

  export type LanguagesSumAggregateInputType = {
    stars?: true
  }

  export type LanguagesMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    stars?: true
    user_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LanguagesMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    stars?: true
    user_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LanguagesCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    stars?: true
    user_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LanguagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Languages to aggregate.
     */
    where?: LanguagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Languages
    **/
    _count?: true | LanguagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LanguagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LanguagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguagesMaxAggregateInputType
  }

  export type GetLanguagesAggregateType<T extends LanguagesAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguages[P]>
      : GetScalarType<T[P], AggregateLanguages[P]>
  }




  export type LanguagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguagesWhereInput
    orderBy?: LanguagesOrderByWithAggregationInput | LanguagesOrderByWithAggregationInput[]
    by: LanguagesScalarFieldEnum[] | LanguagesScalarFieldEnum
    having?: LanguagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguagesCountAggregateInputType | true
    _avg?: LanguagesAvgAggregateInputType
    _sum?: LanguagesSumAggregateInputType
    _min?: LanguagesMinAggregateInputType
    _max?: LanguagesMaxAggregateInputType
  }

  export type LanguagesGroupByOutputType = {
    id: string
    name: string
    slug: string
    stars: number
    user_id: string
    createdAt: Date
    updatedAt: Date
    _count: LanguagesCountAggregateOutputType | null
    _avg: LanguagesAvgAggregateOutputType | null
    _sum: LanguagesSumAggregateOutputType | null
    _min: LanguagesMinAggregateOutputType | null
    _max: LanguagesMaxAggregateOutputType | null
  }

  type GetLanguagesGroupByPayload<T extends LanguagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguagesGroupByOutputType[P]>
            : GetScalarType<T[P], LanguagesGroupByOutputType[P]>
        }
      >
    >


  export type LanguagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    stars?: boolean
    user_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languages"]>

  export type LanguagesSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    stars?: boolean
    user_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LanguagesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $LanguagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Languages"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      stars: number
      user_id: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["languages"]>
    composites: {}
  }


  type LanguagesGetPayload<S extends boolean | null | undefined | LanguagesDefaultArgs> = $Result.GetResult<Prisma.$LanguagesPayload, S>

  type LanguagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LanguagesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LanguagesCountAggregateInputType | true
    }

  export interface LanguagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Languages'], meta: { name: 'Languages' } }
    /**
     * Find zero or one Languages that matches the filter.
     * @param {LanguagesFindUniqueArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LanguagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesFindUniqueArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Languages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LanguagesFindUniqueOrThrowArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LanguagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesFindFirstArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LanguagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesFindFirstArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Languages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesFindFirstOrThrowArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LanguagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Languages
     * const languages = await prisma.languages.findMany()
     * 
     * // Get first 10 Languages
     * const languages = await prisma.languages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languagesWithIdOnly = await prisma.languages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LanguagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Languages.
     * @param {LanguagesCreateArgs} args - Arguments to create a Languages.
     * @example
     * // Create one Languages
     * const Languages = await prisma.languages.create({
     *   data: {
     *     // ... data to create a Languages
     *   }
     * })
     * 
    **/
    create<T extends LanguagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesCreateArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Languages.
     *     @param {LanguagesCreateManyArgs} args - Arguments to create many Languages.
     *     @example
     *     // Create many Languages
     *     const languages = await prisma.languages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LanguagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Languages.
     * @param {LanguagesDeleteArgs} args - Arguments to delete one Languages.
     * @example
     * // Delete one Languages
     * const Languages = await prisma.languages.delete({
     *   where: {
     *     // ... filter to delete one Languages
     *   }
     * })
     * 
    **/
    delete<T extends LanguagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesDeleteArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Languages.
     * @param {LanguagesUpdateArgs} args - Arguments to update one Languages.
     * @example
     * // Update one Languages
     * const languages = await prisma.languages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LanguagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesUpdateArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Languages.
     * @param {LanguagesDeleteManyArgs} args - Arguments to filter Languages to delete.
     * @example
     * // Delete a few Languages
     * const { count } = await prisma.languages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LanguagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Languages
     * const languages = await prisma.languages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LanguagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Languages.
     * @param {LanguagesUpsertArgs} args - Arguments to update or create a Languages.
     * @example
     * // Update or create a Languages
     * const languages = await prisma.languages.upsert({
     *   create: {
     *     // ... data to create a Languages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Languages we want to update
     *   }
     * })
    **/
    upsert<T extends LanguagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesUpsertArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesCountArgs} args - Arguments to filter Languages to count.
     * @example
     * // Count the number of Languages
     * const count = await prisma.languages.count({
     *   where: {
     *     // ... the filter for the Languages we want to count
     *   }
     * })
    **/
    count<T extends LanguagesCountArgs>(
      args?: Subset<T, LanguagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguagesAggregateArgs>(args: Subset<T, LanguagesAggregateArgs>): Prisma.PrismaPromise<GetLanguagesAggregateType<T>>

    /**
     * Group by Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguagesGroupByArgs['orderBy'] }
        : { orderBy?: LanguagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Languages model
   */
  readonly fields: LanguagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Languages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Languages model
   */ 
  interface LanguagesFieldRefs {
    readonly id: FieldRef<"Languages", 'String'>
    readonly name: FieldRef<"Languages", 'String'>
    readonly slug: FieldRef<"Languages", 'String'>
    readonly stars: FieldRef<"Languages", 'Int'>
    readonly user_id: FieldRef<"Languages", 'String'>
    readonly createdAt: FieldRef<"Languages", 'DateTime'>
    readonly updatedAt: FieldRef<"Languages", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Languages findUnique
   */
  export type LanguagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where: LanguagesWhereUniqueInput
  }


  /**
   * Languages findUniqueOrThrow
   */
  export type LanguagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where: LanguagesWhereUniqueInput
  }


  /**
   * Languages findFirst
   */
  export type LanguagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguagesScalarFieldEnum | LanguagesScalarFieldEnum[]
  }


  /**
   * Languages findFirstOrThrow
   */
  export type LanguagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguagesScalarFieldEnum | LanguagesScalarFieldEnum[]
  }


  /**
   * Languages findMany
   */
  export type LanguagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Languages.
     */
    cursor?: LanguagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    distinct?: LanguagesScalarFieldEnum | LanguagesScalarFieldEnum[]
  }


  /**
   * Languages create
   */
  export type LanguagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * The data needed to create a Languages.
     */
    data: XOR<LanguagesCreateInput, LanguagesUncheckedCreateInput>
  }


  /**
   * Languages createMany
   */
  export type LanguagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Languages.
     */
    data: LanguagesCreateManyInput | LanguagesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Languages update
   */
  export type LanguagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * The data needed to update a Languages.
     */
    data: XOR<LanguagesUpdateInput, LanguagesUncheckedUpdateInput>
    /**
     * Choose, which Languages to update.
     */
    where: LanguagesWhereUniqueInput
  }


  /**
   * Languages updateMany
   */
  export type LanguagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Languages.
     */
    data: XOR<LanguagesUpdateManyMutationInput, LanguagesUncheckedUpdateManyInput>
    /**
     * Filter which Languages to update
     */
    where?: LanguagesWhereInput
  }


  /**
   * Languages upsert
   */
  export type LanguagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * The filter to search for the Languages to update in case it exists.
     */
    where: LanguagesWhereUniqueInput
    /**
     * In case the Languages found by the `where` argument doesn't exist, create a new Languages with this data.
     */
    create: XOR<LanguagesCreateInput, LanguagesUncheckedCreateInput>
    /**
     * In case the Languages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguagesUpdateInput, LanguagesUncheckedUpdateInput>
  }


  /**
   * Languages delete
   */
  export type LanguagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter which Languages to delete.
     */
    where: LanguagesWhereUniqueInput
  }


  /**
   * Languages deleteMany
   */
  export type LanguagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Languages to delete
     */
    where?: LanguagesWhereInput
  }


  /**
   * Languages without action
   */
  export type LanguagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
  }



  /**
   * Model ProfessionalExperiences
   */

  export type AggregateProfessionalExperiences = {
    _count: ProfessionalExperiencesCountAggregateOutputType | null
    _min: ProfessionalExperiencesMinAggregateOutputType | null
    _max: ProfessionalExperiencesMaxAggregateOutputType | null
  }

  export type ProfessionalExperiencesMinAggregateOutputType = {
    id: string | null
    title: string | null
    company: string | null
    date_init: Date | null
    date_end: Date | null
    is_actual_job: boolean | null
    user_id: string | null
  }

  export type ProfessionalExperiencesMaxAggregateOutputType = {
    id: string | null
    title: string | null
    company: string | null
    date_init: Date | null
    date_end: Date | null
    is_actual_job: boolean | null
    user_id: string | null
  }

  export type ProfessionalExperiencesCountAggregateOutputType = {
    id: number
    title: number
    company: number
    date_init: number
    date_end: number
    is_actual_job: number
    user_id: number
    _all: number
  }


  export type ProfessionalExperiencesMinAggregateInputType = {
    id?: true
    title?: true
    company?: true
    date_init?: true
    date_end?: true
    is_actual_job?: true
    user_id?: true
  }

  export type ProfessionalExperiencesMaxAggregateInputType = {
    id?: true
    title?: true
    company?: true
    date_init?: true
    date_end?: true
    is_actual_job?: true
    user_id?: true
  }

  export type ProfessionalExperiencesCountAggregateInputType = {
    id?: true
    title?: true
    company?: true
    date_init?: true
    date_end?: true
    is_actual_job?: true
    user_id?: true
    _all?: true
  }

  export type ProfessionalExperiencesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalExperiences to aggregate.
     */
    where?: ProfessionalExperiencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalExperiences to fetch.
     */
    orderBy?: ProfessionalExperiencesOrderByWithRelationInput | ProfessionalExperiencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionalExperiencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalExperiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalExperiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfessionalExperiences
    **/
    _count?: true | ProfessionalExperiencesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionalExperiencesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionalExperiencesMaxAggregateInputType
  }

  export type GetProfessionalExperiencesAggregateType<T extends ProfessionalExperiencesAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessionalExperiences]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessionalExperiences[P]>
      : GetScalarType<T[P], AggregateProfessionalExperiences[P]>
  }




  export type ProfessionalExperiencesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalExperiencesWhereInput
    orderBy?: ProfessionalExperiencesOrderByWithAggregationInput | ProfessionalExperiencesOrderByWithAggregationInput[]
    by: ProfessionalExperiencesScalarFieldEnum[] | ProfessionalExperiencesScalarFieldEnum
    having?: ProfessionalExperiencesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionalExperiencesCountAggregateInputType | true
    _min?: ProfessionalExperiencesMinAggregateInputType
    _max?: ProfessionalExperiencesMaxAggregateInputType
  }

  export type ProfessionalExperiencesGroupByOutputType = {
    id: string
    title: string
    company: string
    date_init: Date
    date_end: Date | null
    is_actual_job: boolean
    user_id: string
    _count: ProfessionalExperiencesCountAggregateOutputType | null
    _min: ProfessionalExperiencesMinAggregateOutputType | null
    _max: ProfessionalExperiencesMaxAggregateOutputType | null
  }

  type GetProfessionalExperiencesGroupByPayload<T extends ProfessionalExperiencesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionalExperiencesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionalExperiencesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionalExperiencesGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionalExperiencesGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionalExperiencesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    company?: boolean
    date_init?: boolean
    date_end?: boolean
    is_actual_job?: boolean
    user_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ProfessionalExperiencesDescription?: boolean | ProfessionalExperiences$ProfessionalExperiencesDescriptionArgs<ExtArgs>
    _count?: boolean | ProfessionalExperiencesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalExperiences"]>

  export type ProfessionalExperiencesSelectScalar = {
    id?: boolean
    title?: boolean
    company?: boolean
    date_init?: boolean
    date_end?: boolean
    is_actual_job?: boolean
    user_id?: boolean
  }

  export type ProfessionalExperiencesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ProfessionalExperiencesDescription?: boolean | ProfessionalExperiences$ProfessionalExperiencesDescriptionArgs<ExtArgs>
    _count?: boolean | ProfessionalExperiencesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProfessionalExperiencesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfessionalExperiences"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      ProfessionalExperiencesDescription: Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      company: string
      date_init: Date
      date_end: Date | null
      is_actual_job: boolean
      user_id: string
    }, ExtArgs["result"]["professionalExperiences"]>
    composites: {}
  }


  type ProfessionalExperiencesGetPayload<S extends boolean | null | undefined | ProfessionalExperiencesDefaultArgs> = $Result.GetResult<Prisma.$ProfessionalExperiencesPayload, S>

  type ProfessionalExperiencesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfessionalExperiencesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProfessionalExperiencesCountAggregateInputType | true
    }

  export interface ProfessionalExperiencesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfessionalExperiences'], meta: { name: 'ProfessionalExperiences' } }
    /**
     * Find zero or one ProfessionalExperiences that matches the filter.
     * @param {ProfessionalExperiencesFindUniqueArgs} args - Arguments to find a ProfessionalExperiences
     * @example
     * // Get one ProfessionalExperiences
     * const professionalExperiences = await prisma.professionalExperiences.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfessionalExperiencesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessionalExperiencesFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesClient<$Result.GetResult<Prisma.$ProfessionalExperiencesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProfessionalExperiences that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfessionalExperiencesFindUniqueOrThrowArgs} args - Arguments to find a ProfessionalExperiences
     * @example
     * // Get one ProfessionalExperiences
     * const professionalExperiences = await prisma.professionalExperiences.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfessionalExperiencesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessionalExperiencesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesClient<$Result.GetResult<Prisma.$ProfessionalExperiencesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProfessionalExperiences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesFindFirstArgs} args - Arguments to find a ProfessionalExperiences
     * @example
     * // Get one ProfessionalExperiences
     * const professionalExperiences = await prisma.professionalExperiences.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfessionalExperiencesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessionalExperiencesFindFirstArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesClient<$Result.GetResult<Prisma.$ProfessionalExperiencesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProfessionalExperiences that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesFindFirstOrThrowArgs} args - Arguments to find a ProfessionalExperiences
     * @example
     * // Get one ProfessionalExperiences
     * const professionalExperiences = await prisma.professionalExperiences.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfessionalExperiencesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessionalExperiencesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesClient<$Result.GetResult<Prisma.$ProfessionalExperiencesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProfessionalExperiences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfessionalExperiences
     * const professionalExperiences = await prisma.professionalExperiences.findMany()
     * 
     * // Get first 10 ProfessionalExperiences
     * const professionalExperiences = await prisma.professionalExperiences.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionalExperiencesWithIdOnly = await prisma.professionalExperiences.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfessionalExperiencesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessionalExperiencesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalExperiencesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProfessionalExperiences.
     * @param {ProfessionalExperiencesCreateArgs} args - Arguments to create a ProfessionalExperiences.
     * @example
     * // Create one ProfessionalExperiences
     * const ProfessionalExperiences = await prisma.professionalExperiences.create({
     *   data: {
     *     // ... data to create a ProfessionalExperiences
     *   }
     * })
     * 
    **/
    create<T extends ProfessionalExperiencesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessionalExperiencesCreateArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesClient<$Result.GetResult<Prisma.$ProfessionalExperiencesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProfessionalExperiences.
     *     @param {ProfessionalExperiencesCreateManyArgs} args - Arguments to create many ProfessionalExperiences.
     *     @example
     *     // Create many ProfessionalExperiences
     *     const professionalExperiences = await prisma.professionalExperiences.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfessionalExperiencesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessionalExperiencesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProfessionalExperiences.
     * @param {ProfessionalExperiencesDeleteArgs} args - Arguments to delete one ProfessionalExperiences.
     * @example
     * // Delete one ProfessionalExperiences
     * const ProfessionalExperiences = await prisma.professionalExperiences.delete({
     *   where: {
     *     // ... filter to delete one ProfessionalExperiences
     *   }
     * })
     * 
    **/
    delete<T extends ProfessionalExperiencesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessionalExperiencesDeleteArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesClient<$Result.GetResult<Prisma.$ProfessionalExperiencesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProfessionalExperiences.
     * @param {ProfessionalExperiencesUpdateArgs} args - Arguments to update one ProfessionalExperiences.
     * @example
     * // Update one ProfessionalExperiences
     * const professionalExperiences = await prisma.professionalExperiences.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfessionalExperiencesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessionalExperiencesUpdateArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesClient<$Result.GetResult<Prisma.$ProfessionalExperiencesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProfessionalExperiences.
     * @param {ProfessionalExperiencesDeleteManyArgs} args - Arguments to filter ProfessionalExperiences to delete.
     * @example
     * // Delete a few ProfessionalExperiences
     * const { count } = await prisma.professionalExperiences.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfessionalExperiencesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessionalExperiencesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionalExperiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfessionalExperiences
     * const professionalExperiences = await prisma.professionalExperiences.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfessionalExperiencesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessionalExperiencesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProfessionalExperiences.
     * @param {ProfessionalExperiencesUpsertArgs} args - Arguments to update or create a ProfessionalExperiences.
     * @example
     * // Update or create a ProfessionalExperiences
     * const professionalExperiences = await prisma.professionalExperiences.upsert({
     *   create: {
     *     // ... data to create a ProfessionalExperiences
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfessionalExperiences we want to update
     *   }
     * })
    **/
    upsert<T extends ProfessionalExperiencesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessionalExperiencesUpsertArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesClient<$Result.GetResult<Prisma.$ProfessionalExperiencesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProfessionalExperiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesCountArgs} args - Arguments to filter ProfessionalExperiences to count.
     * @example
     * // Count the number of ProfessionalExperiences
     * const count = await prisma.professionalExperiences.count({
     *   where: {
     *     // ... the filter for the ProfessionalExperiences we want to count
     *   }
     * })
    **/
    count<T extends ProfessionalExperiencesCountArgs>(
      args?: Subset<T, ProfessionalExperiencesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionalExperiencesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfessionalExperiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionalExperiencesAggregateArgs>(args: Subset<T, ProfessionalExperiencesAggregateArgs>): Prisma.PrismaPromise<GetProfessionalExperiencesAggregateType<T>>

    /**
     * Group by ProfessionalExperiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionalExperiencesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionalExperiencesGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionalExperiencesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionalExperiencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionalExperiencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfessionalExperiences model
   */
  readonly fields: ProfessionalExperiencesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfessionalExperiences.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionalExperiencesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ProfessionalExperiencesDescription<T extends ProfessionalExperiences$ProfessionalExperiencesDescriptionArgs<ExtArgs> = {}>(args?: Subset<T, ProfessionalExperiences$ProfessionalExperiencesDescriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProfessionalExperiences model
   */ 
  interface ProfessionalExperiencesFieldRefs {
    readonly id: FieldRef<"ProfessionalExperiences", 'String'>
    readonly title: FieldRef<"ProfessionalExperiences", 'String'>
    readonly company: FieldRef<"ProfessionalExperiences", 'String'>
    readonly date_init: FieldRef<"ProfessionalExperiences", 'DateTime'>
    readonly date_end: FieldRef<"ProfessionalExperiences", 'DateTime'>
    readonly is_actual_job: FieldRef<"ProfessionalExperiences", 'Boolean'>
    readonly user_id: FieldRef<"ProfessionalExperiences", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ProfessionalExperiences findUnique
   */
  export type ProfessionalExperiencesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiences
     */
    select?: ProfessionalExperiencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalExperiences to fetch.
     */
    where: ProfessionalExperiencesWhereUniqueInput
  }


  /**
   * ProfessionalExperiences findUniqueOrThrow
   */
  export type ProfessionalExperiencesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiences
     */
    select?: ProfessionalExperiencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalExperiences to fetch.
     */
    where: ProfessionalExperiencesWhereUniqueInput
  }


  /**
   * ProfessionalExperiences findFirst
   */
  export type ProfessionalExperiencesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiences
     */
    select?: ProfessionalExperiencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalExperiences to fetch.
     */
    where?: ProfessionalExperiencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalExperiences to fetch.
     */
    orderBy?: ProfessionalExperiencesOrderByWithRelationInput | ProfessionalExperiencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalExperiences.
     */
    cursor?: ProfessionalExperiencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalExperiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalExperiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalExperiences.
     */
    distinct?: ProfessionalExperiencesScalarFieldEnum | ProfessionalExperiencesScalarFieldEnum[]
  }


  /**
   * ProfessionalExperiences findFirstOrThrow
   */
  export type ProfessionalExperiencesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiences
     */
    select?: ProfessionalExperiencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalExperiences to fetch.
     */
    where?: ProfessionalExperiencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalExperiences to fetch.
     */
    orderBy?: ProfessionalExperiencesOrderByWithRelationInput | ProfessionalExperiencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalExperiences.
     */
    cursor?: ProfessionalExperiencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalExperiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalExperiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalExperiences.
     */
    distinct?: ProfessionalExperiencesScalarFieldEnum | ProfessionalExperiencesScalarFieldEnum[]
  }


  /**
   * ProfessionalExperiences findMany
   */
  export type ProfessionalExperiencesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiences
     */
    select?: ProfessionalExperiencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalExperiences to fetch.
     */
    where?: ProfessionalExperiencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalExperiences to fetch.
     */
    orderBy?: ProfessionalExperiencesOrderByWithRelationInput | ProfessionalExperiencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfessionalExperiences.
     */
    cursor?: ProfessionalExperiencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalExperiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalExperiences.
     */
    skip?: number
    distinct?: ProfessionalExperiencesScalarFieldEnum | ProfessionalExperiencesScalarFieldEnum[]
  }


  /**
   * ProfessionalExperiences create
   */
  export type ProfessionalExperiencesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiences
     */
    select?: ProfessionalExperiencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfessionalExperiences.
     */
    data: XOR<ProfessionalExperiencesCreateInput, ProfessionalExperiencesUncheckedCreateInput>
  }


  /**
   * ProfessionalExperiences createMany
   */
  export type ProfessionalExperiencesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfessionalExperiences.
     */
    data: ProfessionalExperiencesCreateManyInput | ProfessionalExperiencesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProfessionalExperiences update
   */
  export type ProfessionalExperiencesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiences
     */
    select?: ProfessionalExperiencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfessionalExperiences.
     */
    data: XOR<ProfessionalExperiencesUpdateInput, ProfessionalExperiencesUncheckedUpdateInput>
    /**
     * Choose, which ProfessionalExperiences to update.
     */
    where: ProfessionalExperiencesWhereUniqueInput
  }


  /**
   * ProfessionalExperiences updateMany
   */
  export type ProfessionalExperiencesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfessionalExperiences.
     */
    data: XOR<ProfessionalExperiencesUpdateManyMutationInput, ProfessionalExperiencesUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionalExperiences to update
     */
    where?: ProfessionalExperiencesWhereInput
  }


  /**
   * ProfessionalExperiences upsert
   */
  export type ProfessionalExperiencesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiences
     */
    select?: ProfessionalExperiencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfessionalExperiences to update in case it exists.
     */
    where: ProfessionalExperiencesWhereUniqueInput
    /**
     * In case the ProfessionalExperiences found by the `where` argument doesn't exist, create a new ProfessionalExperiences with this data.
     */
    create: XOR<ProfessionalExperiencesCreateInput, ProfessionalExperiencesUncheckedCreateInput>
    /**
     * In case the ProfessionalExperiences was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionalExperiencesUpdateInput, ProfessionalExperiencesUncheckedUpdateInput>
  }


  /**
   * ProfessionalExperiences delete
   */
  export type ProfessionalExperiencesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiences
     */
    select?: ProfessionalExperiencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesInclude<ExtArgs> | null
    /**
     * Filter which ProfessionalExperiences to delete.
     */
    where: ProfessionalExperiencesWhereUniqueInput
  }


  /**
   * ProfessionalExperiences deleteMany
   */
  export type ProfessionalExperiencesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalExperiences to delete
     */
    where?: ProfessionalExperiencesWhereInput
  }


  /**
   * ProfessionalExperiences.ProfessionalExperiencesDescription
   */
  export type ProfessionalExperiences$ProfessionalExperiencesDescriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesDescription
     */
    select?: ProfessionalExperiencesDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesDescriptionInclude<ExtArgs> | null
    where?: ProfessionalExperiencesDescriptionWhereInput
    orderBy?: ProfessionalExperiencesDescriptionOrderByWithRelationInput | ProfessionalExperiencesDescriptionOrderByWithRelationInput[]
    cursor?: ProfessionalExperiencesDescriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionalExperiencesDescriptionScalarFieldEnum | ProfessionalExperiencesDescriptionScalarFieldEnum[]
  }


  /**
   * ProfessionalExperiences without action
   */
  export type ProfessionalExperiencesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiences
     */
    select?: ProfessionalExperiencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesInclude<ExtArgs> | null
  }



  /**
   * Model ProfessionalExperiencesDescription
   */

  export type AggregateProfessionalExperiencesDescription = {
    _count: ProfessionalExperiencesDescriptionCountAggregateOutputType | null
    _min: ProfessionalExperiencesDescriptionMinAggregateOutputType | null
    _max: ProfessionalExperiencesDescriptionMaxAggregateOutputType | null
  }

  export type ProfessionalExperiencesDescriptionMinAggregateOutputType = {
    id: string | null
    description: string | null
    professional_experiences_id: string | null
    user_id: string | null
  }

  export type ProfessionalExperiencesDescriptionMaxAggregateOutputType = {
    id: string | null
    description: string | null
    professional_experiences_id: string | null
    user_id: string | null
  }

  export type ProfessionalExperiencesDescriptionCountAggregateOutputType = {
    id: number
    description: number
    professional_experiences_id: number
    user_id: number
    _all: number
  }


  export type ProfessionalExperiencesDescriptionMinAggregateInputType = {
    id?: true
    description?: true
    professional_experiences_id?: true
    user_id?: true
  }

  export type ProfessionalExperiencesDescriptionMaxAggregateInputType = {
    id?: true
    description?: true
    professional_experiences_id?: true
    user_id?: true
  }

  export type ProfessionalExperiencesDescriptionCountAggregateInputType = {
    id?: true
    description?: true
    professional_experiences_id?: true
    user_id?: true
    _all?: true
  }

  export type ProfessionalExperiencesDescriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalExperiencesDescription to aggregate.
     */
    where?: ProfessionalExperiencesDescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalExperiencesDescriptions to fetch.
     */
    orderBy?: ProfessionalExperiencesDescriptionOrderByWithRelationInput | ProfessionalExperiencesDescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionalExperiencesDescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalExperiencesDescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalExperiencesDescriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfessionalExperiencesDescriptions
    **/
    _count?: true | ProfessionalExperiencesDescriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionalExperiencesDescriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionalExperiencesDescriptionMaxAggregateInputType
  }

  export type GetProfessionalExperiencesDescriptionAggregateType<T extends ProfessionalExperiencesDescriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessionalExperiencesDescription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessionalExperiencesDescription[P]>
      : GetScalarType<T[P], AggregateProfessionalExperiencesDescription[P]>
  }




  export type ProfessionalExperiencesDescriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalExperiencesDescriptionWhereInput
    orderBy?: ProfessionalExperiencesDescriptionOrderByWithAggregationInput | ProfessionalExperiencesDescriptionOrderByWithAggregationInput[]
    by: ProfessionalExperiencesDescriptionScalarFieldEnum[] | ProfessionalExperiencesDescriptionScalarFieldEnum
    having?: ProfessionalExperiencesDescriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionalExperiencesDescriptionCountAggregateInputType | true
    _min?: ProfessionalExperiencesDescriptionMinAggregateInputType
    _max?: ProfessionalExperiencesDescriptionMaxAggregateInputType
  }

  export type ProfessionalExperiencesDescriptionGroupByOutputType = {
    id: string
    description: string
    professional_experiences_id: string
    user_id: string
    _count: ProfessionalExperiencesDescriptionCountAggregateOutputType | null
    _min: ProfessionalExperiencesDescriptionMinAggregateOutputType | null
    _max: ProfessionalExperiencesDescriptionMaxAggregateOutputType | null
  }

  type GetProfessionalExperiencesDescriptionGroupByPayload<T extends ProfessionalExperiencesDescriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionalExperiencesDescriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionalExperiencesDescriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionalExperiencesDescriptionGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionalExperiencesDescriptionGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionalExperiencesDescriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    professional_experiences_id?: boolean
    user_id?: boolean
    professional_experiences?: boolean | ProfessionalExperiencesDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalExperiencesDescription"]>

  export type ProfessionalExperiencesDescriptionSelectScalar = {
    id?: boolean
    description?: boolean
    professional_experiences_id?: boolean
    user_id?: boolean
  }

  export type ProfessionalExperiencesDescriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professional_experiences?: boolean | ProfessionalExperiencesDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $ProfessionalExperiencesDescriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfessionalExperiencesDescription"
    objects: {
      professional_experiences: Prisma.$ProfessionalExperiencesPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string
      professional_experiences_id: string
      user_id: string
    }, ExtArgs["result"]["professionalExperiencesDescription"]>
    composites: {}
  }


  type ProfessionalExperiencesDescriptionGetPayload<S extends boolean | null | undefined | ProfessionalExperiencesDescriptionDefaultArgs> = $Result.GetResult<Prisma.$ProfessionalExperiencesDescriptionPayload, S>

  type ProfessionalExperiencesDescriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfessionalExperiencesDescriptionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProfessionalExperiencesDescriptionCountAggregateInputType | true
    }

  export interface ProfessionalExperiencesDescriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfessionalExperiencesDescription'], meta: { name: 'ProfessionalExperiencesDescription' } }
    /**
     * Find zero or one ProfessionalExperiencesDescription that matches the filter.
     * @param {ProfessionalExperiencesDescriptionFindUniqueArgs} args - Arguments to find a ProfessionalExperiencesDescription
     * @example
     * // Get one ProfessionalExperiencesDescription
     * const professionalExperiencesDescription = await prisma.professionalExperiencesDescription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfessionalExperiencesDescriptionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessionalExperiencesDescriptionFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesDescriptionClient<$Result.GetResult<Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProfessionalExperiencesDescription that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfessionalExperiencesDescriptionFindUniqueOrThrowArgs} args - Arguments to find a ProfessionalExperiencesDescription
     * @example
     * // Get one ProfessionalExperiencesDescription
     * const professionalExperiencesDescription = await prisma.professionalExperiencesDescription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfessionalExperiencesDescriptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessionalExperiencesDescriptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesDescriptionClient<$Result.GetResult<Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProfessionalExperiencesDescription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesDescriptionFindFirstArgs} args - Arguments to find a ProfessionalExperiencesDescription
     * @example
     * // Get one ProfessionalExperiencesDescription
     * const professionalExperiencesDescription = await prisma.professionalExperiencesDescription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfessionalExperiencesDescriptionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessionalExperiencesDescriptionFindFirstArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesDescriptionClient<$Result.GetResult<Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProfessionalExperiencesDescription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesDescriptionFindFirstOrThrowArgs} args - Arguments to find a ProfessionalExperiencesDescription
     * @example
     * // Get one ProfessionalExperiencesDescription
     * const professionalExperiencesDescription = await prisma.professionalExperiencesDescription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfessionalExperiencesDescriptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessionalExperiencesDescriptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesDescriptionClient<$Result.GetResult<Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProfessionalExperiencesDescriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesDescriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfessionalExperiencesDescriptions
     * const professionalExperiencesDescriptions = await prisma.professionalExperiencesDescription.findMany()
     * 
     * // Get first 10 ProfessionalExperiencesDescriptions
     * const professionalExperiencesDescriptions = await prisma.professionalExperiencesDescription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionalExperiencesDescriptionWithIdOnly = await prisma.professionalExperiencesDescription.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfessionalExperiencesDescriptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessionalExperiencesDescriptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProfessionalExperiencesDescription.
     * @param {ProfessionalExperiencesDescriptionCreateArgs} args - Arguments to create a ProfessionalExperiencesDescription.
     * @example
     * // Create one ProfessionalExperiencesDescription
     * const ProfessionalExperiencesDescription = await prisma.professionalExperiencesDescription.create({
     *   data: {
     *     // ... data to create a ProfessionalExperiencesDescription
     *   }
     * })
     * 
    **/
    create<T extends ProfessionalExperiencesDescriptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessionalExperiencesDescriptionCreateArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesDescriptionClient<$Result.GetResult<Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProfessionalExperiencesDescriptions.
     *     @param {ProfessionalExperiencesDescriptionCreateManyArgs} args - Arguments to create many ProfessionalExperiencesDescriptions.
     *     @example
     *     // Create many ProfessionalExperiencesDescriptions
     *     const professionalExperiencesDescription = await prisma.professionalExperiencesDescription.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfessionalExperiencesDescriptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessionalExperiencesDescriptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProfessionalExperiencesDescription.
     * @param {ProfessionalExperiencesDescriptionDeleteArgs} args - Arguments to delete one ProfessionalExperiencesDescription.
     * @example
     * // Delete one ProfessionalExperiencesDescription
     * const ProfessionalExperiencesDescription = await prisma.professionalExperiencesDescription.delete({
     *   where: {
     *     // ... filter to delete one ProfessionalExperiencesDescription
     *   }
     * })
     * 
    **/
    delete<T extends ProfessionalExperiencesDescriptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessionalExperiencesDescriptionDeleteArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesDescriptionClient<$Result.GetResult<Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProfessionalExperiencesDescription.
     * @param {ProfessionalExperiencesDescriptionUpdateArgs} args - Arguments to update one ProfessionalExperiencesDescription.
     * @example
     * // Update one ProfessionalExperiencesDescription
     * const professionalExperiencesDescription = await prisma.professionalExperiencesDescription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfessionalExperiencesDescriptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessionalExperiencesDescriptionUpdateArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesDescriptionClient<$Result.GetResult<Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProfessionalExperiencesDescriptions.
     * @param {ProfessionalExperiencesDescriptionDeleteManyArgs} args - Arguments to filter ProfessionalExperiencesDescriptions to delete.
     * @example
     * // Delete a few ProfessionalExperiencesDescriptions
     * const { count } = await prisma.professionalExperiencesDescription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfessionalExperiencesDescriptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessionalExperiencesDescriptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionalExperiencesDescriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesDescriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfessionalExperiencesDescriptions
     * const professionalExperiencesDescription = await prisma.professionalExperiencesDescription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfessionalExperiencesDescriptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessionalExperiencesDescriptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProfessionalExperiencesDescription.
     * @param {ProfessionalExperiencesDescriptionUpsertArgs} args - Arguments to update or create a ProfessionalExperiencesDescription.
     * @example
     * // Update or create a ProfessionalExperiencesDescription
     * const professionalExperiencesDescription = await prisma.professionalExperiencesDescription.upsert({
     *   create: {
     *     // ... data to create a ProfessionalExperiencesDescription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfessionalExperiencesDescription we want to update
     *   }
     * })
    **/
    upsert<T extends ProfessionalExperiencesDescriptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessionalExperiencesDescriptionUpsertArgs<ExtArgs>>
    ): Prisma__ProfessionalExperiencesDescriptionClient<$Result.GetResult<Prisma.$ProfessionalExperiencesDescriptionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProfessionalExperiencesDescriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesDescriptionCountArgs} args - Arguments to filter ProfessionalExperiencesDescriptions to count.
     * @example
     * // Count the number of ProfessionalExperiencesDescriptions
     * const count = await prisma.professionalExperiencesDescription.count({
     *   where: {
     *     // ... the filter for the ProfessionalExperiencesDescriptions we want to count
     *   }
     * })
    **/
    count<T extends ProfessionalExperiencesDescriptionCountArgs>(
      args?: Subset<T, ProfessionalExperiencesDescriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionalExperiencesDescriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfessionalExperiencesDescription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesDescriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionalExperiencesDescriptionAggregateArgs>(args: Subset<T, ProfessionalExperiencesDescriptionAggregateArgs>): Prisma.PrismaPromise<GetProfessionalExperiencesDescriptionAggregateType<T>>

    /**
     * Group by ProfessionalExperiencesDescription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalExperiencesDescriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionalExperiencesDescriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionalExperiencesDescriptionGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionalExperiencesDescriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionalExperiencesDescriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionalExperiencesDescriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfessionalExperiencesDescription model
   */
  readonly fields: ProfessionalExperiencesDescriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfessionalExperiencesDescription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionalExperiencesDescriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    professional_experiences<T extends ProfessionalExperiencesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessionalExperiencesDefaultArgs<ExtArgs>>): Prisma__ProfessionalExperiencesClient<$Result.GetResult<Prisma.$ProfessionalExperiencesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProfessionalExperiencesDescription model
   */ 
  interface ProfessionalExperiencesDescriptionFieldRefs {
    readonly id: FieldRef<"ProfessionalExperiencesDescription", 'String'>
    readonly description: FieldRef<"ProfessionalExperiencesDescription", 'String'>
    readonly professional_experiences_id: FieldRef<"ProfessionalExperiencesDescription", 'String'>
    readonly user_id: FieldRef<"ProfessionalExperiencesDescription", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ProfessionalExperiencesDescription findUnique
   */
  export type ProfessionalExperiencesDescriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesDescription
     */
    select?: ProfessionalExperiencesDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesDescriptionInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalExperiencesDescription to fetch.
     */
    where: ProfessionalExperiencesDescriptionWhereUniqueInput
  }


  /**
   * ProfessionalExperiencesDescription findUniqueOrThrow
   */
  export type ProfessionalExperiencesDescriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesDescription
     */
    select?: ProfessionalExperiencesDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesDescriptionInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalExperiencesDescription to fetch.
     */
    where: ProfessionalExperiencesDescriptionWhereUniqueInput
  }


  /**
   * ProfessionalExperiencesDescription findFirst
   */
  export type ProfessionalExperiencesDescriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesDescription
     */
    select?: ProfessionalExperiencesDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesDescriptionInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalExperiencesDescription to fetch.
     */
    where?: ProfessionalExperiencesDescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalExperiencesDescriptions to fetch.
     */
    orderBy?: ProfessionalExperiencesDescriptionOrderByWithRelationInput | ProfessionalExperiencesDescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalExperiencesDescriptions.
     */
    cursor?: ProfessionalExperiencesDescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalExperiencesDescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalExperiencesDescriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalExperiencesDescriptions.
     */
    distinct?: ProfessionalExperiencesDescriptionScalarFieldEnum | ProfessionalExperiencesDescriptionScalarFieldEnum[]
  }


  /**
   * ProfessionalExperiencesDescription findFirstOrThrow
   */
  export type ProfessionalExperiencesDescriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesDescription
     */
    select?: ProfessionalExperiencesDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesDescriptionInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalExperiencesDescription to fetch.
     */
    where?: ProfessionalExperiencesDescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalExperiencesDescriptions to fetch.
     */
    orderBy?: ProfessionalExperiencesDescriptionOrderByWithRelationInput | ProfessionalExperiencesDescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalExperiencesDescriptions.
     */
    cursor?: ProfessionalExperiencesDescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalExperiencesDescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalExperiencesDescriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalExperiencesDescriptions.
     */
    distinct?: ProfessionalExperiencesDescriptionScalarFieldEnum | ProfessionalExperiencesDescriptionScalarFieldEnum[]
  }


  /**
   * ProfessionalExperiencesDescription findMany
   */
  export type ProfessionalExperiencesDescriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesDescription
     */
    select?: ProfessionalExperiencesDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesDescriptionInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalExperiencesDescriptions to fetch.
     */
    where?: ProfessionalExperiencesDescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalExperiencesDescriptions to fetch.
     */
    orderBy?: ProfessionalExperiencesDescriptionOrderByWithRelationInput | ProfessionalExperiencesDescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfessionalExperiencesDescriptions.
     */
    cursor?: ProfessionalExperiencesDescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalExperiencesDescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalExperiencesDescriptions.
     */
    skip?: number
    distinct?: ProfessionalExperiencesDescriptionScalarFieldEnum | ProfessionalExperiencesDescriptionScalarFieldEnum[]
  }


  /**
   * ProfessionalExperiencesDescription create
   */
  export type ProfessionalExperiencesDescriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesDescription
     */
    select?: ProfessionalExperiencesDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesDescriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfessionalExperiencesDescription.
     */
    data: XOR<ProfessionalExperiencesDescriptionCreateInput, ProfessionalExperiencesDescriptionUncheckedCreateInput>
  }


  /**
   * ProfessionalExperiencesDescription createMany
   */
  export type ProfessionalExperiencesDescriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfessionalExperiencesDescriptions.
     */
    data: ProfessionalExperiencesDescriptionCreateManyInput | ProfessionalExperiencesDescriptionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProfessionalExperiencesDescription update
   */
  export type ProfessionalExperiencesDescriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesDescription
     */
    select?: ProfessionalExperiencesDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesDescriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfessionalExperiencesDescription.
     */
    data: XOR<ProfessionalExperiencesDescriptionUpdateInput, ProfessionalExperiencesDescriptionUncheckedUpdateInput>
    /**
     * Choose, which ProfessionalExperiencesDescription to update.
     */
    where: ProfessionalExperiencesDescriptionWhereUniqueInput
  }


  /**
   * ProfessionalExperiencesDescription updateMany
   */
  export type ProfessionalExperiencesDescriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfessionalExperiencesDescriptions.
     */
    data: XOR<ProfessionalExperiencesDescriptionUpdateManyMutationInput, ProfessionalExperiencesDescriptionUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionalExperiencesDescriptions to update
     */
    where?: ProfessionalExperiencesDescriptionWhereInput
  }


  /**
   * ProfessionalExperiencesDescription upsert
   */
  export type ProfessionalExperiencesDescriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesDescription
     */
    select?: ProfessionalExperiencesDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesDescriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfessionalExperiencesDescription to update in case it exists.
     */
    where: ProfessionalExperiencesDescriptionWhereUniqueInput
    /**
     * In case the ProfessionalExperiencesDescription found by the `where` argument doesn't exist, create a new ProfessionalExperiencesDescription with this data.
     */
    create: XOR<ProfessionalExperiencesDescriptionCreateInput, ProfessionalExperiencesDescriptionUncheckedCreateInput>
    /**
     * In case the ProfessionalExperiencesDescription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionalExperiencesDescriptionUpdateInput, ProfessionalExperiencesDescriptionUncheckedUpdateInput>
  }


  /**
   * ProfessionalExperiencesDescription delete
   */
  export type ProfessionalExperiencesDescriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesDescription
     */
    select?: ProfessionalExperiencesDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesDescriptionInclude<ExtArgs> | null
    /**
     * Filter which ProfessionalExperiencesDescription to delete.
     */
    where: ProfessionalExperiencesDescriptionWhereUniqueInput
  }


  /**
   * ProfessionalExperiencesDescription deleteMany
   */
  export type ProfessionalExperiencesDescriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalExperiencesDescriptions to delete
     */
    where?: ProfessionalExperiencesDescriptionWhereInput
  }


  /**
   * ProfessionalExperiencesDescription without action
   */
  export type ProfessionalExperiencesDescriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalExperiencesDescription
     */
    select?: ProfessionalExperiencesDescriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessionalExperiencesDescriptionInclude<ExtArgs> | null
  }



  /**
   * Model AcademicEducations
   */

  export type AggregateAcademicEducations = {
    _count: AcademicEducationsCountAggregateOutputType | null
    _min: AcademicEducationsMinAggregateOutputType | null
    _max: AcademicEducationsMaxAggregateOutputType | null
  }

  export type AcademicEducationsMinAggregateOutputType = {
    id: string | null
    title: string | null
    university: string | null
    description: string | null
    date_init: Date | null
    date_end: Date | null
    user_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AcademicEducationsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    university: string | null
    description: string | null
    date_init: Date | null
    date_end: Date | null
    user_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AcademicEducationsCountAggregateOutputType = {
    id: number
    title: number
    university: number
    description: number
    date_init: number
    date_end: number
    user_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AcademicEducationsMinAggregateInputType = {
    id?: true
    title?: true
    university?: true
    description?: true
    date_init?: true
    date_end?: true
    user_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AcademicEducationsMaxAggregateInputType = {
    id?: true
    title?: true
    university?: true
    description?: true
    date_init?: true
    date_end?: true
    user_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AcademicEducationsCountAggregateInputType = {
    id?: true
    title?: true
    university?: true
    description?: true
    date_init?: true
    date_end?: true
    user_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AcademicEducationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicEducations to aggregate.
     */
    where?: AcademicEducationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicEducations to fetch.
     */
    orderBy?: AcademicEducationsOrderByWithRelationInput | AcademicEducationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AcademicEducationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicEducations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicEducations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AcademicEducations
    **/
    _count?: true | AcademicEducationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AcademicEducationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AcademicEducationsMaxAggregateInputType
  }

  export type GetAcademicEducationsAggregateType<T extends AcademicEducationsAggregateArgs> = {
        [P in keyof T & keyof AggregateAcademicEducations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcademicEducations[P]>
      : GetScalarType<T[P], AggregateAcademicEducations[P]>
  }




  export type AcademicEducationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicEducationsWhereInput
    orderBy?: AcademicEducationsOrderByWithAggregationInput | AcademicEducationsOrderByWithAggregationInput[]
    by: AcademicEducationsScalarFieldEnum[] | AcademicEducationsScalarFieldEnum
    having?: AcademicEducationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AcademicEducationsCountAggregateInputType | true
    _min?: AcademicEducationsMinAggregateInputType
    _max?: AcademicEducationsMaxAggregateInputType
  }

  export type AcademicEducationsGroupByOutputType = {
    id: string
    title: string
    university: string
    description: string
    date_init: Date
    date_end: Date
    user_id: string
    createdAt: Date
    updatedAt: Date
    _count: AcademicEducationsCountAggregateOutputType | null
    _min: AcademicEducationsMinAggregateOutputType | null
    _max: AcademicEducationsMaxAggregateOutputType | null
  }

  type GetAcademicEducationsGroupByPayload<T extends AcademicEducationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AcademicEducationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AcademicEducationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AcademicEducationsGroupByOutputType[P]>
            : GetScalarType<T[P], AcademicEducationsGroupByOutputType[P]>
        }
      >
    >


  export type AcademicEducationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    university?: boolean
    description?: boolean
    date_init?: boolean
    date_end?: boolean
    user_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["academicEducations"]>

  export type AcademicEducationsSelectScalar = {
    id?: boolean
    title?: boolean
    university?: boolean
    description?: boolean
    date_init?: boolean
    date_end?: boolean
    user_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AcademicEducationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $AcademicEducationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AcademicEducations"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      university: string
      description: string
      date_init: Date
      date_end: Date
      user_id: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["academicEducations"]>
    composites: {}
  }


  type AcademicEducationsGetPayload<S extends boolean | null | undefined | AcademicEducationsDefaultArgs> = $Result.GetResult<Prisma.$AcademicEducationsPayload, S>

  type AcademicEducationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AcademicEducationsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AcademicEducationsCountAggregateInputType | true
    }

  export interface AcademicEducationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AcademicEducations'], meta: { name: 'AcademicEducations' } }
    /**
     * Find zero or one AcademicEducations that matches the filter.
     * @param {AcademicEducationsFindUniqueArgs} args - Arguments to find a AcademicEducations
     * @example
     * // Get one AcademicEducations
     * const academicEducations = await prisma.academicEducations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AcademicEducationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicEducationsFindUniqueArgs<ExtArgs>>
    ): Prisma__AcademicEducationsClient<$Result.GetResult<Prisma.$AcademicEducationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AcademicEducations that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AcademicEducationsFindUniqueOrThrowArgs} args - Arguments to find a AcademicEducations
     * @example
     * // Get one AcademicEducations
     * const academicEducations = await prisma.academicEducations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AcademicEducationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicEducationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AcademicEducationsClient<$Result.GetResult<Prisma.$AcademicEducationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AcademicEducations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEducationsFindFirstArgs} args - Arguments to find a AcademicEducations
     * @example
     * // Get one AcademicEducations
     * const academicEducations = await prisma.academicEducations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AcademicEducationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicEducationsFindFirstArgs<ExtArgs>>
    ): Prisma__AcademicEducationsClient<$Result.GetResult<Prisma.$AcademicEducationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AcademicEducations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEducationsFindFirstOrThrowArgs} args - Arguments to find a AcademicEducations
     * @example
     * // Get one AcademicEducations
     * const academicEducations = await prisma.academicEducations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AcademicEducationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicEducationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AcademicEducationsClient<$Result.GetResult<Prisma.$AcademicEducationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AcademicEducations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEducationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AcademicEducations
     * const academicEducations = await prisma.academicEducations.findMany()
     * 
     * // Get first 10 AcademicEducations
     * const academicEducations = await prisma.academicEducations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const academicEducationsWithIdOnly = await prisma.academicEducations.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AcademicEducationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicEducationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicEducationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AcademicEducations.
     * @param {AcademicEducationsCreateArgs} args - Arguments to create a AcademicEducations.
     * @example
     * // Create one AcademicEducations
     * const AcademicEducations = await prisma.academicEducations.create({
     *   data: {
     *     // ... data to create a AcademicEducations
     *   }
     * })
     * 
    **/
    create<T extends AcademicEducationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicEducationsCreateArgs<ExtArgs>>
    ): Prisma__AcademicEducationsClient<$Result.GetResult<Prisma.$AcademicEducationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AcademicEducations.
     *     @param {AcademicEducationsCreateManyArgs} args - Arguments to create many AcademicEducations.
     *     @example
     *     // Create many AcademicEducations
     *     const academicEducations = await prisma.academicEducations.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AcademicEducationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicEducationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AcademicEducations.
     * @param {AcademicEducationsDeleteArgs} args - Arguments to delete one AcademicEducations.
     * @example
     * // Delete one AcademicEducations
     * const AcademicEducations = await prisma.academicEducations.delete({
     *   where: {
     *     // ... filter to delete one AcademicEducations
     *   }
     * })
     * 
    **/
    delete<T extends AcademicEducationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicEducationsDeleteArgs<ExtArgs>>
    ): Prisma__AcademicEducationsClient<$Result.GetResult<Prisma.$AcademicEducationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AcademicEducations.
     * @param {AcademicEducationsUpdateArgs} args - Arguments to update one AcademicEducations.
     * @example
     * // Update one AcademicEducations
     * const academicEducations = await prisma.academicEducations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AcademicEducationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicEducationsUpdateArgs<ExtArgs>>
    ): Prisma__AcademicEducationsClient<$Result.GetResult<Prisma.$AcademicEducationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AcademicEducations.
     * @param {AcademicEducationsDeleteManyArgs} args - Arguments to filter AcademicEducations to delete.
     * @example
     * // Delete a few AcademicEducations
     * const { count } = await prisma.academicEducations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AcademicEducationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AcademicEducationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AcademicEducations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEducationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AcademicEducations
     * const academicEducations = await prisma.academicEducations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AcademicEducationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicEducationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AcademicEducations.
     * @param {AcademicEducationsUpsertArgs} args - Arguments to update or create a AcademicEducations.
     * @example
     * // Update or create a AcademicEducations
     * const academicEducations = await prisma.academicEducations.upsert({
     *   create: {
     *     // ... data to create a AcademicEducations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AcademicEducations we want to update
     *   }
     * })
    **/
    upsert<T extends AcademicEducationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AcademicEducationsUpsertArgs<ExtArgs>>
    ): Prisma__AcademicEducationsClient<$Result.GetResult<Prisma.$AcademicEducationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AcademicEducations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEducationsCountArgs} args - Arguments to filter AcademicEducations to count.
     * @example
     * // Count the number of AcademicEducations
     * const count = await prisma.academicEducations.count({
     *   where: {
     *     // ... the filter for the AcademicEducations we want to count
     *   }
     * })
    **/
    count<T extends AcademicEducationsCountArgs>(
      args?: Subset<T, AcademicEducationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AcademicEducationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AcademicEducations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEducationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AcademicEducationsAggregateArgs>(args: Subset<T, AcademicEducationsAggregateArgs>): Prisma.PrismaPromise<GetAcademicEducationsAggregateType<T>>

    /**
     * Group by AcademicEducations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEducationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AcademicEducationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AcademicEducationsGroupByArgs['orderBy'] }
        : { orderBy?: AcademicEducationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AcademicEducationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcademicEducationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AcademicEducations model
   */
  readonly fields: AcademicEducationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AcademicEducations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AcademicEducationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AcademicEducations model
   */ 
  interface AcademicEducationsFieldRefs {
    readonly id: FieldRef<"AcademicEducations", 'String'>
    readonly title: FieldRef<"AcademicEducations", 'String'>
    readonly university: FieldRef<"AcademicEducations", 'String'>
    readonly description: FieldRef<"AcademicEducations", 'String'>
    readonly date_init: FieldRef<"AcademicEducations", 'DateTime'>
    readonly date_end: FieldRef<"AcademicEducations", 'DateTime'>
    readonly user_id: FieldRef<"AcademicEducations", 'String'>
    readonly createdAt: FieldRef<"AcademicEducations", 'DateTime'>
    readonly updatedAt: FieldRef<"AcademicEducations", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * AcademicEducations findUnique
   */
  export type AcademicEducationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEducations
     */
    select?: AcademicEducationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicEducationsInclude<ExtArgs> | null
    /**
     * Filter, which AcademicEducations to fetch.
     */
    where: AcademicEducationsWhereUniqueInput
  }


  /**
   * AcademicEducations findUniqueOrThrow
   */
  export type AcademicEducationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEducations
     */
    select?: AcademicEducationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicEducationsInclude<ExtArgs> | null
    /**
     * Filter, which AcademicEducations to fetch.
     */
    where: AcademicEducationsWhereUniqueInput
  }


  /**
   * AcademicEducations findFirst
   */
  export type AcademicEducationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEducations
     */
    select?: AcademicEducationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicEducationsInclude<ExtArgs> | null
    /**
     * Filter, which AcademicEducations to fetch.
     */
    where?: AcademicEducationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicEducations to fetch.
     */
    orderBy?: AcademicEducationsOrderByWithRelationInput | AcademicEducationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicEducations.
     */
    cursor?: AcademicEducationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicEducations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicEducations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicEducations.
     */
    distinct?: AcademicEducationsScalarFieldEnum | AcademicEducationsScalarFieldEnum[]
  }


  /**
   * AcademicEducations findFirstOrThrow
   */
  export type AcademicEducationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEducations
     */
    select?: AcademicEducationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicEducationsInclude<ExtArgs> | null
    /**
     * Filter, which AcademicEducations to fetch.
     */
    where?: AcademicEducationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicEducations to fetch.
     */
    orderBy?: AcademicEducationsOrderByWithRelationInput | AcademicEducationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicEducations.
     */
    cursor?: AcademicEducationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicEducations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicEducations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicEducations.
     */
    distinct?: AcademicEducationsScalarFieldEnum | AcademicEducationsScalarFieldEnum[]
  }


  /**
   * AcademicEducations findMany
   */
  export type AcademicEducationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEducations
     */
    select?: AcademicEducationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicEducationsInclude<ExtArgs> | null
    /**
     * Filter, which AcademicEducations to fetch.
     */
    where?: AcademicEducationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicEducations to fetch.
     */
    orderBy?: AcademicEducationsOrderByWithRelationInput | AcademicEducationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AcademicEducations.
     */
    cursor?: AcademicEducationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicEducations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicEducations.
     */
    skip?: number
    distinct?: AcademicEducationsScalarFieldEnum | AcademicEducationsScalarFieldEnum[]
  }


  /**
   * AcademicEducations create
   */
  export type AcademicEducationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEducations
     */
    select?: AcademicEducationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicEducationsInclude<ExtArgs> | null
    /**
     * The data needed to create a AcademicEducations.
     */
    data: XOR<AcademicEducationsCreateInput, AcademicEducationsUncheckedCreateInput>
  }


  /**
   * AcademicEducations createMany
   */
  export type AcademicEducationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AcademicEducations.
     */
    data: AcademicEducationsCreateManyInput | AcademicEducationsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AcademicEducations update
   */
  export type AcademicEducationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEducations
     */
    select?: AcademicEducationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicEducationsInclude<ExtArgs> | null
    /**
     * The data needed to update a AcademicEducations.
     */
    data: XOR<AcademicEducationsUpdateInput, AcademicEducationsUncheckedUpdateInput>
    /**
     * Choose, which AcademicEducations to update.
     */
    where: AcademicEducationsWhereUniqueInput
  }


  /**
   * AcademicEducations updateMany
   */
  export type AcademicEducationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AcademicEducations.
     */
    data: XOR<AcademicEducationsUpdateManyMutationInput, AcademicEducationsUncheckedUpdateManyInput>
    /**
     * Filter which AcademicEducations to update
     */
    where?: AcademicEducationsWhereInput
  }


  /**
   * AcademicEducations upsert
   */
  export type AcademicEducationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEducations
     */
    select?: AcademicEducationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicEducationsInclude<ExtArgs> | null
    /**
     * The filter to search for the AcademicEducations to update in case it exists.
     */
    where: AcademicEducationsWhereUniqueInput
    /**
     * In case the AcademicEducations found by the `where` argument doesn't exist, create a new AcademicEducations with this data.
     */
    create: XOR<AcademicEducationsCreateInput, AcademicEducationsUncheckedCreateInput>
    /**
     * In case the AcademicEducations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AcademicEducationsUpdateInput, AcademicEducationsUncheckedUpdateInput>
  }


  /**
   * AcademicEducations delete
   */
  export type AcademicEducationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEducations
     */
    select?: AcademicEducationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicEducationsInclude<ExtArgs> | null
    /**
     * Filter which AcademicEducations to delete.
     */
    where: AcademicEducationsWhereUniqueInput
  }


  /**
   * AcademicEducations deleteMany
   */
  export type AcademicEducationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicEducations to delete
     */
    where?: AcademicEducationsWhereInput
  }


  /**
   * AcademicEducations without action
   */
  export type AcademicEducationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEducations
     */
    select?: AcademicEducationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AcademicEducationsInclude<ExtArgs> | null
  }



  /**
   * Model PersonalData
   */

  export type AggregatePersonalData = {
    _count: PersonalDataCountAggregateOutputType | null
    _min: PersonalDataMinAggregateOutputType | null
    _max: PersonalDataMaxAggregateOutputType | null
  }

  export type PersonalDataMinAggregateOutputType = {
    id: string | null
    fullname: string | null
    document: string | null
    avatar_url: string | null
    birthday: Date | null
    profession: string | null
    user_id: string | null
  }

  export type PersonalDataMaxAggregateOutputType = {
    id: string | null
    fullname: string | null
    document: string | null
    avatar_url: string | null
    birthday: Date | null
    profession: string | null
    user_id: string | null
  }

  export type PersonalDataCountAggregateOutputType = {
    id: number
    fullname: number
    document: number
    avatar_url: number
    birthday: number
    profession: number
    user_id: number
    _all: number
  }


  export type PersonalDataMinAggregateInputType = {
    id?: true
    fullname?: true
    document?: true
    avatar_url?: true
    birthday?: true
    profession?: true
    user_id?: true
  }

  export type PersonalDataMaxAggregateInputType = {
    id?: true
    fullname?: true
    document?: true
    avatar_url?: true
    birthday?: true
    profession?: true
    user_id?: true
  }

  export type PersonalDataCountAggregateInputType = {
    id?: true
    fullname?: true
    document?: true
    avatar_url?: true
    birthday?: true
    profession?: true
    user_id?: true
    _all?: true
  }

  export type PersonalDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonalData to aggregate.
     */
    where?: PersonalDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalData to fetch.
     */
    orderBy?: PersonalDataOrderByWithRelationInput | PersonalDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonalDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PersonalData
    **/
    _count?: true | PersonalDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonalDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonalDataMaxAggregateInputType
  }

  export type GetPersonalDataAggregateType<T extends PersonalDataAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonalData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonalData[P]>
      : GetScalarType<T[P], AggregatePersonalData[P]>
  }




  export type PersonalDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonalDataWhereInput
    orderBy?: PersonalDataOrderByWithAggregationInput | PersonalDataOrderByWithAggregationInput[]
    by: PersonalDataScalarFieldEnum[] | PersonalDataScalarFieldEnum
    having?: PersonalDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonalDataCountAggregateInputType | true
    _min?: PersonalDataMinAggregateInputType
    _max?: PersonalDataMaxAggregateInputType
  }

  export type PersonalDataGroupByOutputType = {
    id: string
    fullname: string
    document: string
    avatar_url: string
    birthday: Date
    profession: string | null
    user_id: string
    _count: PersonalDataCountAggregateOutputType | null
    _min: PersonalDataMinAggregateOutputType | null
    _max: PersonalDataMaxAggregateOutputType | null
  }

  type GetPersonalDataGroupByPayload<T extends PersonalDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonalDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonalDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonalDataGroupByOutputType[P]>
            : GetScalarType<T[P], PersonalDataGroupByOutputType[P]>
        }
      >
    >


  export type PersonalDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    document?: boolean
    avatar_url?: boolean
    birthday?: boolean
    profession?: boolean
    user_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personalData"]>

  export type PersonalDataSelectScalar = {
    id?: boolean
    fullname?: boolean
    document?: boolean
    avatar_url?: boolean
    birthday?: boolean
    profession?: boolean
    user_id?: boolean
  }

  export type PersonalDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $PersonalDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PersonalData"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullname: string
      document: string
      avatar_url: string
      birthday: Date
      profession: string | null
      user_id: string
    }, ExtArgs["result"]["personalData"]>
    composites: {}
  }


  type PersonalDataGetPayload<S extends boolean | null | undefined | PersonalDataDefaultArgs> = $Result.GetResult<Prisma.$PersonalDataPayload, S>

  type PersonalDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PersonalDataFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PersonalDataCountAggregateInputType | true
    }

  export interface PersonalDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PersonalData'], meta: { name: 'PersonalData' } }
    /**
     * Find zero or one PersonalData that matches the filter.
     * @param {PersonalDataFindUniqueArgs} args - Arguments to find a PersonalData
     * @example
     * // Get one PersonalData
     * const personalData = await prisma.personalData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PersonalDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PersonalDataFindUniqueArgs<ExtArgs>>
    ): Prisma__PersonalDataClient<$Result.GetResult<Prisma.$PersonalDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PersonalData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PersonalDataFindUniqueOrThrowArgs} args - Arguments to find a PersonalData
     * @example
     * // Get one PersonalData
     * const personalData = await prisma.personalData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PersonalDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonalDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PersonalDataClient<$Result.GetResult<Prisma.$PersonalDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PersonalData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDataFindFirstArgs} args - Arguments to find a PersonalData
     * @example
     * // Get one PersonalData
     * const personalData = await prisma.personalData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PersonalDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonalDataFindFirstArgs<ExtArgs>>
    ): Prisma__PersonalDataClient<$Result.GetResult<Prisma.$PersonalDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PersonalData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDataFindFirstOrThrowArgs} args - Arguments to find a PersonalData
     * @example
     * // Get one PersonalData
     * const personalData = await prisma.personalData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PersonalDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonalDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PersonalDataClient<$Result.GetResult<Prisma.$PersonalDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PersonalData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PersonalData
     * const personalData = await prisma.personalData.findMany()
     * 
     * // Get first 10 PersonalData
     * const personalData = await prisma.personalData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personalDataWithIdOnly = await prisma.personalData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PersonalDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonalDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PersonalData.
     * @param {PersonalDataCreateArgs} args - Arguments to create a PersonalData.
     * @example
     * // Create one PersonalData
     * const PersonalData = await prisma.personalData.create({
     *   data: {
     *     // ... data to create a PersonalData
     *   }
     * })
     * 
    **/
    create<T extends PersonalDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PersonalDataCreateArgs<ExtArgs>>
    ): Prisma__PersonalDataClient<$Result.GetResult<Prisma.$PersonalDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PersonalData.
     *     @param {PersonalDataCreateManyArgs} args - Arguments to create many PersonalData.
     *     @example
     *     // Create many PersonalData
     *     const personalData = await prisma.personalData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PersonalDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonalDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PersonalData.
     * @param {PersonalDataDeleteArgs} args - Arguments to delete one PersonalData.
     * @example
     * // Delete one PersonalData
     * const PersonalData = await prisma.personalData.delete({
     *   where: {
     *     // ... filter to delete one PersonalData
     *   }
     * })
     * 
    **/
    delete<T extends PersonalDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PersonalDataDeleteArgs<ExtArgs>>
    ): Prisma__PersonalDataClient<$Result.GetResult<Prisma.$PersonalDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PersonalData.
     * @param {PersonalDataUpdateArgs} args - Arguments to update one PersonalData.
     * @example
     * // Update one PersonalData
     * const personalData = await prisma.personalData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PersonalDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PersonalDataUpdateArgs<ExtArgs>>
    ): Prisma__PersonalDataClient<$Result.GetResult<Prisma.$PersonalDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PersonalData.
     * @param {PersonalDataDeleteManyArgs} args - Arguments to filter PersonalData to delete.
     * @example
     * // Delete a few PersonalData
     * const { count } = await prisma.personalData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PersonalDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonalDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonalData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PersonalData
     * const personalData = await prisma.personalData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PersonalDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PersonalDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PersonalData.
     * @param {PersonalDataUpsertArgs} args - Arguments to update or create a PersonalData.
     * @example
     * // Update or create a PersonalData
     * const personalData = await prisma.personalData.upsert({
     *   create: {
     *     // ... data to create a PersonalData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PersonalData we want to update
     *   }
     * })
    **/
    upsert<T extends PersonalDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PersonalDataUpsertArgs<ExtArgs>>
    ): Prisma__PersonalDataClient<$Result.GetResult<Prisma.$PersonalDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PersonalData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDataCountArgs} args - Arguments to filter PersonalData to count.
     * @example
     * // Count the number of PersonalData
     * const count = await prisma.personalData.count({
     *   where: {
     *     // ... the filter for the PersonalData we want to count
     *   }
     * })
    **/
    count<T extends PersonalDataCountArgs>(
      args?: Subset<T, PersonalDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonalDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PersonalData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonalDataAggregateArgs>(args: Subset<T, PersonalDataAggregateArgs>): Prisma.PrismaPromise<GetPersonalDataAggregateType<T>>

    /**
     * Group by PersonalData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonalDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonalDataGroupByArgs['orderBy'] }
        : { orderBy?: PersonalDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonalDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonalDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PersonalData model
   */
  readonly fields: PersonalDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PersonalData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonalDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PersonalData model
   */ 
  interface PersonalDataFieldRefs {
    readonly id: FieldRef<"PersonalData", 'String'>
    readonly fullname: FieldRef<"PersonalData", 'String'>
    readonly document: FieldRef<"PersonalData", 'String'>
    readonly avatar_url: FieldRef<"PersonalData", 'String'>
    readonly birthday: FieldRef<"PersonalData", 'DateTime'>
    readonly profession: FieldRef<"PersonalData", 'String'>
    readonly user_id: FieldRef<"PersonalData", 'String'>
  }
    

  // Custom InputTypes

  /**
   * PersonalData findUnique
   */
  export type PersonalDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalData
     */
    select?: PersonalDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonalDataInclude<ExtArgs> | null
    /**
     * Filter, which PersonalData to fetch.
     */
    where: PersonalDataWhereUniqueInput
  }


  /**
   * PersonalData findUniqueOrThrow
   */
  export type PersonalDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalData
     */
    select?: PersonalDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonalDataInclude<ExtArgs> | null
    /**
     * Filter, which PersonalData to fetch.
     */
    where: PersonalDataWhereUniqueInput
  }


  /**
   * PersonalData findFirst
   */
  export type PersonalDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalData
     */
    select?: PersonalDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonalDataInclude<ExtArgs> | null
    /**
     * Filter, which PersonalData to fetch.
     */
    where?: PersonalDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalData to fetch.
     */
    orderBy?: PersonalDataOrderByWithRelationInput | PersonalDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonalData.
     */
    cursor?: PersonalDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonalData.
     */
    distinct?: PersonalDataScalarFieldEnum | PersonalDataScalarFieldEnum[]
  }


  /**
   * PersonalData findFirstOrThrow
   */
  export type PersonalDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalData
     */
    select?: PersonalDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonalDataInclude<ExtArgs> | null
    /**
     * Filter, which PersonalData to fetch.
     */
    where?: PersonalDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalData to fetch.
     */
    orderBy?: PersonalDataOrderByWithRelationInput | PersonalDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonalData.
     */
    cursor?: PersonalDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonalData.
     */
    distinct?: PersonalDataScalarFieldEnum | PersonalDataScalarFieldEnum[]
  }


  /**
   * PersonalData findMany
   */
  export type PersonalDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalData
     */
    select?: PersonalDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonalDataInclude<ExtArgs> | null
    /**
     * Filter, which PersonalData to fetch.
     */
    where?: PersonalDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalData to fetch.
     */
    orderBy?: PersonalDataOrderByWithRelationInput | PersonalDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PersonalData.
     */
    cursor?: PersonalDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalData.
     */
    skip?: number
    distinct?: PersonalDataScalarFieldEnum | PersonalDataScalarFieldEnum[]
  }


  /**
   * PersonalData create
   */
  export type PersonalDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalData
     */
    select?: PersonalDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonalDataInclude<ExtArgs> | null
    /**
     * The data needed to create a PersonalData.
     */
    data: XOR<PersonalDataCreateInput, PersonalDataUncheckedCreateInput>
  }


  /**
   * PersonalData createMany
   */
  export type PersonalDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PersonalData.
     */
    data: PersonalDataCreateManyInput | PersonalDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PersonalData update
   */
  export type PersonalDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalData
     */
    select?: PersonalDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonalDataInclude<ExtArgs> | null
    /**
     * The data needed to update a PersonalData.
     */
    data: XOR<PersonalDataUpdateInput, PersonalDataUncheckedUpdateInput>
    /**
     * Choose, which PersonalData to update.
     */
    where: PersonalDataWhereUniqueInput
  }


  /**
   * PersonalData updateMany
   */
  export type PersonalDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PersonalData.
     */
    data: XOR<PersonalDataUpdateManyMutationInput, PersonalDataUncheckedUpdateManyInput>
    /**
     * Filter which PersonalData to update
     */
    where?: PersonalDataWhereInput
  }


  /**
   * PersonalData upsert
   */
  export type PersonalDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalData
     */
    select?: PersonalDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonalDataInclude<ExtArgs> | null
    /**
     * The filter to search for the PersonalData to update in case it exists.
     */
    where: PersonalDataWhereUniqueInput
    /**
     * In case the PersonalData found by the `where` argument doesn't exist, create a new PersonalData with this data.
     */
    create: XOR<PersonalDataCreateInput, PersonalDataUncheckedCreateInput>
    /**
     * In case the PersonalData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonalDataUpdateInput, PersonalDataUncheckedUpdateInput>
  }


  /**
   * PersonalData delete
   */
  export type PersonalDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalData
     */
    select?: PersonalDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonalDataInclude<ExtArgs> | null
    /**
     * Filter which PersonalData to delete.
     */
    where: PersonalDataWhereUniqueInput
  }


  /**
   * PersonalData deleteMany
   */
  export type PersonalDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonalData to delete
     */
    where?: PersonalDataWhereInput
  }


  /**
   * PersonalData without action
   */
  export type PersonalDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalData
     */
    select?: PersonalDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonalDataInclude<ExtArgs> | null
  }



  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressMinAggregateOutputType = {
    id: string | null
    street: string | null
    number: string | null
    district: string | null
    city: string | null
    state: string | null
    country: string | null
    zipcode: string | null
    user_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressMaxAggregateOutputType = {
    id: string | null
    street: string | null
    number: string | null
    district: string | null
    city: string | null
    state: string | null
    country: string | null
    zipcode: string | null
    user_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    street: number
    number: number
    district: number
    city: number
    state: number
    country: number
    zipcode: number
    user_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AddressMinAggregateInputType = {
    id?: true
    street?: true
    number?: true
    district?: true
    city?: true
    state?: true
    country?: true
    zipcode?: true
    user_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    street?: true
    number?: true
    district?: true
    city?: true
    state?: true
    country?: true
    zipcode?: true
    user_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    street?: true
    number?: true
    district?: true
    city?: true
    state?: true
    country?: true
    zipcode?: true
    user_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: string
    street: string
    number: string
    district: string
    city: string
    state: string
    country: string
    zipcode: string
    user_id: string
    createdAt: Date
    updatedAt: Date
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    street?: boolean
    number?: boolean
    district?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    zipcode?: boolean
    user_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    street?: boolean
    number?: boolean
    district?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    zipcode?: boolean
    user_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      street: string
      number: string
      district: string
      city: string
      state: string
      country: string
      zipcode: string
      user_id: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["address"]>
    composites: {}
  }


  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AddressFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Address that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AddressFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AddressFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends AddressCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressCreateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Addresses.
     *     @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     *     @example
     *     // Create many Addresses
     *     const address = await prisma.address.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AddressCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends AddressDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AddressUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AddressDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AddressUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends AddressUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Address model
   */ 
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'String'>
    readonly street: FieldRef<"Address", 'String'>
    readonly number: FieldRef<"Address", 'String'>
    readonly district: FieldRef<"Address", 'String'>
    readonly city: FieldRef<"Address", 'String'>
    readonly state: FieldRef<"Address", 'String'>
    readonly country: FieldRef<"Address", 'String'>
    readonly zipcode: FieldRef<"Address", 'String'>
    readonly user_id: FieldRef<"Address", 'String'>
    readonly createdAt: FieldRef<"Address", 'DateTime'>
    readonly updatedAt: FieldRef<"Address", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }


  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
  }


  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }


  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
  }


  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    bio: 'bio',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const HabilitiesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    value: 'value',
    user_id: 'user_id'
  };

  export type HabilitiesScalarFieldEnum = (typeof HabilitiesScalarFieldEnum)[keyof typeof HabilitiesScalarFieldEnum]


  export const ContactsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    is_whatsapp: 'is_whatsapp',
    user_id: 'user_id'
  };

  export type ContactsScalarFieldEnum = (typeof ContactsScalarFieldEnum)[keyof typeof ContactsScalarFieldEnum]


  export const SocialMediasScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    url: 'url',
    contacts_id: 'contacts_id'
  };

  export type SocialMediasScalarFieldEnum = (typeof SocialMediasScalarFieldEnum)[keyof typeof SocialMediasScalarFieldEnum]


  export const LanguagesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    stars: 'stars',
    user_id: 'user_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LanguagesScalarFieldEnum = (typeof LanguagesScalarFieldEnum)[keyof typeof LanguagesScalarFieldEnum]


  export const ProfessionalExperiencesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    company: 'company',
    date_init: 'date_init',
    date_end: 'date_end',
    is_actual_job: 'is_actual_job',
    user_id: 'user_id'
  };

  export type ProfessionalExperiencesScalarFieldEnum = (typeof ProfessionalExperiencesScalarFieldEnum)[keyof typeof ProfessionalExperiencesScalarFieldEnum]


  export const ProfessionalExperiencesDescriptionScalarFieldEnum: {
    id: 'id',
    description: 'description',
    professional_experiences_id: 'professional_experiences_id',
    user_id: 'user_id'
  };

  export type ProfessionalExperiencesDescriptionScalarFieldEnum = (typeof ProfessionalExperiencesDescriptionScalarFieldEnum)[keyof typeof ProfessionalExperiencesDescriptionScalarFieldEnum]


  export const AcademicEducationsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    university: 'university',
    description: 'description',
    date_init: 'date_init',
    date_end: 'date_end',
    user_id: 'user_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AcademicEducationsScalarFieldEnum = (typeof AcademicEducationsScalarFieldEnum)[keyof typeof AcademicEducationsScalarFieldEnum]


  export const PersonalDataScalarFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    document: 'document',
    avatar_url: 'avatar_url',
    birthday: 'birthday',
    profession: 'profession',
    user_id: 'user_id'
  };

  export type PersonalDataScalarFieldEnum = (typeof PersonalDataScalarFieldEnum)[keyof typeof PersonalDataScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    street: 'street',
    number: 'number',
    district: 'district',
    city: 'city',
    state: 'state',
    country: 'country',
    zipcode: 'zipcode',
    user_id: 'user_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    Habilities?: HabilitiesListRelationFilter
    Contacts?: ContactsListRelationFilter
    Languages?: LanguagesListRelationFilter
    ProfessionalExperiences?: ProfessionalExperiencesListRelationFilter
    AcademicEducations?: AcademicEducationsListRelationFilter
    PersonalDatas?: PersonalDataListRelationFilter
    Address?: AddressListRelationFilter
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    bio?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    Habilities?: HabilitiesOrderByRelationAggregateInput
    Contacts?: ContactsOrderByRelationAggregateInput
    Languages?: LanguagesOrderByRelationAggregateInput
    ProfessionalExperiences?: ProfessionalExperiencesOrderByRelationAggregateInput
    AcademicEducations?: AcademicEducationsOrderByRelationAggregateInput
    PersonalDatas?: PersonalDataOrderByRelationAggregateInput
    Address?: AddressOrderByRelationAggregateInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    Habilities?: HabilitiesListRelationFilter
    Contacts?: ContactsListRelationFilter
    Languages?: LanguagesListRelationFilter
    ProfessionalExperiences?: ProfessionalExperiencesListRelationFilter
    AcademicEducations?: AcademicEducationsListRelationFilter
    PersonalDatas?: PersonalDataListRelationFilter
    Address?: AddressListRelationFilter
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    bio?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type HabilitiesWhereInput = {
    AND?: HabilitiesWhereInput | HabilitiesWhereInput[]
    OR?: HabilitiesWhereInput[]
    NOT?: HabilitiesWhereInput | HabilitiesWhereInput[]
    id?: StringFilter<"Habilities"> | string
    name?: StringFilter<"Habilities"> | string
    slug?: StringFilter<"Habilities"> | string
    value?: IntFilter<"Habilities"> | number
    user_id?: StringFilter<"Habilities"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type HabilitiesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    value?: SortOrder
    user_id?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type HabilitiesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: HabilitiesWhereInput | HabilitiesWhereInput[]
    OR?: HabilitiesWhereInput[]
    NOT?: HabilitiesWhereInput | HabilitiesWhereInput[]
    name?: StringFilter<"Habilities"> | string
    value?: IntFilter<"Habilities"> | number
    user_id?: StringFilter<"Habilities"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "slug">

  export type HabilitiesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    value?: SortOrder
    user_id?: SortOrder
    _count?: HabilitiesCountOrderByAggregateInput
    _avg?: HabilitiesAvgOrderByAggregateInput
    _max?: HabilitiesMaxOrderByAggregateInput
    _min?: HabilitiesMinOrderByAggregateInput
    _sum?: HabilitiesSumOrderByAggregateInput
  }

  export type HabilitiesScalarWhereWithAggregatesInput = {
    AND?: HabilitiesScalarWhereWithAggregatesInput | HabilitiesScalarWhereWithAggregatesInput[]
    OR?: HabilitiesScalarWhereWithAggregatesInput[]
    NOT?: HabilitiesScalarWhereWithAggregatesInput | HabilitiesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Habilities"> | string
    name?: StringWithAggregatesFilter<"Habilities"> | string
    slug?: StringWithAggregatesFilter<"Habilities"> | string
    value?: IntWithAggregatesFilter<"Habilities"> | number
    user_id?: StringWithAggregatesFilter<"Habilities"> | string
  }

  export type ContactsWhereInput = {
    AND?: ContactsWhereInput | ContactsWhereInput[]
    OR?: ContactsWhereInput[]
    NOT?: ContactsWhereInput | ContactsWhereInput[]
    id?: StringFilter<"Contacts"> | string
    name?: StringFilter<"Contacts"> | string
    phone?: StringFilter<"Contacts"> | string
    is_whatsapp?: BoolFilter<"Contacts"> | boolean
    user_id?: StringFilter<"Contacts"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    SocialMedias?: SocialMediasListRelationFilter
  }

  export type ContactsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    is_whatsapp?: SortOrder
    user_id?: SortOrder
    user?: UserOrderByWithRelationInput
    SocialMedias?: SocialMediasOrderByRelationAggregateInput
  }

  export type ContactsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContactsWhereInput | ContactsWhereInput[]
    OR?: ContactsWhereInput[]
    NOT?: ContactsWhereInput | ContactsWhereInput[]
    name?: StringFilter<"Contacts"> | string
    phone?: StringFilter<"Contacts"> | string
    is_whatsapp?: BoolFilter<"Contacts"> | boolean
    user_id?: StringFilter<"Contacts"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    SocialMedias?: SocialMediasListRelationFilter
  }, "id">

  export type ContactsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    is_whatsapp?: SortOrder
    user_id?: SortOrder
    _count?: ContactsCountOrderByAggregateInput
    _max?: ContactsMaxOrderByAggregateInput
    _min?: ContactsMinOrderByAggregateInput
  }

  export type ContactsScalarWhereWithAggregatesInput = {
    AND?: ContactsScalarWhereWithAggregatesInput | ContactsScalarWhereWithAggregatesInput[]
    OR?: ContactsScalarWhereWithAggregatesInput[]
    NOT?: ContactsScalarWhereWithAggregatesInput | ContactsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contacts"> | string
    name?: StringWithAggregatesFilter<"Contacts"> | string
    phone?: StringWithAggregatesFilter<"Contacts"> | string
    is_whatsapp?: BoolWithAggregatesFilter<"Contacts"> | boolean
    user_id?: StringWithAggregatesFilter<"Contacts"> | string
  }

  export type SocialMediasWhereInput = {
    AND?: SocialMediasWhereInput | SocialMediasWhereInput[]
    OR?: SocialMediasWhereInput[]
    NOT?: SocialMediasWhereInput | SocialMediasWhereInput[]
    id?: StringFilter<"SocialMedias"> | string
    name?: StringFilter<"SocialMedias"> | string
    slug?: StringFilter<"SocialMedias"> | string
    url?: StringFilter<"SocialMedias"> | string
    contacts_id?: StringFilter<"SocialMedias"> | string
    contacts?: XOR<ContactsRelationFilter, ContactsWhereInput>
  }

  export type SocialMediasOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    url?: SortOrder
    contacts_id?: SortOrder
    contacts?: ContactsOrderByWithRelationInput
  }

  export type SocialMediasWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SocialMediasWhereInput | SocialMediasWhereInput[]
    OR?: SocialMediasWhereInput[]
    NOT?: SocialMediasWhereInput | SocialMediasWhereInput[]
    name?: StringFilter<"SocialMedias"> | string
    slug?: StringFilter<"SocialMedias"> | string
    url?: StringFilter<"SocialMedias"> | string
    contacts_id?: StringFilter<"SocialMedias"> | string
    contacts?: XOR<ContactsRelationFilter, ContactsWhereInput>
  }, "id">

  export type SocialMediasOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    url?: SortOrder
    contacts_id?: SortOrder
    _count?: SocialMediasCountOrderByAggregateInput
    _max?: SocialMediasMaxOrderByAggregateInput
    _min?: SocialMediasMinOrderByAggregateInput
  }

  export type SocialMediasScalarWhereWithAggregatesInput = {
    AND?: SocialMediasScalarWhereWithAggregatesInput | SocialMediasScalarWhereWithAggregatesInput[]
    OR?: SocialMediasScalarWhereWithAggregatesInput[]
    NOT?: SocialMediasScalarWhereWithAggregatesInput | SocialMediasScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SocialMedias"> | string
    name?: StringWithAggregatesFilter<"SocialMedias"> | string
    slug?: StringWithAggregatesFilter<"SocialMedias"> | string
    url?: StringWithAggregatesFilter<"SocialMedias"> | string
    contacts_id?: StringWithAggregatesFilter<"SocialMedias"> | string
  }

  export type LanguagesWhereInput = {
    AND?: LanguagesWhereInput | LanguagesWhereInput[]
    OR?: LanguagesWhereInput[]
    NOT?: LanguagesWhereInput | LanguagesWhereInput[]
    id?: StringFilter<"Languages"> | string
    name?: StringFilter<"Languages"> | string
    slug?: StringFilter<"Languages"> | string
    stars?: IntFilter<"Languages"> | number
    user_id?: StringFilter<"Languages"> | string
    createdAt?: DateTimeFilter<"Languages"> | Date | string
    updatedAt?: DateTimeFilter<"Languages"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type LanguagesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    stars?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type LanguagesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LanguagesWhereInput | LanguagesWhereInput[]
    OR?: LanguagesWhereInput[]
    NOT?: LanguagesWhereInput | LanguagesWhereInput[]
    name?: StringFilter<"Languages"> | string
    slug?: StringFilter<"Languages"> | string
    stars?: IntFilter<"Languages"> | number
    user_id?: StringFilter<"Languages"> | string
    createdAt?: DateTimeFilter<"Languages"> | Date | string
    updatedAt?: DateTimeFilter<"Languages"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type LanguagesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    stars?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LanguagesCountOrderByAggregateInput
    _avg?: LanguagesAvgOrderByAggregateInput
    _max?: LanguagesMaxOrderByAggregateInput
    _min?: LanguagesMinOrderByAggregateInput
    _sum?: LanguagesSumOrderByAggregateInput
  }

  export type LanguagesScalarWhereWithAggregatesInput = {
    AND?: LanguagesScalarWhereWithAggregatesInput | LanguagesScalarWhereWithAggregatesInput[]
    OR?: LanguagesScalarWhereWithAggregatesInput[]
    NOT?: LanguagesScalarWhereWithAggregatesInput | LanguagesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Languages"> | string
    name?: StringWithAggregatesFilter<"Languages"> | string
    slug?: StringWithAggregatesFilter<"Languages"> | string
    stars?: IntWithAggregatesFilter<"Languages"> | number
    user_id?: StringWithAggregatesFilter<"Languages"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Languages"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Languages"> | Date | string
  }

  export type ProfessionalExperiencesWhereInput = {
    AND?: ProfessionalExperiencesWhereInput | ProfessionalExperiencesWhereInput[]
    OR?: ProfessionalExperiencesWhereInput[]
    NOT?: ProfessionalExperiencesWhereInput | ProfessionalExperiencesWhereInput[]
    id?: StringFilter<"ProfessionalExperiences"> | string
    title?: StringFilter<"ProfessionalExperiences"> | string
    company?: StringFilter<"ProfessionalExperiences"> | string
    date_init?: DateTimeFilter<"ProfessionalExperiences"> | Date | string
    date_end?: DateTimeNullableFilter<"ProfessionalExperiences"> | Date | string | null
    is_actual_job?: BoolFilter<"ProfessionalExperiences"> | boolean
    user_id?: StringFilter<"ProfessionalExperiences"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionListRelationFilter
  }

  export type ProfessionalExperiencesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    company?: SortOrder
    date_init?: SortOrder
    date_end?: SortOrderInput | SortOrder
    is_actual_job?: SortOrder
    user_id?: SortOrder
    user?: UserOrderByWithRelationInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionOrderByRelationAggregateInput
  }

  export type ProfessionalExperiencesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProfessionalExperiencesWhereInput | ProfessionalExperiencesWhereInput[]
    OR?: ProfessionalExperiencesWhereInput[]
    NOT?: ProfessionalExperiencesWhereInput | ProfessionalExperiencesWhereInput[]
    title?: StringFilter<"ProfessionalExperiences"> | string
    company?: StringFilter<"ProfessionalExperiences"> | string
    date_init?: DateTimeFilter<"ProfessionalExperiences"> | Date | string
    date_end?: DateTimeNullableFilter<"ProfessionalExperiences"> | Date | string | null
    is_actual_job?: BoolFilter<"ProfessionalExperiences"> | boolean
    user_id?: StringFilter<"ProfessionalExperiences"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionListRelationFilter
  }, "id">

  export type ProfessionalExperiencesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    company?: SortOrder
    date_init?: SortOrder
    date_end?: SortOrderInput | SortOrder
    is_actual_job?: SortOrder
    user_id?: SortOrder
    _count?: ProfessionalExperiencesCountOrderByAggregateInput
    _max?: ProfessionalExperiencesMaxOrderByAggregateInput
    _min?: ProfessionalExperiencesMinOrderByAggregateInput
  }

  export type ProfessionalExperiencesScalarWhereWithAggregatesInput = {
    AND?: ProfessionalExperiencesScalarWhereWithAggregatesInput | ProfessionalExperiencesScalarWhereWithAggregatesInput[]
    OR?: ProfessionalExperiencesScalarWhereWithAggregatesInput[]
    NOT?: ProfessionalExperiencesScalarWhereWithAggregatesInput | ProfessionalExperiencesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProfessionalExperiences"> | string
    title?: StringWithAggregatesFilter<"ProfessionalExperiences"> | string
    company?: StringWithAggregatesFilter<"ProfessionalExperiences"> | string
    date_init?: DateTimeWithAggregatesFilter<"ProfessionalExperiences"> | Date | string
    date_end?: DateTimeNullableWithAggregatesFilter<"ProfessionalExperiences"> | Date | string | null
    is_actual_job?: BoolWithAggregatesFilter<"ProfessionalExperiences"> | boolean
    user_id?: StringWithAggregatesFilter<"ProfessionalExperiences"> | string
  }

  export type ProfessionalExperiencesDescriptionWhereInput = {
    AND?: ProfessionalExperiencesDescriptionWhereInput | ProfessionalExperiencesDescriptionWhereInput[]
    OR?: ProfessionalExperiencesDescriptionWhereInput[]
    NOT?: ProfessionalExperiencesDescriptionWhereInput | ProfessionalExperiencesDescriptionWhereInput[]
    id?: StringFilter<"ProfessionalExperiencesDescription"> | string
    description?: StringFilter<"ProfessionalExperiencesDescription"> | string
    professional_experiences_id?: StringFilter<"ProfessionalExperiencesDescription"> | string
    user_id?: StringFilter<"ProfessionalExperiencesDescription"> | string
    professional_experiences?: XOR<ProfessionalExperiencesRelationFilter, ProfessionalExperiencesWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProfessionalExperiencesDescriptionOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    professional_experiences_id?: SortOrder
    user_id?: SortOrder
    professional_experiences?: ProfessionalExperiencesOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ProfessionalExperiencesDescriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProfessionalExperiencesDescriptionWhereInput | ProfessionalExperiencesDescriptionWhereInput[]
    OR?: ProfessionalExperiencesDescriptionWhereInput[]
    NOT?: ProfessionalExperiencesDescriptionWhereInput | ProfessionalExperiencesDescriptionWhereInput[]
    description?: StringFilter<"ProfessionalExperiencesDescription"> | string
    professional_experiences_id?: StringFilter<"ProfessionalExperiencesDescription"> | string
    user_id?: StringFilter<"ProfessionalExperiencesDescription"> | string
    professional_experiences?: XOR<ProfessionalExperiencesRelationFilter, ProfessionalExperiencesWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ProfessionalExperiencesDescriptionOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    professional_experiences_id?: SortOrder
    user_id?: SortOrder
    _count?: ProfessionalExperiencesDescriptionCountOrderByAggregateInput
    _max?: ProfessionalExperiencesDescriptionMaxOrderByAggregateInput
    _min?: ProfessionalExperiencesDescriptionMinOrderByAggregateInput
  }

  export type ProfessionalExperiencesDescriptionScalarWhereWithAggregatesInput = {
    AND?: ProfessionalExperiencesDescriptionScalarWhereWithAggregatesInput | ProfessionalExperiencesDescriptionScalarWhereWithAggregatesInput[]
    OR?: ProfessionalExperiencesDescriptionScalarWhereWithAggregatesInput[]
    NOT?: ProfessionalExperiencesDescriptionScalarWhereWithAggregatesInput | ProfessionalExperiencesDescriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProfessionalExperiencesDescription"> | string
    description?: StringWithAggregatesFilter<"ProfessionalExperiencesDescription"> | string
    professional_experiences_id?: StringWithAggregatesFilter<"ProfessionalExperiencesDescription"> | string
    user_id?: StringWithAggregatesFilter<"ProfessionalExperiencesDescription"> | string
  }

  export type AcademicEducationsWhereInput = {
    AND?: AcademicEducationsWhereInput | AcademicEducationsWhereInput[]
    OR?: AcademicEducationsWhereInput[]
    NOT?: AcademicEducationsWhereInput | AcademicEducationsWhereInput[]
    id?: StringFilter<"AcademicEducations"> | string
    title?: StringFilter<"AcademicEducations"> | string
    university?: StringFilter<"AcademicEducations"> | string
    description?: StringFilter<"AcademicEducations"> | string
    date_init?: DateTimeFilter<"AcademicEducations"> | Date | string
    date_end?: DateTimeFilter<"AcademicEducations"> | Date | string
    user_id?: StringFilter<"AcademicEducations"> | string
    createdAt?: DateTimeFilter<"AcademicEducations"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicEducations"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AcademicEducationsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    university?: SortOrder
    description?: SortOrder
    date_init?: SortOrder
    date_end?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AcademicEducationsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AcademicEducationsWhereInput | AcademicEducationsWhereInput[]
    OR?: AcademicEducationsWhereInput[]
    NOT?: AcademicEducationsWhereInput | AcademicEducationsWhereInput[]
    title?: StringFilter<"AcademicEducations"> | string
    university?: StringFilter<"AcademicEducations"> | string
    description?: StringFilter<"AcademicEducations"> | string
    date_init?: DateTimeFilter<"AcademicEducations"> | Date | string
    date_end?: DateTimeFilter<"AcademicEducations"> | Date | string
    user_id?: StringFilter<"AcademicEducations"> | string
    createdAt?: DateTimeFilter<"AcademicEducations"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicEducations"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AcademicEducationsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    university?: SortOrder
    description?: SortOrder
    date_init?: SortOrder
    date_end?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AcademicEducationsCountOrderByAggregateInput
    _max?: AcademicEducationsMaxOrderByAggregateInput
    _min?: AcademicEducationsMinOrderByAggregateInput
  }

  export type AcademicEducationsScalarWhereWithAggregatesInput = {
    AND?: AcademicEducationsScalarWhereWithAggregatesInput | AcademicEducationsScalarWhereWithAggregatesInput[]
    OR?: AcademicEducationsScalarWhereWithAggregatesInput[]
    NOT?: AcademicEducationsScalarWhereWithAggregatesInput | AcademicEducationsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AcademicEducations"> | string
    title?: StringWithAggregatesFilter<"AcademicEducations"> | string
    university?: StringWithAggregatesFilter<"AcademicEducations"> | string
    description?: StringWithAggregatesFilter<"AcademicEducations"> | string
    date_init?: DateTimeWithAggregatesFilter<"AcademicEducations"> | Date | string
    date_end?: DateTimeWithAggregatesFilter<"AcademicEducations"> | Date | string
    user_id?: StringWithAggregatesFilter<"AcademicEducations"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AcademicEducations"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AcademicEducations"> | Date | string
  }

  export type PersonalDataWhereInput = {
    AND?: PersonalDataWhereInput | PersonalDataWhereInput[]
    OR?: PersonalDataWhereInput[]
    NOT?: PersonalDataWhereInput | PersonalDataWhereInput[]
    id?: StringFilter<"PersonalData"> | string
    fullname?: StringFilter<"PersonalData"> | string
    document?: StringFilter<"PersonalData"> | string
    avatar_url?: StringFilter<"PersonalData"> | string
    birthday?: DateTimeFilter<"PersonalData"> | Date | string
    profession?: StringNullableFilter<"PersonalData"> | string | null
    user_id?: StringFilter<"PersonalData"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PersonalDataOrderByWithRelationInput = {
    id?: SortOrder
    fullname?: SortOrder
    document?: SortOrder
    avatar_url?: SortOrder
    birthday?: SortOrder
    profession?: SortOrderInput | SortOrder
    user_id?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PersonalDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PersonalDataWhereInput | PersonalDataWhereInput[]
    OR?: PersonalDataWhereInput[]
    NOT?: PersonalDataWhereInput | PersonalDataWhereInput[]
    fullname?: StringFilter<"PersonalData"> | string
    document?: StringFilter<"PersonalData"> | string
    avatar_url?: StringFilter<"PersonalData"> | string
    birthday?: DateTimeFilter<"PersonalData"> | Date | string
    profession?: StringNullableFilter<"PersonalData"> | string | null
    user_id?: StringFilter<"PersonalData"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PersonalDataOrderByWithAggregationInput = {
    id?: SortOrder
    fullname?: SortOrder
    document?: SortOrder
    avatar_url?: SortOrder
    birthday?: SortOrder
    profession?: SortOrderInput | SortOrder
    user_id?: SortOrder
    _count?: PersonalDataCountOrderByAggregateInput
    _max?: PersonalDataMaxOrderByAggregateInput
    _min?: PersonalDataMinOrderByAggregateInput
  }

  export type PersonalDataScalarWhereWithAggregatesInput = {
    AND?: PersonalDataScalarWhereWithAggregatesInput | PersonalDataScalarWhereWithAggregatesInput[]
    OR?: PersonalDataScalarWhereWithAggregatesInput[]
    NOT?: PersonalDataScalarWhereWithAggregatesInput | PersonalDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PersonalData"> | string
    fullname?: StringWithAggregatesFilter<"PersonalData"> | string
    document?: StringWithAggregatesFilter<"PersonalData"> | string
    avatar_url?: StringWithAggregatesFilter<"PersonalData"> | string
    birthday?: DateTimeWithAggregatesFilter<"PersonalData"> | Date | string
    profession?: StringNullableWithAggregatesFilter<"PersonalData"> | string | null
    user_id?: StringWithAggregatesFilter<"PersonalData"> | string
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: StringFilter<"Address"> | string
    street?: StringFilter<"Address"> | string
    number?: StringFilter<"Address"> | string
    district?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    state?: StringFilter<"Address"> | string
    country?: StringFilter<"Address"> | string
    zipcode?: StringFilter<"Address"> | string
    user_id?: StringFilter<"Address"> | string
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zipcode?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    street?: StringFilter<"Address"> | string
    number?: StringFilter<"Address"> | string
    district?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    state?: StringFilter<"Address"> | string
    country?: StringFilter<"Address"> | string
    zipcode?: StringFilter<"Address"> | string
    user_id?: StringFilter<"Address"> | string
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zipcode?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Address"> | string
    street?: StringWithAggregatesFilter<"Address"> | string
    number?: StringWithAggregatesFilter<"Address"> | string
    district?: StringWithAggregatesFilter<"Address"> | string
    city?: StringWithAggregatesFilter<"Address"> | string
    state?: StringWithAggregatesFilter<"Address"> | string
    country?: StringWithAggregatesFilter<"Address"> | string
    zipcode?: StringWithAggregatesFilter<"Address"> | string
    user_id?: StringWithAggregatesFilter<"Address"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesCreateNestedManyWithoutUserInput
    Contacts?: ContactsCreateNestedManyWithoutUserInput
    Languages?: LanguagesCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataCreateNestedManyWithoutUserInput
    Address?: AddressCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesUncheckedCreateNestedManyWithoutUserInput
    Contacts?: ContactsUncheckedCreateNestedManyWithoutUserInput
    Languages?: LanguagesUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsUncheckedCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataUncheckedCreateNestedManyWithoutUserInput
    Address?: AddressUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUpdateManyWithoutUserNestedInput
    Address?: AddressUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUncheckedUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUncheckedUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUncheckedUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUncheckedUpdateManyWithoutUserNestedInput
    Address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HabilitiesCreateInput = {
    id?: string
    name: string
    slug: string
    value?: number
    user: UserCreateNestedOneWithoutHabilitiesInput
  }

  export type HabilitiesUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    value?: number
    user_id: string
  }

  export type HabilitiesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutHabilitiesNestedInput
  }

  export type HabilitiesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type HabilitiesCreateManyInput = {
    id?: string
    name: string
    slug: string
    value?: number
    user_id: string
  }

  export type HabilitiesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type HabilitiesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type ContactsCreateInput = {
    id?: string
    name: string
    phone: string
    is_whatsapp: boolean
    user: UserCreateNestedOneWithoutContactsInput
    SocialMedias?: SocialMediasCreateNestedManyWithoutContactsInput
  }

  export type ContactsUncheckedCreateInput = {
    id?: string
    name: string
    phone: string
    is_whatsapp: boolean
    user_id: string
    SocialMedias?: SocialMediasUncheckedCreateNestedManyWithoutContactsInput
  }

  export type ContactsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    is_whatsapp?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutContactsNestedInput
    SocialMedias?: SocialMediasUpdateManyWithoutContactsNestedInput
  }

  export type ContactsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    is_whatsapp?: BoolFieldUpdateOperationsInput | boolean
    user_id?: StringFieldUpdateOperationsInput | string
    SocialMedias?: SocialMediasUncheckedUpdateManyWithoutContactsNestedInput
  }

  export type ContactsCreateManyInput = {
    id?: string
    name: string
    phone: string
    is_whatsapp: boolean
    user_id: string
  }

  export type ContactsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    is_whatsapp?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    is_whatsapp?: BoolFieldUpdateOperationsInput | boolean
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type SocialMediasCreateInput = {
    id?: string
    name: string
    slug: string
    url: string
    contacts: ContactsCreateNestedOneWithoutSocialMediasInput
  }

  export type SocialMediasUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    url: string
    contacts_id: string
  }

  export type SocialMediasUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    contacts?: ContactsUpdateOneRequiredWithoutSocialMediasNestedInput
  }

  export type SocialMediasUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    contacts_id?: StringFieldUpdateOperationsInput | string
  }

  export type SocialMediasCreateManyInput = {
    id?: string
    name: string
    slug: string
    url: string
    contacts_id: string
  }

  export type SocialMediasUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type SocialMediasUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    contacts_id?: StringFieldUpdateOperationsInput | string
  }

  export type LanguagesCreateInput = {
    id?: string
    name: string
    slug: string
    stars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLanguagesInput
  }

  export type LanguagesUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    stars?: number
    user_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguagesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLanguagesNestedInput
  }

  export type LanguagesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguagesCreateManyInput = {
    id?: string
    name: string
    slug: string
    stars?: number
    user_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguagesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguagesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalExperiencesCreateInput = {
    id?: string
    title: string
    company: string
    date_init: Date | string
    date_end?: Date | string | null
    is_actual_job?: boolean
    user: UserCreateNestedOneWithoutProfessionalExperiencesInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionCreateNestedManyWithoutProfessional_experiencesInput
  }

  export type ProfessionalExperiencesUncheckedCreateInput = {
    id?: string
    title: string
    company: string
    date_init: Date | string
    date_end?: Date | string | null
    is_actual_job?: boolean
    user_id: string
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedCreateNestedManyWithoutProfessional_experiencesInput
  }

  export type ProfessionalExperiencesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_actual_job?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutProfessionalExperiencesNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUpdateManyWithoutProfessional_experiencesNestedInput
  }

  export type ProfessionalExperiencesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_actual_job?: BoolFieldUpdateOperationsInput | boolean
    user_id?: StringFieldUpdateOperationsInput | string
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutProfessional_experiencesNestedInput
  }

  export type ProfessionalExperiencesCreateManyInput = {
    id?: string
    title: string
    company: string
    date_init: Date | string
    date_end?: Date | string | null
    is_actual_job?: boolean
    user_id: string
  }

  export type ProfessionalExperiencesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_actual_job?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfessionalExperiencesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_actual_job?: BoolFieldUpdateOperationsInput | boolean
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionalExperiencesDescriptionCreateInput = {
    id?: string
    description: string
    professional_experiences: ProfessionalExperiencesCreateNestedOneWithoutProfessionalExperiencesDescriptionInput
    user: UserCreateNestedOneWithoutProfessionalExperiencesDescriptionInput
  }

  export type ProfessionalExperiencesDescriptionUncheckedCreateInput = {
    id?: string
    description: string
    professional_experiences_id: string
    user_id: string
  }

  export type ProfessionalExperiencesDescriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    professional_experiences?: ProfessionalExperiencesUpdateOneRequiredWithoutProfessionalExperiencesDescriptionNestedInput
    user?: UserUpdateOneRequiredWithoutProfessionalExperiencesDescriptionNestedInput
  }

  export type ProfessionalExperiencesDescriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    professional_experiences_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionalExperiencesDescriptionCreateManyInput = {
    id?: string
    description: string
    professional_experiences_id: string
    user_id: string
  }

  export type ProfessionalExperiencesDescriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionalExperiencesDescriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    professional_experiences_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicEducationsCreateInput = {
    id?: string
    title: string
    university: string
    description: string
    date_init: Date | string
    date_end: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAcademicEducationsInput
  }

  export type AcademicEducationsUncheckedCreateInput = {
    id?: string
    title: string
    university: string
    description: string
    date_init: Date | string
    date_end: Date | string
    user_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicEducationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAcademicEducationsNestedInput
  }

  export type AcademicEducationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicEducationsCreateManyInput = {
    id?: string
    title: string
    university: string
    description: string
    date_init: Date | string
    date_end: Date | string
    user_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicEducationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicEducationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalDataCreateInput = {
    id?: string
    fullname: string
    document: string
    avatar_url?: string
    birthday: Date | string
    profession?: string | null
    user: UserCreateNestedOneWithoutPersonalDatasInput
  }

  export type PersonalDataUncheckedCreateInput = {
    id?: string
    fullname: string
    document: string
    avatar_url?: string
    birthday: Date | string
    profession?: string | null
    user_id: string
  }

  export type PersonalDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPersonalDatasNestedInput
  }

  export type PersonalDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type PersonalDataCreateManyInput = {
    id?: string
    fullname: string
    document: string
    avatar_url?: string
    birthday: Date | string
    profession?: string | null
    user_id: string
  }

  export type PersonalDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonalDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type AddressCreateInput = {
    id?: string
    street: string
    number: string
    district: string
    city: string
    state: string
    country: string
    zipcode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: string
    street: string
    number: string
    district: string
    city: string
    state: string
    country: string
    zipcode: string
    user_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateManyInput = {
    id?: string
    street: string
    number: string
    district: string
    city: string
    state: string
    country: string
    zipcode: string
    user_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type HabilitiesListRelationFilter = {
    every?: HabilitiesWhereInput
    some?: HabilitiesWhereInput
    none?: HabilitiesWhereInput
  }

  export type ContactsListRelationFilter = {
    every?: ContactsWhereInput
    some?: ContactsWhereInput
    none?: ContactsWhereInput
  }

  export type LanguagesListRelationFilter = {
    every?: LanguagesWhereInput
    some?: LanguagesWhereInput
    none?: LanguagesWhereInput
  }

  export type ProfessionalExperiencesListRelationFilter = {
    every?: ProfessionalExperiencesWhereInput
    some?: ProfessionalExperiencesWhereInput
    none?: ProfessionalExperiencesWhereInput
  }

  export type AcademicEducationsListRelationFilter = {
    every?: AcademicEducationsWhereInput
    some?: AcademicEducationsWhereInput
    none?: AcademicEducationsWhereInput
  }

  export type PersonalDataListRelationFilter = {
    every?: PersonalDataWhereInput
    some?: PersonalDataWhereInput
    none?: PersonalDataWhereInput
  }

  export type AddressListRelationFilter = {
    every?: AddressWhereInput
    some?: AddressWhereInput
    none?: AddressWhereInput
  }

  export type ProfessionalExperiencesDescriptionListRelationFilter = {
    every?: ProfessionalExperiencesDescriptionWhereInput
    some?: ProfessionalExperiencesDescriptionWhereInput
    none?: ProfessionalExperiencesDescriptionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HabilitiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LanguagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessionalExperiencesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AcademicEducationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonalDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessionalExperiencesDescriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    password?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HabilitiesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    value?: SortOrder
    user_id?: SortOrder
  }

  export type HabilitiesAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type HabilitiesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    value?: SortOrder
    user_id?: SortOrder
  }

  export type HabilitiesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    value?: SortOrder
    user_id?: SortOrder
  }

  export type HabilitiesSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SocialMediasListRelationFilter = {
    every?: SocialMediasWhereInput
    some?: SocialMediasWhereInput
    none?: SocialMediasWhereInput
  }

  export type SocialMediasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    is_whatsapp?: SortOrder
    user_id?: SortOrder
  }

  export type ContactsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    is_whatsapp?: SortOrder
    user_id?: SortOrder
  }

  export type ContactsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    is_whatsapp?: SortOrder
    user_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ContactsRelationFilter = {
    is?: ContactsWhereInput
    isNot?: ContactsWhereInput
  }

  export type SocialMediasCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    url?: SortOrder
    contacts_id?: SortOrder
  }

  export type SocialMediasMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    url?: SortOrder
    contacts_id?: SortOrder
  }

  export type SocialMediasMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    url?: SortOrder
    contacts_id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type LanguagesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    stars?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LanguagesAvgOrderByAggregateInput = {
    stars?: SortOrder
  }

  export type LanguagesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    stars?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LanguagesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    stars?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LanguagesSumOrderByAggregateInput = {
    stars?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ProfessionalExperiencesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    company?: SortOrder
    date_init?: SortOrder
    date_end?: SortOrder
    is_actual_job?: SortOrder
    user_id?: SortOrder
  }

  export type ProfessionalExperiencesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    company?: SortOrder
    date_init?: SortOrder
    date_end?: SortOrder
    is_actual_job?: SortOrder
    user_id?: SortOrder
  }

  export type ProfessionalExperiencesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    company?: SortOrder
    date_init?: SortOrder
    date_end?: SortOrder
    is_actual_job?: SortOrder
    user_id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProfessionalExperiencesRelationFilter = {
    is?: ProfessionalExperiencesWhereInput
    isNot?: ProfessionalExperiencesWhereInput
  }

  export type ProfessionalExperiencesDescriptionCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    professional_experiences_id?: SortOrder
    user_id?: SortOrder
  }

  export type ProfessionalExperiencesDescriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    professional_experiences_id?: SortOrder
    user_id?: SortOrder
  }

  export type ProfessionalExperiencesDescriptionMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    professional_experiences_id?: SortOrder
    user_id?: SortOrder
  }

  export type AcademicEducationsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    university?: SortOrder
    description?: SortOrder
    date_init?: SortOrder
    date_end?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicEducationsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    university?: SortOrder
    description?: SortOrder
    date_init?: SortOrder
    date_end?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicEducationsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    university?: SortOrder
    description?: SortOrder
    date_init?: SortOrder
    date_end?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PersonalDataCountOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    document?: SortOrder
    avatar_url?: SortOrder
    birthday?: SortOrder
    profession?: SortOrder
    user_id?: SortOrder
  }

  export type PersonalDataMaxOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    document?: SortOrder
    avatar_url?: SortOrder
    birthday?: SortOrder
    profession?: SortOrder
    user_id?: SortOrder
  }

  export type PersonalDataMinOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    document?: SortOrder
    avatar_url?: SortOrder
    birthday?: SortOrder
    profession?: SortOrder
    user_id?: SortOrder
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zipcode?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zipcode?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zipcode?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HabilitiesCreateNestedManyWithoutUserInput = {
    create?: XOR<HabilitiesCreateWithoutUserInput, HabilitiesUncheckedCreateWithoutUserInput> | HabilitiesCreateWithoutUserInput[] | HabilitiesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HabilitiesCreateOrConnectWithoutUserInput | HabilitiesCreateOrConnectWithoutUserInput[]
    createMany?: HabilitiesCreateManyUserInputEnvelope
    connect?: HabilitiesWhereUniqueInput | HabilitiesWhereUniqueInput[]
  }

  export type ContactsCreateNestedManyWithoutUserInput = {
    create?: XOR<ContactsCreateWithoutUserInput, ContactsUncheckedCreateWithoutUserInput> | ContactsCreateWithoutUserInput[] | ContactsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactsCreateOrConnectWithoutUserInput | ContactsCreateOrConnectWithoutUserInput[]
    createMany?: ContactsCreateManyUserInputEnvelope
    connect?: ContactsWhereUniqueInput | ContactsWhereUniqueInput[]
  }

  export type LanguagesCreateNestedManyWithoutUserInput = {
    create?: XOR<LanguagesCreateWithoutUserInput, LanguagesUncheckedCreateWithoutUserInput> | LanguagesCreateWithoutUserInput[] | LanguagesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguagesCreateOrConnectWithoutUserInput | LanguagesCreateOrConnectWithoutUserInput[]
    createMany?: LanguagesCreateManyUserInputEnvelope
    connect?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
  }

  export type ProfessionalExperiencesCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfessionalExperiencesCreateWithoutUserInput, ProfessionalExperiencesUncheckedCreateWithoutUserInput> | ProfessionalExperiencesCreateWithoutUserInput[] | ProfessionalExperiencesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfessionalExperiencesCreateOrConnectWithoutUserInput | ProfessionalExperiencesCreateOrConnectWithoutUserInput[]
    createMany?: ProfessionalExperiencesCreateManyUserInputEnvelope
    connect?: ProfessionalExperiencesWhereUniqueInput | ProfessionalExperiencesWhereUniqueInput[]
  }

  export type AcademicEducationsCreateNestedManyWithoutUserInput = {
    create?: XOR<AcademicEducationsCreateWithoutUserInput, AcademicEducationsUncheckedCreateWithoutUserInput> | AcademicEducationsCreateWithoutUserInput[] | AcademicEducationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AcademicEducationsCreateOrConnectWithoutUserInput | AcademicEducationsCreateOrConnectWithoutUserInput[]
    createMany?: AcademicEducationsCreateManyUserInputEnvelope
    connect?: AcademicEducationsWhereUniqueInput | AcademicEducationsWhereUniqueInput[]
  }

  export type PersonalDataCreateNestedManyWithoutUserInput = {
    create?: XOR<PersonalDataCreateWithoutUserInput, PersonalDataUncheckedCreateWithoutUserInput> | PersonalDataCreateWithoutUserInput[] | PersonalDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PersonalDataCreateOrConnectWithoutUserInput | PersonalDataCreateOrConnectWithoutUserInput[]
    createMany?: PersonalDataCreateManyUserInputEnvelope
    connect?: PersonalDataWhereUniqueInput | PersonalDataWhereUniqueInput[]
  }

  export type AddressCreateNestedManyWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type ProfessionalExperiencesDescriptionCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfessionalExperiencesDescriptionCreateWithoutUserInput, ProfessionalExperiencesDescriptionUncheckedCreateWithoutUserInput> | ProfessionalExperiencesDescriptionCreateWithoutUserInput[] | ProfessionalExperiencesDescriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfessionalExperiencesDescriptionCreateOrConnectWithoutUserInput | ProfessionalExperiencesDescriptionCreateOrConnectWithoutUserInput[]
    createMany?: ProfessionalExperiencesDescriptionCreateManyUserInputEnvelope
    connect?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
  }

  export type HabilitiesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HabilitiesCreateWithoutUserInput, HabilitiesUncheckedCreateWithoutUserInput> | HabilitiesCreateWithoutUserInput[] | HabilitiesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HabilitiesCreateOrConnectWithoutUserInput | HabilitiesCreateOrConnectWithoutUserInput[]
    createMany?: HabilitiesCreateManyUserInputEnvelope
    connect?: HabilitiesWhereUniqueInput | HabilitiesWhereUniqueInput[]
  }

  export type ContactsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ContactsCreateWithoutUserInput, ContactsUncheckedCreateWithoutUserInput> | ContactsCreateWithoutUserInput[] | ContactsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactsCreateOrConnectWithoutUserInput | ContactsCreateOrConnectWithoutUserInput[]
    createMany?: ContactsCreateManyUserInputEnvelope
    connect?: ContactsWhereUniqueInput | ContactsWhereUniqueInput[]
  }

  export type LanguagesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LanguagesCreateWithoutUserInput, LanguagesUncheckedCreateWithoutUserInput> | LanguagesCreateWithoutUserInput[] | LanguagesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguagesCreateOrConnectWithoutUserInput | LanguagesCreateOrConnectWithoutUserInput[]
    createMany?: LanguagesCreateManyUserInputEnvelope
    connect?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
  }

  export type ProfessionalExperiencesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfessionalExperiencesCreateWithoutUserInput, ProfessionalExperiencesUncheckedCreateWithoutUserInput> | ProfessionalExperiencesCreateWithoutUserInput[] | ProfessionalExperiencesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfessionalExperiencesCreateOrConnectWithoutUserInput | ProfessionalExperiencesCreateOrConnectWithoutUserInput[]
    createMany?: ProfessionalExperiencesCreateManyUserInputEnvelope
    connect?: ProfessionalExperiencesWhereUniqueInput | ProfessionalExperiencesWhereUniqueInput[]
  }

  export type AcademicEducationsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AcademicEducationsCreateWithoutUserInput, AcademicEducationsUncheckedCreateWithoutUserInput> | AcademicEducationsCreateWithoutUserInput[] | AcademicEducationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AcademicEducationsCreateOrConnectWithoutUserInput | AcademicEducationsCreateOrConnectWithoutUserInput[]
    createMany?: AcademicEducationsCreateManyUserInputEnvelope
    connect?: AcademicEducationsWhereUniqueInput | AcademicEducationsWhereUniqueInput[]
  }

  export type PersonalDataUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PersonalDataCreateWithoutUserInput, PersonalDataUncheckedCreateWithoutUserInput> | PersonalDataCreateWithoutUserInput[] | PersonalDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PersonalDataCreateOrConnectWithoutUserInput | PersonalDataCreateOrConnectWithoutUserInput[]
    createMany?: PersonalDataCreateManyUserInputEnvelope
    connect?: PersonalDataWhereUniqueInput | PersonalDataWhereUniqueInput[]
  }

  export type AddressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type ProfessionalExperiencesDescriptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfessionalExperiencesDescriptionCreateWithoutUserInput, ProfessionalExperiencesDescriptionUncheckedCreateWithoutUserInput> | ProfessionalExperiencesDescriptionCreateWithoutUserInput[] | ProfessionalExperiencesDescriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfessionalExperiencesDescriptionCreateOrConnectWithoutUserInput | ProfessionalExperiencesDescriptionCreateOrConnectWithoutUserInput[]
    createMany?: ProfessionalExperiencesDescriptionCreateManyUserInputEnvelope
    connect?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type HabilitiesUpdateManyWithoutUserNestedInput = {
    create?: XOR<HabilitiesCreateWithoutUserInput, HabilitiesUncheckedCreateWithoutUserInput> | HabilitiesCreateWithoutUserInput[] | HabilitiesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HabilitiesCreateOrConnectWithoutUserInput | HabilitiesCreateOrConnectWithoutUserInput[]
    upsert?: HabilitiesUpsertWithWhereUniqueWithoutUserInput | HabilitiesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HabilitiesCreateManyUserInputEnvelope
    set?: HabilitiesWhereUniqueInput | HabilitiesWhereUniqueInput[]
    disconnect?: HabilitiesWhereUniqueInput | HabilitiesWhereUniqueInput[]
    delete?: HabilitiesWhereUniqueInput | HabilitiesWhereUniqueInput[]
    connect?: HabilitiesWhereUniqueInput | HabilitiesWhereUniqueInput[]
    update?: HabilitiesUpdateWithWhereUniqueWithoutUserInput | HabilitiesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HabilitiesUpdateManyWithWhereWithoutUserInput | HabilitiesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HabilitiesScalarWhereInput | HabilitiesScalarWhereInput[]
  }

  export type ContactsUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContactsCreateWithoutUserInput, ContactsUncheckedCreateWithoutUserInput> | ContactsCreateWithoutUserInput[] | ContactsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactsCreateOrConnectWithoutUserInput | ContactsCreateOrConnectWithoutUserInput[]
    upsert?: ContactsUpsertWithWhereUniqueWithoutUserInput | ContactsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContactsCreateManyUserInputEnvelope
    set?: ContactsWhereUniqueInput | ContactsWhereUniqueInput[]
    disconnect?: ContactsWhereUniqueInput | ContactsWhereUniqueInput[]
    delete?: ContactsWhereUniqueInput | ContactsWhereUniqueInput[]
    connect?: ContactsWhereUniqueInput | ContactsWhereUniqueInput[]
    update?: ContactsUpdateWithWhereUniqueWithoutUserInput | ContactsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContactsUpdateManyWithWhereWithoutUserInput | ContactsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContactsScalarWhereInput | ContactsScalarWhereInput[]
  }

  export type LanguagesUpdateManyWithoutUserNestedInput = {
    create?: XOR<LanguagesCreateWithoutUserInput, LanguagesUncheckedCreateWithoutUserInput> | LanguagesCreateWithoutUserInput[] | LanguagesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguagesCreateOrConnectWithoutUserInput | LanguagesCreateOrConnectWithoutUserInput[]
    upsert?: LanguagesUpsertWithWhereUniqueWithoutUserInput | LanguagesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LanguagesCreateManyUserInputEnvelope
    set?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    disconnect?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    delete?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    connect?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    update?: LanguagesUpdateWithWhereUniqueWithoutUserInput | LanguagesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LanguagesUpdateManyWithWhereWithoutUserInput | LanguagesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LanguagesScalarWhereInput | LanguagesScalarWhereInput[]
  }

  export type ProfessionalExperiencesUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfessionalExperiencesCreateWithoutUserInput, ProfessionalExperiencesUncheckedCreateWithoutUserInput> | ProfessionalExperiencesCreateWithoutUserInput[] | ProfessionalExperiencesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfessionalExperiencesCreateOrConnectWithoutUserInput | ProfessionalExperiencesCreateOrConnectWithoutUserInput[]
    upsert?: ProfessionalExperiencesUpsertWithWhereUniqueWithoutUserInput | ProfessionalExperiencesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfessionalExperiencesCreateManyUserInputEnvelope
    set?: ProfessionalExperiencesWhereUniqueInput | ProfessionalExperiencesWhereUniqueInput[]
    disconnect?: ProfessionalExperiencesWhereUniqueInput | ProfessionalExperiencesWhereUniqueInput[]
    delete?: ProfessionalExperiencesWhereUniqueInput | ProfessionalExperiencesWhereUniqueInput[]
    connect?: ProfessionalExperiencesWhereUniqueInput | ProfessionalExperiencesWhereUniqueInput[]
    update?: ProfessionalExperiencesUpdateWithWhereUniqueWithoutUserInput | ProfessionalExperiencesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfessionalExperiencesUpdateManyWithWhereWithoutUserInput | ProfessionalExperiencesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfessionalExperiencesScalarWhereInput | ProfessionalExperiencesScalarWhereInput[]
  }

  export type AcademicEducationsUpdateManyWithoutUserNestedInput = {
    create?: XOR<AcademicEducationsCreateWithoutUserInput, AcademicEducationsUncheckedCreateWithoutUserInput> | AcademicEducationsCreateWithoutUserInput[] | AcademicEducationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AcademicEducationsCreateOrConnectWithoutUserInput | AcademicEducationsCreateOrConnectWithoutUserInput[]
    upsert?: AcademicEducationsUpsertWithWhereUniqueWithoutUserInput | AcademicEducationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AcademicEducationsCreateManyUserInputEnvelope
    set?: AcademicEducationsWhereUniqueInput | AcademicEducationsWhereUniqueInput[]
    disconnect?: AcademicEducationsWhereUniqueInput | AcademicEducationsWhereUniqueInput[]
    delete?: AcademicEducationsWhereUniqueInput | AcademicEducationsWhereUniqueInput[]
    connect?: AcademicEducationsWhereUniqueInput | AcademicEducationsWhereUniqueInput[]
    update?: AcademicEducationsUpdateWithWhereUniqueWithoutUserInput | AcademicEducationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AcademicEducationsUpdateManyWithWhereWithoutUserInput | AcademicEducationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AcademicEducationsScalarWhereInput | AcademicEducationsScalarWhereInput[]
  }

  export type PersonalDataUpdateManyWithoutUserNestedInput = {
    create?: XOR<PersonalDataCreateWithoutUserInput, PersonalDataUncheckedCreateWithoutUserInput> | PersonalDataCreateWithoutUserInput[] | PersonalDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PersonalDataCreateOrConnectWithoutUserInput | PersonalDataCreateOrConnectWithoutUserInput[]
    upsert?: PersonalDataUpsertWithWhereUniqueWithoutUserInput | PersonalDataUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PersonalDataCreateManyUserInputEnvelope
    set?: PersonalDataWhereUniqueInput | PersonalDataWhereUniqueInput[]
    disconnect?: PersonalDataWhereUniqueInput | PersonalDataWhereUniqueInput[]
    delete?: PersonalDataWhereUniqueInput | PersonalDataWhereUniqueInput[]
    connect?: PersonalDataWhereUniqueInput | PersonalDataWhereUniqueInput[]
    update?: PersonalDataUpdateWithWhereUniqueWithoutUserInput | PersonalDataUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PersonalDataUpdateManyWithWhereWithoutUserInput | PersonalDataUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PersonalDataScalarWhereInput | PersonalDataScalarWhereInput[]
  }

  export type AddressUpdateManyWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutUserInput | AddressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutUserInput | AddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutUserInput | AddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type ProfessionalExperiencesDescriptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfessionalExperiencesDescriptionCreateWithoutUserInput, ProfessionalExperiencesDescriptionUncheckedCreateWithoutUserInput> | ProfessionalExperiencesDescriptionCreateWithoutUserInput[] | ProfessionalExperiencesDescriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfessionalExperiencesDescriptionCreateOrConnectWithoutUserInput | ProfessionalExperiencesDescriptionCreateOrConnectWithoutUserInput[]
    upsert?: ProfessionalExperiencesDescriptionUpsertWithWhereUniqueWithoutUserInput | ProfessionalExperiencesDescriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfessionalExperiencesDescriptionCreateManyUserInputEnvelope
    set?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    disconnect?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    delete?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    connect?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    update?: ProfessionalExperiencesDescriptionUpdateWithWhereUniqueWithoutUserInput | ProfessionalExperiencesDescriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfessionalExperiencesDescriptionUpdateManyWithWhereWithoutUserInput | ProfessionalExperiencesDescriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfessionalExperiencesDescriptionScalarWhereInput | ProfessionalExperiencesDescriptionScalarWhereInput[]
  }

  export type HabilitiesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HabilitiesCreateWithoutUserInput, HabilitiesUncheckedCreateWithoutUserInput> | HabilitiesCreateWithoutUserInput[] | HabilitiesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HabilitiesCreateOrConnectWithoutUserInput | HabilitiesCreateOrConnectWithoutUserInput[]
    upsert?: HabilitiesUpsertWithWhereUniqueWithoutUserInput | HabilitiesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HabilitiesCreateManyUserInputEnvelope
    set?: HabilitiesWhereUniqueInput | HabilitiesWhereUniqueInput[]
    disconnect?: HabilitiesWhereUniqueInput | HabilitiesWhereUniqueInput[]
    delete?: HabilitiesWhereUniqueInput | HabilitiesWhereUniqueInput[]
    connect?: HabilitiesWhereUniqueInput | HabilitiesWhereUniqueInput[]
    update?: HabilitiesUpdateWithWhereUniqueWithoutUserInput | HabilitiesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HabilitiesUpdateManyWithWhereWithoutUserInput | HabilitiesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HabilitiesScalarWhereInput | HabilitiesScalarWhereInput[]
  }

  export type ContactsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContactsCreateWithoutUserInput, ContactsUncheckedCreateWithoutUserInput> | ContactsCreateWithoutUserInput[] | ContactsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactsCreateOrConnectWithoutUserInput | ContactsCreateOrConnectWithoutUserInput[]
    upsert?: ContactsUpsertWithWhereUniqueWithoutUserInput | ContactsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContactsCreateManyUserInputEnvelope
    set?: ContactsWhereUniqueInput | ContactsWhereUniqueInput[]
    disconnect?: ContactsWhereUniqueInput | ContactsWhereUniqueInput[]
    delete?: ContactsWhereUniqueInput | ContactsWhereUniqueInput[]
    connect?: ContactsWhereUniqueInput | ContactsWhereUniqueInput[]
    update?: ContactsUpdateWithWhereUniqueWithoutUserInput | ContactsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContactsUpdateManyWithWhereWithoutUserInput | ContactsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContactsScalarWhereInput | ContactsScalarWhereInput[]
  }

  export type LanguagesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LanguagesCreateWithoutUserInput, LanguagesUncheckedCreateWithoutUserInput> | LanguagesCreateWithoutUserInput[] | LanguagesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LanguagesCreateOrConnectWithoutUserInput | LanguagesCreateOrConnectWithoutUserInput[]
    upsert?: LanguagesUpsertWithWhereUniqueWithoutUserInput | LanguagesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LanguagesCreateManyUserInputEnvelope
    set?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    disconnect?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    delete?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    connect?: LanguagesWhereUniqueInput | LanguagesWhereUniqueInput[]
    update?: LanguagesUpdateWithWhereUniqueWithoutUserInput | LanguagesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LanguagesUpdateManyWithWhereWithoutUserInput | LanguagesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LanguagesScalarWhereInput | LanguagesScalarWhereInput[]
  }

  export type ProfessionalExperiencesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfessionalExperiencesCreateWithoutUserInput, ProfessionalExperiencesUncheckedCreateWithoutUserInput> | ProfessionalExperiencesCreateWithoutUserInput[] | ProfessionalExperiencesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfessionalExperiencesCreateOrConnectWithoutUserInput | ProfessionalExperiencesCreateOrConnectWithoutUserInput[]
    upsert?: ProfessionalExperiencesUpsertWithWhereUniqueWithoutUserInput | ProfessionalExperiencesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfessionalExperiencesCreateManyUserInputEnvelope
    set?: ProfessionalExperiencesWhereUniqueInput | ProfessionalExperiencesWhereUniqueInput[]
    disconnect?: ProfessionalExperiencesWhereUniqueInput | ProfessionalExperiencesWhereUniqueInput[]
    delete?: ProfessionalExperiencesWhereUniqueInput | ProfessionalExperiencesWhereUniqueInput[]
    connect?: ProfessionalExperiencesWhereUniqueInput | ProfessionalExperiencesWhereUniqueInput[]
    update?: ProfessionalExperiencesUpdateWithWhereUniqueWithoutUserInput | ProfessionalExperiencesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfessionalExperiencesUpdateManyWithWhereWithoutUserInput | ProfessionalExperiencesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfessionalExperiencesScalarWhereInput | ProfessionalExperiencesScalarWhereInput[]
  }

  export type AcademicEducationsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AcademicEducationsCreateWithoutUserInput, AcademicEducationsUncheckedCreateWithoutUserInput> | AcademicEducationsCreateWithoutUserInput[] | AcademicEducationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AcademicEducationsCreateOrConnectWithoutUserInput | AcademicEducationsCreateOrConnectWithoutUserInput[]
    upsert?: AcademicEducationsUpsertWithWhereUniqueWithoutUserInput | AcademicEducationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AcademicEducationsCreateManyUserInputEnvelope
    set?: AcademicEducationsWhereUniqueInput | AcademicEducationsWhereUniqueInput[]
    disconnect?: AcademicEducationsWhereUniqueInput | AcademicEducationsWhereUniqueInput[]
    delete?: AcademicEducationsWhereUniqueInput | AcademicEducationsWhereUniqueInput[]
    connect?: AcademicEducationsWhereUniqueInput | AcademicEducationsWhereUniqueInput[]
    update?: AcademicEducationsUpdateWithWhereUniqueWithoutUserInput | AcademicEducationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AcademicEducationsUpdateManyWithWhereWithoutUserInput | AcademicEducationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AcademicEducationsScalarWhereInput | AcademicEducationsScalarWhereInput[]
  }

  export type PersonalDataUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PersonalDataCreateWithoutUserInput, PersonalDataUncheckedCreateWithoutUserInput> | PersonalDataCreateWithoutUserInput[] | PersonalDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PersonalDataCreateOrConnectWithoutUserInput | PersonalDataCreateOrConnectWithoutUserInput[]
    upsert?: PersonalDataUpsertWithWhereUniqueWithoutUserInput | PersonalDataUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PersonalDataCreateManyUserInputEnvelope
    set?: PersonalDataWhereUniqueInput | PersonalDataWhereUniqueInput[]
    disconnect?: PersonalDataWhereUniqueInput | PersonalDataWhereUniqueInput[]
    delete?: PersonalDataWhereUniqueInput | PersonalDataWhereUniqueInput[]
    connect?: PersonalDataWhereUniqueInput | PersonalDataWhereUniqueInput[]
    update?: PersonalDataUpdateWithWhereUniqueWithoutUserInput | PersonalDataUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PersonalDataUpdateManyWithWhereWithoutUserInput | PersonalDataUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PersonalDataScalarWhereInput | PersonalDataScalarWhereInput[]
  }

  export type AddressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutUserInput | AddressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutUserInput | AddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutUserInput | AddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfessionalExperiencesDescriptionCreateWithoutUserInput, ProfessionalExperiencesDescriptionUncheckedCreateWithoutUserInput> | ProfessionalExperiencesDescriptionCreateWithoutUserInput[] | ProfessionalExperiencesDescriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfessionalExperiencesDescriptionCreateOrConnectWithoutUserInput | ProfessionalExperiencesDescriptionCreateOrConnectWithoutUserInput[]
    upsert?: ProfessionalExperiencesDescriptionUpsertWithWhereUniqueWithoutUserInput | ProfessionalExperiencesDescriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfessionalExperiencesDescriptionCreateManyUserInputEnvelope
    set?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    disconnect?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    delete?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    connect?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    update?: ProfessionalExperiencesDescriptionUpdateWithWhereUniqueWithoutUserInput | ProfessionalExperiencesDescriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfessionalExperiencesDescriptionUpdateManyWithWhereWithoutUserInput | ProfessionalExperiencesDescriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfessionalExperiencesDescriptionScalarWhereInput | ProfessionalExperiencesDescriptionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutHabilitiesInput = {
    create?: XOR<UserCreateWithoutHabilitiesInput, UserUncheckedCreateWithoutHabilitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHabilitiesInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutHabilitiesNestedInput = {
    create?: XOR<UserCreateWithoutHabilitiesInput, UserUncheckedCreateWithoutHabilitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHabilitiesInput
    upsert?: UserUpsertWithoutHabilitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHabilitiesInput, UserUpdateWithoutHabilitiesInput>, UserUncheckedUpdateWithoutHabilitiesInput>
  }

  export type UserCreateNestedOneWithoutContactsInput = {
    create?: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactsInput
    connect?: UserWhereUniqueInput
  }

  export type SocialMediasCreateNestedManyWithoutContactsInput = {
    create?: XOR<SocialMediasCreateWithoutContactsInput, SocialMediasUncheckedCreateWithoutContactsInput> | SocialMediasCreateWithoutContactsInput[] | SocialMediasUncheckedCreateWithoutContactsInput[]
    connectOrCreate?: SocialMediasCreateOrConnectWithoutContactsInput | SocialMediasCreateOrConnectWithoutContactsInput[]
    createMany?: SocialMediasCreateManyContactsInputEnvelope
    connect?: SocialMediasWhereUniqueInput | SocialMediasWhereUniqueInput[]
  }

  export type SocialMediasUncheckedCreateNestedManyWithoutContactsInput = {
    create?: XOR<SocialMediasCreateWithoutContactsInput, SocialMediasUncheckedCreateWithoutContactsInput> | SocialMediasCreateWithoutContactsInput[] | SocialMediasUncheckedCreateWithoutContactsInput[]
    connectOrCreate?: SocialMediasCreateOrConnectWithoutContactsInput | SocialMediasCreateOrConnectWithoutContactsInput[]
    createMany?: SocialMediasCreateManyContactsInputEnvelope
    connect?: SocialMediasWhereUniqueInput | SocialMediasWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactsInput
    upsert?: UserUpsertWithoutContactsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContactsInput, UserUpdateWithoutContactsInput>, UserUncheckedUpdateWithoutContactsInput>
  }

  export type SocialMediasUpdateManyWithoutContactsNestedInput = {
    create?: XOR<SocialMediasCreateWithoutContactsInput, SocialMediasUncheckedCreateWithoutContactsInput> | SocialMediasCreateWithoutContactsInput[] | SocialMediasUncheckedCreateWithoutContactsInput[]
    connectOrCreate?: SocialMediasCreateOrConnectWithoutContactsInput | SocialMediasCreateOrConnectWithoutContactsInput[]
    upsert?: SocialMediasUpsertWithWhereUniqueWithoutContactsInput | SocialMediasUpsertWithWhereUniqueWithoutContactsInput[]
    createMany?: SocialMediasCreateManyContactsInputEnvelope
    set?: SocialMediasWhereUniqueInput | SocialMediasWhereUniqueInput[]
    disconnect?: SocialMediasWhereUniqueInput | SocialMediasWhereUniqueInput[]
    delete?: SocialMediasWhereUniqueInput | SocialMediasWhereUniqueInput[]
    connect?: SocialMediasWhereUniqueInput | SocialMediasWhereUniqueInput[]
    update?: SocialMediasUpdateWithWhereUniqueWithoutContactsInput | SocialMediasUpdateWithWhereUniqueWithoutContactsInput[]
    updateMany?: SocialMediasUpdateManyWithWhereWithoutContactsInput | SocialMediasUpdateManyWithWhereWithoutContactsInput[]
    deleteMany?: SocialMediasScalarWhereInput | SocialMediasScalarWhereInput[]
  }

  export type SocialMediasUncheckedUpdateManyWithoutContactsNestedInput = {
    create?: XOR<SocialMediasCreateWithoutContactsInput, SocialMediasUncheckedCreateWithoutContactsInput> | SocialMediasCreateWithoutContactsInput[] | SocialMediasUncheckedCreateWithoutContactsInput[]
    connectOrCreate?: SocialMediasCreateOrConnectWithoutContactsInput | SocialMediasCreateOrConnectWithoutContactsInput[]
    upsert?: SocialMediasUpsertWithWhereUniqueWithoutContactsInput | SocialMediasUpsertWithWhereUniqueWithoutContactsInput[]
    createMany?: SocialMediasCreateManyContactsInputEnvelope
    set?: SocialMediasWhereUniqueInput | SocialMediasWhereUniqueInput[]
    disconnect?: SocialMediasWhereUniqueInput | SocialMediasWhereUniqueInput[]
    delete?: SocialMediasWhereUniqueInput | SocialMediasWhereUniqueInput[]
    connect?: SocialMediasWhereUniqueInput | SocialMediasWhereUniqueInput[]
    update?: SocialMediasUpdateWithWhereUniqueWithoutContactsInput | SocialMediasUpdateWithWhereUniqueWithoutContactsInput[]
    updateMany?: SocialMediasUpdateManyWithWhereWithoutContactsInput | SocialMediasUpdateManyWithWhereWithoutContactsInput[]
    deleteMany?: SocialMediasScalarWhereInput | SocialMediasScalarWhereInput[]
  }

  export type ContactsCreateNestedOneWithoutSocialMediasInput = {
    create?: XOR<ContactsCreateWithoutSocialMediasInput, ContactsUncheckedCreateWithoutSocialMediasInput>
    connectOrCreate?: ContactsCreateOrConnectWithoutSocialMediasInput
    connect?: ContactsWhereUniqueInput
  }

  export type ContactsUpdateOneRequiredWithoutSocialMediasNestedInput = {
    create?: XOR<ContactsCreateWithoutSocialMediasInput, ContactsUncheckedCreateWithoutSocialMediasInput>
    connectOrCreate?: ContactsCreateOrConnectWithoutSocialMediasInput
    upsert?: ContactsUpsertWithoutSocialMediasInput
    connect?: ContactsWhereUniqueInput
    update?: XOR<XOR<ContactsUpdateToOneWithWhereWithoutSocialMediasInput, ContactsUpdateWithoutSocialMediasInput>, ContactsUncheckedUpdateWithoutSocialMediasInput>
  }

  export type UserCreateNestedOneWithoutLanguagesInput = {
    create?: XOR<UserCreateWithoutLanguagesInput, UserUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLanguagesInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutLanguagesNestedInput = {
    create?: XOR<UserCreateWithoutLanguagesInput, UserUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLanguagesInput
    upsert?: UserUpsertWithoutLanguagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLanguagesInput, UserUpdateWithoutLanguagesInput>, UserUncheckedUpdateWithoutLanguagesInput>
  }

  export type UserCreateNestedOneWithoutProfessionalExperiencesInput = {
    create?: XOR<UserCreateWithoutProfessionalExperiencesInput, UserUncheckedCreateWithoutProfessionalExperiencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessionalExperiencesInput
    connect?: UserWhereUniqueInput
  }

  export type ProfessionalExperiencesDescriptionCreateNestedManyWithoutProfessional_experiencesInput = {
    create?: XOR<ProfessionalExperiencesDescriptionCreateWithoutProfessional_experiencesInput, ProfessionalExperiencesDescriptionUncheckedCreateWithoutProfessional_experiencesInput> | ProfessionalExperiencesDescriptionCreateWithoutProfessional_experiencesInput[] | ProfessionalExperiencesDescriptionUncheckedCreateWithoutProfessional_experiencesInput[]
    connectOrCreate?: ProfessionalExperiencesDescriptionCreateOrConnectWithoutProfessional_experiencesInput | ProfessionalExperiencesDescriptionCreateOrConnectWithoutProfessional_experiencesInput[]
    createMany?: ProfessionalExperiencesDescriptionCreateManyProfessional_experiencesInputEnvelope
    connect?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
  }

  export type ProfessionalExperiencesDescriptionUncheckedCreateNestedManyWithoutProfessional_experiencesInput = {
    create?: XOR<ProfessionalExperiencesDescriptionCreateWithoutProfessional_experiencesInput, ProfessionalExperiencesDescriptionUncheckedCreateWithoutProfessional_experiencesInput> | ProfessionalExperiencesDescriptionCreateWithoutProfessional_experiencesInput[] | ProfessionalExperiencesDescriptionUncheckedCreateWithoutProfessional_experiencesInput[]
    connectOrCreate?: ProfessionalExperiencesDescriptionCreateOrConnectWithoutProfessional_experiencesInput | ProfessionalExperiencesDescriptionCreateOrConnectWithoutProfessional_experiencesInput[]
    createMany?: ProfessionalExperiencesDescriptionCreateManyProfessional_experiencesInputEnvelope
    connect?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutProfessionalExperiencesNestedInput = {
    create?: XOR<UserCreateWithoutProfessionalExperiencesInput, UserUncheckedCreateWithoutProfessionalExperiencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessionalExperiencesInput
    upsert?: UserUpsertWithoutProfessionalExperiencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfessionalExperiencesInput, UserUpdateWithoutProfessionalExperiencesInput>, UserUncheckedUpdateWithoutProfessionalExperiencesInput>
  }

  export type ProfessionalExperiencesDescriptionUpdateManyWithoutProfessional_experiencesNestedInput = {
    create?: XOR<ProfessionalExperiencesDescriptionCreateWithoutProfessional_experiencesInput, ProfessionalExperiencesDescriptionUncheckedCreateWithoutProfessional_experiencesInput> | ProfessionalExperiencesDescriptionCreateWithoutProfessional_experiencesInput[] | ProfessionalExperiencesDescriptionUncheckedCreateWithoutProfessional_experiencesInput[]
    connectOrCreate?: ProfessionalExperiencesDescriptionCreateOrConnectWithoutProfessional_experiencesInput | ProfessionalExperiencesDescriptionCreateOrConnectWithoutProfessional_experiencesInput[]
    upsert?: ProfessionalExperiencesDescriptionUpsertWithWhereUniqueWithoutProfessional_experiencesInput | ProfessionalExperiencesDescriptionUpsertWithWhereUniqueWithoutProfessional_experiencesInput[]
    createMany?: ProfessionalExperiencesDescriptionCreateManyProfessional_experiencesInputEnvelope
    set?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    disconnect?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    delete?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    connect?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    update?: ProfessionalExperiencesDescriptionUpdateWithWhereUniqueWithoutProfessional_experiencesInput | ProfessionalExperiencesDescriptionUpdateWithWhereUniqueWithoutProfessional_experiencesInput[]
    updateMany?: ProfessionalExperiencesDescriptionUpdateManyWithWhereWithoutProfessional_experiencesInput | ProfessionalExperiencesDescriptionUpdateManyWithWhereWithoutProfessional_experiencesInput[]
    deleteMany?: ProfessionalExperiencesDescriptionScalarWhereInput | ProfessionalExperiencesDescriptionScalarWhereInput[]
  }

  export type ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutProfessional_experiencesNestedInput = {
    create?: XOR<ProfessionalExperiencesDescriptionCreateWithoutProfessional_experiencesInput, ProfessionalExperiencesDescriptionUncheckedCreateWithoutProfessional_experiencesInput> | ProfessionalExperiencesDescriptionCreateWithoutProfessional_experiencesInput[] | ProfessionalExperiencesDescriptionUncheckedCreateWithoutProfessional_experiencesInput[]
    connectOrCreate?: ProfessionalExperiencesDescriptionCreateOrConnectWithoutProfessional_experiencesInput | ProfessionalExperiencesDescriptionCreateOrConnectWithoutProfessional_experiencesInput[]
    upsert?: ProfessionalExperiencesDescriptionUpsertWithWhereUniqueWithoutProfessional_experiencesInput | ProfessionalExperiencesDescriptionUpsertWithWhereUniqueWithoutProfessional_experiencesInput[]
    createMany?: ProfessionalExperiencesDescriptionCreateManyProfessional_experiencesInputEnvelope
    set?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    disconnect?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    delete?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    connect?: ProfessionalExperiencesDescriptionWhereUniqueInput | ProfessionalExperiencesDescriptionWhereUniqueInput[]
    update?: ProfessionalExperiencesDescriptionUpdateWithWhereUniqueWithoutProfessional_experiencesInput | ProfessionalExperiencesDescriptionUpdateWithWhereUniqueWithoutProfessional_experiencesInput[]
    updateMany?: ProfessionalExperiencesDescriptionUpdateManyWithWhereWithoutProfessional_experiencesInput | ProfessionalExperiencesDescriptionUpdateManyWithWhereWithoutProfessional_experiencesInput[]
    deleteMany?: ProfessionalExperiencesDescriptionScalarWhereInput | ProfessionalExperiencesDescriptionScalarWhereInput[]
  }

  export type ProfessionalExperiencesCreateNestedOneWithoutProfessionalExperiencesDescriptionInput = {
    create?: XOR<ProfessionalExperiencesCreateWithoutProfessionalExperiencesDescriptionInput, ProfessionalExperiencesUncheckedCreateWithoutProfessionalExperiencesDescriptionInput>
    connectOrCreate?: ProfessionalExperiencesCreateOrConnectWithoutProfessionalExperiencesDescriptionInput
    connect?: ProfessionalExperiencesWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProfessionalExperiencesDescriptionInput = {
    create?: XOR<UserCreateWithoutProfessionalExperiencesDescriptionInput, UserUncheckedCreateWithoutProfessionalExperiencesDescriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessionalExperiencesDescriptionInput
    connect?: UserWhereUniqueInput
  }

  export type ProfessionalExperiencesUpdateOneRequiredWithoutProfessionalExperiencesDescriptionNestedInput = {
    create?: XOR<ProfessionalExperiencesCreateWithoutProfessionalExperiencesDescriptionInput, ProfessionalExperiencesUncheckedCreateWithoutProfessionalExperiencesDescriptionInput>
    connectOrCreate?: ProfessionalExperiencesCreateOrConnectWithoutProfessionalExperiencesDescriptionInput
    upsert?: ProfessionalExperiencesUpsertWithoutProfessionalExperiencesDescriptionInput
    connect?: ProfessionalExperiencesWhereUniqueInput
    update?: XOR<XOR<ProfessionalExperiencesUpdateToOneWithWhereWithoutProfessionalExperiencesDescriptionInput, ProfessionalExperiencesUpdateWithoutProfessionalExperiencesDescriptionInput>, ProfessionalExperiencesUncheckedUpdateWithoutProfessionalExperiencesDescriptionInput>
  }

  export type UserUpdateOneRequiredWithoutProfessionalExperiencesDescriptionNestedInput = {
    create?: XOR<UserCreateWithoutProfessionalExperiencesDescriptionInput, UserUncheckedCreateWithoutProfessionalExperiencesDescriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessionalExperiencesDescriptionInput
    upsert?: UserUpsertWithoutProfessionalExperiencesDescriptionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfessionalExperiencesDescriptionInput, UserUpdateWithoutProfessionalExperiencesDescriptionInput>, UserUncheckedUpdateWithoutProfessionalExperiencesDescriptionInput>
  }

  export type UserCreateNestedOneWithoutAcademicEducationsInput = {
    create?: XOR<UserCreateWithoutAcademicEducationsInput, UserUncheckedCreateWithoutAcademicEducationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAcademicEducationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAcademicEducationsNestedInput = {
    create?: XOR<UserCreateWithoutAcademicEducationsInput, UserUncheckedCreateWithoutAcademicEducationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAcademicEducationsInput
    upsert?: UserUpsertWithoutAcademicEducationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAcademicEducationsInput, UserUpdateWithoutAcademicEducationsInput>, UserUncheckedUpdateWithoutAcademicEducationsInput>
  }

  export type UserCreateNestedOneWithoutPersonalDatasInput = {
    create?: XOR<UserCreateWithoutPersonalDatasInput, UserUncheckedCreateWithoutPersonalDatasInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonalDatasInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPersonalDatasNestedInput = {
    create?: XOR<UserCreateWithoutPersonalDatasInput, UserUncheckedCreateWithoutPersonalDatasInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonalDatasInput
    upsert?: UserUpsertWithoutPersonalDatasInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPersonalDatasInput, UserUpdateWithoutPersonalDatasInput>, UserUncheckedUpdateWithoutPersonalDatasInput>
  }

  export type UserCreateNestedOneWithoutAddressInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAddressNestedInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
    upsert?: UserUpsertWithoutAddressInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAddressInput, UserUpdateWithoutAddressInput>, UserUncheckedUpdateWithoutAddressInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type HabilitiesCreateWithoutUserInput = {
    id?: string
    name: string
    slug: string
    value?: number
  }

  export type HabilitiesUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    slug: string
    value?: number
  }

  export type HabilitiesCreateOrConnectWithoutUserInput = {
    where: HabilitiesWhereUniqueInput
    create: XOR<HabilitiesCreateWithoutUserInput, HabilitiesUncheckedCreateWithoutUserInput>
  }

  export type HabilitiesCreateManyUserInputEnvelope = {
    data: HabilitiesCreateManyUserInput | HabilitiesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ContactsCreateWithoutUserInput = {
    id?: string
    name: string
    phone: string
    is_whatsapp: boolean
    SocialMedias?: SocialMediasCreateNestedManyWithoutContactsInput
  }

  export type ContactsUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    phone: string
    is_whatsapp: boolean
    SocialMedias?: SocialMediasUncheckedCreateNestedManyWithoutContactsInput
  }

  export type ContactsCreateOrConnectWithoutUserInput = {
    where: ContactsWhereUniqueInput
    create: XOR<ContactsCreateWithoutUserInput, ContactsUncheckedCreateWithoutUserInput>
  }

  export type ContactsCreateManyUserInputEnvelope = {
    data: ContactsCreateManyUserInput | ContactsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LanguagesCreateWithoutUserInput = {
    id?: string
    name: string
    slug: string
    stars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguagesUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    slug: string
    stars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguagesCreateOrConnectWithoutUserInput = {
    where: LanguagesWhereUniqueInput
    create: XOR<LanguagesCreateWithoutUserInput, LanguagesUncheckedCreateWithoutUserInput>
  }

  export type LanguagesCreateManyUserInputEnvelope = {
    data: LanguagesCreateManyUserInput | LanguagesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfessionalExperiencesCreateWithoutUserInput = {
    id?: string
    title: string
    company: string
    date_init: Date | string
    date_end?: Date | string | null
    is_actual_job?: boolean
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionCreateNestedManyWithoutProfessional_experiencesInput
  }

  export type ProfessionalExperiencesUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    company: string
    date_init: Date | string
    date_end?: Date | string | null
    is_actual_job?: boolean
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedCreateNestedManyWithoutProfessional_experiencesInput
  }

  export type ProfessionalExperiencesCreateOrConnectWithoutUserInput = {
    where: ProfessionalExperiencesWhereUniqueInput
    create: XOR<ProfessionalExperiencesCreateWithoutUserInput, ProfessionalExperiencesUncheckedCreateWithoutUserInput>
  }

  export type ProfessionalExperiencesCreateManyUserInputEnvelope = {
    data: ProfessionalExperiencesCreateManyUserInput | ProfessionalExperiencesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AcademicEducationsCreateWithoutUserInput = {
    id?: string
    title: string
    university: string
    description: string
    date_init: Date | string
    date_end: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicEducationsUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    university: string
    description: string
    date_init: Date | string
    date_end: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicEducationsCreateOrConnectWithoutUserInput = {
    where: AcademicEducationsWhereUniqueInput
    create: XOR<AcademicEducationsCreateWithoutUserInput, AcademicEducationsUncheckedCreateWithoutUserInput>
  }

  export type AcademicEducationsCreateManyUserInputEnvelope = {
    data: AcademicEducationsCreateManyUserInput | AcademicEducationsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PersonalDataCreateWithoutUserInput = {
    id?: string
    fullname: string
    document: string
    avatar_url?: string
    birthday: Date | string
    profession?: string | null
  }

  export type PersonalDataUncheckedCreateWithoutUserInput = {
    id?: string
    fullname: string
    document: string
    avatar_url?: string
    birthday: Date | string
    profession?: string | null
  }

  export type PersonalDataCreateOrConnectWithoutUserInput = {
    where: PersonalDataWhereUniqueInput
    create: XOR<PersonalDataCreateWithoutUserInput, PersonalDataUncheckedCreateWithoutUserInput>
  }

  export type PersonalDataCreateManyUserInputEnvelope = {
    data: PersonalDataCreateManyUserInput | PersonalDataCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AddressCreateWithoutUserInput = {
    id?: string
    street: string
    number: string
    district: string
    city: string
    state: string
    country: string
    zipcode: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUncheckedCreateWithoutUserInput = {
    id?: string
    street: string
    number: string
    district: string
    city: string
    state: string
    country: string
    zipcode: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressCreateOrConnectWithoutUserInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressCreateManyUserInputEnvelope = {
    data: AddressCreateManyUserInput | AddressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfessionalExperiencesDescriptionCreateWithoutUserInput = {
    id?: string
    description: string
    professional_experiences: ProfessionalExperiencesCreateNestedOneWithoutProfessionalExperiencesDescriptionInput
  }

  export type ProfessionalExperiencesDescriptionUncheckedCreateWithoutUserInput = {
    id?: string
    description: string
    professional_experiences_id: string
  }

  export type ProfessionalExperiencesDescriptionCreateOrConnectWithoutUserInput = {
    where: ProfessionalExperiencesDescriptionWhereUniqueInput
    create: XOR<ProfessionalExperiencesDescriptionCreateWithoutUserInput, ProfessionalExperiencesDescriptionUncheckedCreateWithoutUserInput>
  }

  export type ProfessionalExperiencesDescriptionCreateManyUserInputEnvelope = {
    data: ProfessionalExperiencesDescriptionCreateManyUserInput | ProfessionalExperiencesDescriptionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type HabilitiesUpsertWithWhereUniqueWithoutUserInput = {
    where: HabilitiesWhereUniqueInput
    update: XOR<HabilitiesUpdateWithoutUserInput, HabilitiesUncheckedUpdateWithoutUserInput>
    create: XOR<HabilitiesCreateWithoutUserInput, HabilitiesUncheckedCreateWithoutUserInput>
  }

  export type HabilitiesUpdateWithWhereUniqueWithoutUserInput = {
    where: HabilitiesWhereUniqueInput
    data: XOR<HabilitiesUpdateWithoutUserInput, HabilitiesUncheckedUpdateWithoutUserInput>
  }

  export type HabilitiesUpdateManyWithWhereWithoutUserInput = {
    where: HabilitiesScalarWhereInput
    data: XOR<HabilitiesUpdateManyMutationInput, HabilitiesUncheckedUpdateManyWithoutUserInput>
  }

  export type HabilitiesScalarWhereInput = {
    AND?: HabilitiesScalarWhereInput | HabilitiesScalarWhereInput[]
    OR?: HabilitiesScalarWhereInput[]
    NOT?: HabilitiesScalarWhereInput | HabilitiesScalarWhereInput[]
    id?: StringFilter<"Habilities"> | string
    name?: StringFilter<"Habilities"> | string
    slug?: StringFilter<"Habilities"> | string
    value?: IntFilter<"Habilities"> | number
    user_id?: StringFilter<"Habilities"> | string
  }

  export type ContactsUpsertWithWhereUniqueWithoutUserInput = {
    where: ContactsWhereUniqueInput
    update: XOR<ContactsUpdateWithoutUserInput, ContactsUncheckedUpdateWithoutUserInput>
    create: XOR<ContactsCreateWithoutUserInput, ContactsUncheckedCreateWithoutUserInput>
  }

  export type ContactsUpdateWithWhereUniqueWithoutUserInput = {
    where: ContactsWhereUniqueInput
    data: XOR<ContactsUpdateWithoutUserInput, ContactsUncheckedUpdateWithoutUserInput>
  }

  export type ContactsUpdateManyWithWhereWithoutUserInput = {
    where: ContactsScalarWhereInput
    data: XOR<ContactsUpdateManyMutationInput, ContactsUncheckedUpdateManyWithoutUserInput>
  }

  export type ContactsScalarWhereInput = {
    AND?: ContactsScalarWhereInput | ContactsScalarWhereInput[]
    OR?: ContactsScalarWhereInput[]
    NOT?: ContactsScalarWhereInput | ContactsScalarWhereInput[]
    id?: StringFilter<"Contacts"> | string
    name?: StringFilter<"Contacts"> | string
    phone?: StringFilter<"Contacts"> | string
    is_whatsapp?: BoolFilter<"Contacts"> | boolean
    user_id?: StringFilter<"Contacts"> | string
  }

  export type LanguagesUpsertWithWhereUniqueWithoutUserInput = {
    where: LanguagesWhereUniqueInput
    update: XOR<LanguagesUpdateWithoutUserInput, LanguagesUncheckedUpdateWithoutUserInput>
    create: XOR<LanguagesCreateWithoutUserInput, LanguagesUncheckedCreateWithoutUserInput>
  }

  export type LanguagesUpdateWithWhereUniqueWithoutUserInput = {
    where: LanguagesWhereUniqueInput
    data: XOR<LanguagesUpdateWithoutUserInput, LanguagesUncheckedUpdateWithoutUserInput>
  }

  export type LanguagesUpdateManyWithWhereWithoutUserInput = {
    where: LanguagesScalarWhereInput
    data: XOR<LanguagesUpdateManyMutationInput, LanguagesUncheckedUpdateManyWithoutUserInput>
  }

  export type LanguagesScalarWhereInput = {
    AND?: LanguagesScalarWhereInput | LanguagesScalarWhereInput[]
    OR?: LanguagesScalarWhereInput[]
    NOT?: LanguagesScalarWhereInput | LanguagesScalarWhereInput[]
    id?: StringFilter<"Languages"> | string
    name?: StringFilter<"Languages"> | string
    slug?: StringFilter<"Languages"> | string
    stars?: IntFilter<"Languages"> | number
    user_id?: StringFilter<"Languages"> | string
    createdAt?: DateTimeFilter<"Languages"> | Date | string
    updatedAt?: DateTimeFilter<"Languages"> | Date | string
  }

  export type ProfessionalExperiencesUpsertWithWhereUniqueWithoutUserInput = {
    where: ProfessionalExperiencesWhereUniqueInput
    update: XOR<ProfessionalExperiencesUpdateWithoutUserInput, ProfessionalExperiencesUncheckedUpdateWithoutUserInput>
    create: XOR<ProfessionalExperiencesCreateWithoutUserInput, ProfessionalExperiencesUncheckedCreateWithoutUserInput>
  }

  export type ProfessionalExperiencesUpdateWithWhereUniqueWithoutUserInput = {
    where: ProfessionalExperiencesWhereUniqueInput
    data: XOR<ProfessionalExperiencesUpdateWithoutUserInput, ProfessionalExperiencesUncheckedUpdateWithoutUserInput>
  }

  export type ProfessionalExperiencesUpdateManyWithWhereWithoutUserInput = {
    where: ProfessionalExperiencesScalarWhereInput
    data: XOR<ProfessionalExperiencesUpdateManyMutationInput, ProfessionalExperiencesUncheckedUpdateManyWithoutUserInput>
  }

  export type ProfessionalExperiencesScalarWhereInput = {
    AND?: ProfessionalExperiencesScalarWhereInput | ProfessionalExperiencesScalarWhereInput[]
    OR?: ProfessionalExperiencesScalarWhereInput[]
    NOT?: ProfessionalExperiencesScalarWhereInput | ProfessionalExperiencesScalarWhereInput[]
    id?: StringFilter<"ProfessionalExperiences"> | string
    title?: StringFilter<"ProfessionalExperiences"> | string
    company?: StringFilter<"ProfessionalExperiences"> | string
    date_init?: DateTimeFilter<"ProfessionalExperiences"> | Date | string
    date_end?: DateTimeNullableFilter<"ProfessionalExperiences"> | Date | string | null
    is_actual_job?: BoolFilter<"ProfessionalExperiences"> | boolean
    user_id?: StringFilter<"ProfessionalExperiences"> | string
  }

  export type AcademicEducationsUpsertWithWhereUniqueWithoutUserInput = {
    where: AcademicEducationsWhereUniqueInput
    update: XOR<AcademicEducationsUpdateWithoutUserInput, AcademicEducationsUncheckedUpdateWithoutUserInput>
    create: XOR<AcademicEducationsCreateWithoutUserInput, AcademicEducationsUncheckedCreateWithoutUserInput>
  }

  export type AcademicEducationsUpdateWithWhereUniqueWithoutUserInput = {
    where: AcademicEducationsWhereUniqueInput
    data: XOR<AcademicEducationsUpdateWithoutUserInput, AcademicEducationsUncheckedUpdateWithoutUserInput>
  }

  export type AcademicEducationsUpdateManyWithWhereWithoutUserInput = {
    where: AcademicEducationsScalarWhereInput
    data: XOR<AcademicEducationsUpdateManyMutationInput, AcademicEducationsUncheckedUpdateManyWithoutUserInput>
  }

  export type AcademicEducationsScalarWhereInput = {
    AND?: AcademicEducationsScalarWhereInput | AcademicEducationsScalarWhereInput[]
    OR?: AcademicEducationsScalarWhereInput[]
    NOT?: AcademicEducationsScalarWhereInput | AcademicEducationsScalarWhereInput[]
    id?: StringFilter<"AcademicEducations"> | string
    title?: StringFilter<"AcademicEducations"> | string
    university?: StringFilter<"AcademicEducations"> | string
    description?: StringFilter<"AcademicEducations"> | string
    date_init?: DateTimeFilter<"AcademicEducations"> | Date | string
    date_end?: DateTimeFilter<"AcademicEducations"> | Date | string
    user_id?: StringFilter<"AcademicEducations"> | string
    createdAt?: DateTimeFilter<"AcademicEducations"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicEducations"> | Date | string
  }

  export type PersonalDataUpsertWithWhereUniqueWithoutUserInput = {
    where: PersonalDataWhereUniqueInput
    update: XOR<PersonalDataUpdateWithoutUserInput, PersonalDataUncheckedUpdateWithoutUserInput>
    create: XOR<PersonalDataCreateWithoutUserInput, PersonalDataUncheckedCreateWithoutUserInput>
  }

  export type PersonalDataUpdateWithWhereUniqueWithoutUserInput = {
    where: PersonalDataWhereUniqueInput
    data: XOR<PersonalDataUpdateWithoutUserInput, PersonalDataUncheckedUpdateWithoutUserInput>
  }

  export type PersonalDataUpdateManyWithWhereWithoutUserInput = {
    where: PersonalDataScalarWhereInput
    data: XOR<PersonalDataUpdateManyMutationInput, PersonalDataUncheckedUpdateManyWithoutUserInput>
  }

  export type PersonalDataScalarWhereInput = {
    AND?: PersonalDataScalarWhereInput | PersonalDataScalarWhereInput[]
    OR?: PersonalDataScalarWhereInput[]
    NOT?: PersonalDataScalarWhereInput | PersonalDataScalarWhereInput[]
    id?: StringFilter<"PersonalData"> | string
    fullname?: StringFilter<"PersonalData"> | string
    document?: StringFilter<"PersonalData"> | string
    avatar_url?: StringFilter<"PersonalData"> | string
    birthday?: DateTimeFilter<"PersonalData"> | Date | string
    profession?: StringNullableFilter<"PersonalData"> | string | null
    user_id?: StringFilter<"PersonalData"> | string
  }

  export type AddressUpsertWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateManyWithWhereWithoutUserInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutUserInput>
  }

  export type AddressScalarWhereInput = {
    AND?: AddressScalarWhereInput | AddressScalarWhereInput[]
    OR?: AddressScalarWhereInput[]
    NOT?: AddressScalarWhereInput | AddressScalarWhereInput[]
    id?: StringFilter<"Address"> | string
    street?: StringFilter<"Address"> | string
    number?: StringFilter<"Address"> | string
    district?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    state?: StringFilter<"Address"> | string
    country?: StringFilter<"Address"> | string
    zipcode?: StringFilter<"Address"> | string
    user_id?: StringFilter<"Address"> | string
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
  }

  export type ProfessionalExperiencesDescriptionUpsertWithWhereUniqueWithoutUserInput = {
    where: ProfessionalExperiencesDescriptionWhereUniqueInput
    update: XOR<ProfessionalExperiencesDescriptionUpdateWithoutUserInput, ProfessionalExperiencesDescriptionUncheckedUpdateWithoutUserInput>
    create: XOR<ProfessionalExperiencesDescriptionCreateWithoutUserInput, ProfessionalExperiencesDescriptionUncheckedCreateWithoutUserInput>
  }

  export type ProfessionalExperiencesDescriptionUpdateWithWhereUniqueWithoutUserInput = {
    where: ProfessionalExperiencesDescriptionWhereUniqueInput
    data: XOR<ProfessionalExperiencesDescriptionUpdateWithoutUserInput, ProfessionalExperiencesDescriptionUncheckedUpdateWithoutUserInput>
  }

  export type ProfessionalExperiencesDescriptionUpdateManyWithWhereWithoutUserInput = {
    where: ProfessionalExperiencesDescriptionScalarWhereInput
    data: XOR<ProfessionalExperiencesDescriptionUpdateManyMutationInput, ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutUserInput>
  }

  export type ProfessionalExperiencesDescriptionScalarWhereInput = {
    AND?: ProfessionalExperiencesDescriptionScalarWhereInput | ProfessionalExperiencesDescriptionScalarWhereInput[]
    OR?: ProfessionalExperiencesDescriptionScalarWhereInput[]
    NOT?: ProfessionalExperiencesDescriptionScalarWhereInput | ProfessionalExperiencesDescriptionScalarWhereInput[]
    id?: StringFilter<"ProfessionalExperiencesDescription"> | string
    description?: StringFilter<"ProfessionalExperiencesDescription"> | string
    professional_experiences_id?: StringFilter<"ProfessionalExperiencesDescription"> | string
    user_id?: StringFilter<"ProfessionalExperiencesDescription"> | string
  }

  export type UserCreateWithoutHabilitiesInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Contacts?: ContactsCreateNestedManyWithoutUserInput
    Languages?: LanguagesCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataCreateNestedManyWithoutUserInput
    Address?: AddressCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHabilitiesInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Contacts?: ContactsUncheckedCreateNestedManyWithoutUserInput
    Languages?: LanguagesUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsUncheckedCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataUncheckedCreateNestedManyWithoutUserInput
    Address?: AddressUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHabilitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHabilitiesInput, UserUncheckedCreateWithoutHabilitiesInput>
  }

  export type UserUpsertWithoutHabilitiesInput = {
    update: XOR<UserUpdateWithoutHabilitiesInput, UserUncheckedUpdateWithoutHabilitiesInput>
    create: XOR<UserCreateWithoutHabilitiesInput, UserUncheckedCreateWithoutHabilitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHabilitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHabilitiesInput, UserUncheckedUpdateWithoutHabilitiesInput>
  }

  export type UserUpdateWithoutHabilitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Contacts?: ContactsUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUpdateManyWithoutUserNestedInput
    Address?: AddressUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHabilitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Contacts?: ContactsUncheckedUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUncheckedUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUncheckedUpdateManyWithoutUserNestedInput
    Address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutContactsInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesCreateNestedManyWithoutUserInput
    Languages?: LanguagesCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataCreateNestedManyWithoutUserInput
    Address?: AddressCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContactsInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesUncheckedCreateNestedManyWithoutUserInput
    Languages?: LanguagesUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsUncheckedCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataUncheckedCreateNestedManyWithoutUserInput
    Address?: AddressUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContactsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
  }

  export type SocialMediasCreateWithoutContactsInput = {
    id?: string
    name: string
    slug: string
    url: string
  }

  export type SocialMediasUncheckedCreateWithoutContactsInput = {
    id?: string
    name: string
    slug: string
    url: string
  }

  export type SocialMediasCreateOrConnectWithoutContactsInput = {
    where: SocialMediasWhereUniqueInput
    create: XOR<SocialMediasCreateWithoutContactsInput, SocialMediasUncheckedCreateWithoutContactsInput>
  }

  export type SocialMediasCreateManyContactsInputEnvelope = {
    data: SocialMediasCreateManyContactsInput | SocialMediasCreateManyContactsInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutContactsInput = {
    update: XOR<UserUpdateWithoutContactsInput, UserUncheckedUpdateWithoutContactsInput>
    create: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContactsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContactsInput, UserUncheckedUpdateWithoutContactsInput>
  }

  export type UserUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUpdateManyWithoutUserNestedInput
    Address?: AddressUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUncheckedUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUncheckedUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUncheckedUpdateManyWithoutUserNestedInput
    Address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SocialMediasUpsertWithWhereUniqueWithoutContactsInput = {
    where: SocialMediasWhereUniqueInput
    update: XOR<SocialMediasUpdateWithoutContactsInput, SocialMediasUncheckedUpdateWithoutContactsInput>
    create: XOR<SocialMediasCreateWithoutContactsInput, SocialMediasUncheckedCreateWithoutContactsInput>
  }

  export type SocialMediasUpdateWithWhereUniqueWithoutContactsInput = {
    where: SocialMediasWhereUniqueInput
    data: XOR<SocialMediasUpdateWithoutContactsInput, SocialMediasUncheckedUpdateWithoutContactsInput>
  }

  export type SocialMediasUpdateManyWithWhereWithoutContactsInput = {
    where: SocialMediasScalarWhereInput
    data: XOR<SocialMediasUpdateManyMutationInput, SocialMediasUncheckedUpdateManyWithoutContactsInput>
  }

  export type SocialMediasScalarWhereInput = {
    AND?: SocialMediasScalarWhereInput | SocialMediasScalarWhereInput[]
    OR?: SocialMediasScalarWhereInput[]
    NOT?: SocialMediasScalarWhereInput | SocialMediasScalarWhereInput[]
    id?: StringFilter<"SocialMedias"> | string
    name?: StringFilter<"SocialMedias"> | string
    slug?: StringFilter<"SocialMedias"> | string
    url?: StringFilter<"SocialMedias"> | string
    contacts_id?: StringFilter<"SocialMedias"> | string
  }

  export type ContactsCreateWithoutSocialMediasInput = {
    id?: string
    name: string
    phone: string
    is_whatsapp: boolean
    user: UserCreateNestedOneWithoutContactsInput
  }

  export type ContactsUncheckedCreateWithoutSocialMediasInput = {
    id?: string
    name: string
    phone: string
    is_whatsapp: boolean
    user_id: string
  }

  export type ContactsCreateOrConnectWithoutSocialMediasInput = {
    where: ContactsWhereUniqueInput
    create: XOR<ContactsCreateWithoutSocialMediasInput, ContactsUncheckedCreateWithoutSocialMediasInput>
  }

  export type ContactsUpsertWithoutSocialMediasInput = {
    update: XOR<ContactsUpdateWithoutSocialMediasInput, ContactsUncheckedUpdateWithoutSocialMediasInput>
    create: XOR<ContactsCreateWithoutSocialMediasInput, ContactsUncheckedCreateWithoutSocialMediasInput>
    where?: ContactsWhereInput
  }

  export type ContactsUpdateToOneWithWhereWithoutSocialMediasInput = {
    where?: ContactsWhereInput
    data: XOR<ContactsUpdateWithoutSocialMediasInput, ContactsUncheckedUpdateWithoutSocialMediasInput>
  }

  export type ContactsUpdateWithoutSocialMediasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    is_whatsapp?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutContactsNestedInput
  }

  export type ContactsUncheckedUpdateWithoutSocialMediasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    is_whatsapp?: BoolFieldUpdateOperationsInput | boolean
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutLanguagesInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesCreateNestedManyWithoutUserInput
    Contacts?: ContactsCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataCreateNestedManyWithoutUserInput
    Address?: AddressCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLanguagesInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesUncheckedCreateNestedManyWithoutUserInput
    Contacts?: ContactsUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsUncheckedCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataUncheckedCreateNestedManyWithoutUserInput
    Address?: AddressUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLanguagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLanguagesInput, UserUncheckedCreateWithoutLanguagesInput>
  }

  export type UserUpsertWithoutLanguagesInput = {
    update: XOR<UserUpdateWithoutLanguagesInput, UserUncheckedUpdateWithoutLanguagesInput>
    create: XOR<UserCreateWithoutLanguagesInput, UserUncheckedCreateWithoutLanguagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLanguagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLanguagesInput, UserUncheckedUpdateWithoutLanguagesInput>
  }

  export type UserUpdateWithoutLanguagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUpdateManyWithoutUserNestedInput
    Address?: AddressUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLanguagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUncheckedUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUncheckedUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUncheckedUpdateManyWithoutUserNestedInput
    Address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutProfessionalExperiencesInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesCreateNestedManyWithoutUserInput
    Contacts?: ContactsCreateNestedManyWithoutUserInput
    Languages?: LanguagesCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataCreateNestedManyWithoutUserInput
    Address?: AddressCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfessionalExperiencesInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesUncheckedCreateNestedManyWithoutUserInput
    Contacts?: ContactsUncheckedCreateNestedManyWithoutUserInput
    Languages?: LanguagesUncheckedCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsUncheckedCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataUncheckedCreateNestedManyWithoutUserInput
    Address?: AddressUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfessionalExperiencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfessionalExperiencesInput, UserUncheckedCreateWithoutProfessionalExperiencesInput>
  }

  export type ProfessionalExperiencesDescriptionCreateWithoutProfessional_experiencesInput = {
    id?: string
    description: string
    user: UserCreateNestedOneWithoutProfessionalExperiencesDescriptionInput
  }

  export type ProfessionalExperiencesDescriptionUncheckedCreateWithoutProfessional_experiencesInput = {
    id?: string
    description: string
    user_id: string
  }

  export type ProfessionalExperiencesDescriptionCreateOrConnectWithoutProfessional_experiencesInput = {
    where: ProfessionalExperiencesDescriptionWhereUniqueInput
    create: XOR<ProfessionalExperiencesDescriptionCreateWithoutProfessional_experiencesInput, ProfessionalExperiencesDescriptionUncheckedCreateWithoutProfessional_experiencesInput>
  }

  export type ProfessionalExperiencesDescriptionCreateManyProfessional_experiencesInputEnvelope = {
    data: ProfessionalExperiencesDescriptionCreateManyProfessional_experiencesInput | ProfessionalExperiencesDescriptionCreateManyProfessional_experiencesInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProfessionalExperiencesInput = {
    update: XOR<UserUpdateWithoutProfessionalExperiencesInput, UserUncheckedUpdateWithoutProfessionalExperiencesInput>
    create: XOR<UserCreateWithoutProfessionalExperiencesInput, UserUncheckedCreateWithoutProfessionalExperiencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfessionalExperiencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfessionalExperiencesInput, UserUncheckedUpdateWithoutProfessionalExperiencesInput>
  }

  export type UserUpdateWithoutProfessionalExperiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUpdateManyWithoutUserNestedInput
    Address?: AddressUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfessionalExperiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUncheckedUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUncheckedUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUncheckedUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUncheckedUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUncheckedUpdateManyWithoutUserNestedInput
    Address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProfessionalExperiencesDescriptionUpsertWithWhereUniqueWithoutProfessional_experiencesInput = {
    where: ProfessionalExperiencesDescriptionWhereUniqueInput
    update: XOR<ProfessionalExperiencesDescriptionUpdateWithoutProfessional_experiencesInput, ProfessionalExperiencesDescriptionUncheckedUpdateWithoutProfessional_experiencesInput>
    create: XOR<ProfessionalExperiencesDescriptionCreateWithoutProfessional_experiencesInput, ProfessionalExperiencesDescriptionUncheckedCreateWithoutProfessional_experiencesInput>
  }

  export type ProfessionalExperiencesDescriptionUpdateWithWhereUniqueWithoutProfessional_experiencesInput = {
    where: ProfessionalExperiencesDescriptionWhereUniqueInput
    data: XOR<ProfessionalExperiencesDescriptionUpdateWithoutProfessional_experiencesInput, ProfessionalExperiencesDescriptionUncheckedUpdateWithoutProfessional_experiencesInput>
  }

  export type ProfessionalExperiencesDescriptionUpdateManyWithWhereWithoutProfessional_experiencesInput = {
    where: ProfessionalExperiencesDescriptionScalarWhereInput
    data: XOR<ProfessionalExperiencesDescriptionUpdateManyMutationInput, ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutProfessional_experiencesInput>
  }

  export type ProfessionalExperiencesCreateWithoutProfessionalExperiencesDescriptionInput = {
    id?: string
    title: string
    company: string
    date_init: Date | string
    date_end?: Date | string | null
    is_actual_job?: boolean
    user: UserCreateNestedOneWithoutProfessionalExperiencesInput
  }

  export type ProfessionalExperiencesUncheckedCreateWithoutProfessionalExperiencesDescriptionInput = {
    id?: string
    title: string
    company: string
    date_init: Date | string
    date_end?: Date | string | null
    is_actual_job?: boolean
    user_id: string
  }

  export type ProfessionalExperiencesCreateOrConnectWithoutProfessionalExperiencesDescriptionInput = {
    where: ProfessionalExperiencesWhereUniqueInput
    create: XOR<ProfessionalExperiencesCreateWithoutProfessionalExperiencesDescriptionInput, ProfessionalExperiencesUncheckedCreateWithoutProfessionalExperiencesDescriptionInput>
  }

  export type UserCreateWithoutProfessionalExperiencesDescriptionInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesCreateNestedManyWithoutUserInput
    Contacts?: ContactsCreateNestedManyWithoutUserInput
    Languages?: LanguagesCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataCreateNestedManyWithoutUserInput
    Address?: AddressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfessionalExperiencesDescriptionInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesUncheckedCreateNestedManyWithoutUserInput
    Contacts?: ContactsUncheckedCreateNestedManyWithoutUserInput
    Languages?: LanguagesUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsUncheckedCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataUncheckedCreateNestedManyWithoutUserInput
    Address?: AddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfessionalExperiencesDescriptionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfessionalExperiencesDescriptionInput, UserUncheckedCreateWithoutProfessionalExperiencesDescriptionInput>
  }

  export type ProfessionalExperiencesUpsertWithoutProfessionalExperiencesDescriptionInput = {
    update: XOR<ProfessionalExperiencesUpdateWithoutProfessionalExperiencesDescriptionInput, ProfessionalExperiencesUncheckedUpdateWithoutProfessionalExperiencesDescriptionInput>
    create: XOR<ProfessionalExperiencesCreateWithoutProfessionalExperiencesDescriptionInput, ProfessionalExperiencesUncheckedCreateWithoutProfessionalExperiencesDescriptionInput>
    where?: ProfessionalExperiencesWhereInput
  }

  export type ProfessionalExperiencesUpdateToOneWithWhereWithoutProfessionalExperiencesDescriptionInput = {
    where?: ProfessionalExperiencesWhereInput
    data: XOR<ProfessionalExperiencesUpdateWithoutProfessionalExperiencesDescriptionInput, ProfessionalExperiencesUncheckedUpdateWithoutProfessionalExperiencesDescriptionInput>
  }

  export type ProfessionalExperiencesUpdateWithoutProfessionalExperiencesDescriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_actual_job?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutProfessionalExperiencesNestedInput
  }

  export type ProfessionalExperiencesUncheckedUpdateWithoutProfessionalExperiencesDescriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_actual_job?: BoolFieldUpdateOperationsInput | boolean
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutProfessionalExperiencesDescriptionInput = {
    update: XOR<UserUpdateWithoutProfessionalExperiencesDescriptionInput, UserUncheckedUpdateWithoutProfessionalExperiencesDescriptionInput>
    create: XOR<UserCreateWithoutProfessionalExperiencesDescriptionInput, UserUncheckedCreateWithoutProfessionalExperiencesDescriptionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfessionalExperiencesDescriptionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfessionalExperiencesDescriptionInput, UserUncheckedUpdateWithoutProfessionalExperiencesDescriptionInput>
  }

  export type UserUpdateWithoutProfessionalExperiencesDescriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUpdateManyWithoutUserNestedInput
    Address?: AddressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfessionalExperiencesDescriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUncheckedUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUncheckedUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUncheckedUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUncheckedUpdateManyWithoutUserNestedInput
    Address?: AddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAcademicEducationsInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesCreateNestedManyWithoutUserInput
    Contacts?: ContactsCreateNestedManyWithoutUserInput
    Languages?: LanguagesCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataCreateNestedManyWithoutUserInput
    Address?: AddressCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAcademicEducationsInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesUncheckedCreateNestedManyWithoutUserInput
    Contacts?: ContactsUncheckedCreateNestedManyWithoutUserInput
    Languages?: LanguagesUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataUncheckedCreateNestedManyWithoutUserInput
    Address?: AddressUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAcademicEducationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAcademicEducationsInput, UserUncheckedCreateWithoutAcademicEducationsInput>
  }

  export type UserUpsertWithoutAcademicEducationsInput = {
    update: XOR<UserUpdateWithoutAcademicEducationsInput, UserUncheckedUpdateWithoutAcademicEducationsInput>
    create: XOR<UserCreateWithoutAcademicEducationsInput, UserUncheckedCreateWithoutAcademicEducationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAcademicEducationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAcademicEducationsInput, UserUncheckedUpdateWithoutAcademicEducationsInput>
  }

  export type UserUpdateWithoutAcademicEducationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUpdateManyWithoutUserNestedInput
    Address?: AddressUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAcademicEducationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUncheckedUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUncheckedUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUncheckedUpdateManyWithoutUserNestedInput
    Address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPersonalDatasInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesCreateNestedManyWithoutUserInput
    Contacts?: ContactsCreateNestedManyWithoutUserInput
    Languages?: LanguagesCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsCreateNestedManyWithoutUserInput
    Address?: AddressCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPersonalDatasInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesUncheckedCreateNestedManyWithoutUserInput
    Contacts?: ContactsUncheckedCreateNestedManyWithoutUserInput
    Languages?: LanguagesUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsUncheckedCreateNestedManyWithoutUserInput
    Address?: AddressUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPersonalDatasInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPersonalDatasInput, UserUncheckedCreateWithoutPersonalDatasInput>
  }

  export type UserUpsertWithoutPersonalDatasInput = {
    update: XOR<UserUpdateWithoutPersonalDatasInput, UserUncheckedUpdateWithoutPersonalDatasInput>
    create: XOR<UserCreateWithoutPersonalDatasInput, UserUncheckedCreateWithoutPersonalDatasInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPersonalDatasInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPersonalDatasInput, UserUncheckedUpdateWithoutPersonalDatasInput>
  }

  export type UserUpdateWithoutPersonalDatasInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUpdateManyWithoutUserNestedInput
    Address?: AddressUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPersonalDatasInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUncheckedUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUncheckedUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUncheckedUpdateManyWithoutUserNestedInput
    Address?: AddressUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAddressInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesCreateNestedManyWithoutUserInput
    Contacts?: ContactsCreateNestedManyWithoutUserInput
    Languages?: LanguagesCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAddressInput = {
    id?: string
    email: string
    name: string
    bio?: string | null
    password?: string | null
    Habilities?: HabilitiesUncheckedCreateNestedManyWithoutUserInput
    Contacts?: ContactsUncheckedCreateNestedManyWithoutUserInput
    Languages?: LanguagesUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedCreateNestedManyWithoutUserInput
    AcademicEducations?: AcademicEducationsUncheckedCreateNestedManyWithoutUserInput
    PersonalDatas?: PersonalDataUncheckedCreateNestedManyWithoutUserInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAddressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
  }

  export type UserUpsertWithoutAddressInput = {
    update: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAddressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
  }

  export type UserUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    Habilities?: HabilitiesUncheckedUpdateManyWithoutUserNestedInput
    Contacts?: ContactsUncheckedUpdateManyWithoutUserNestedInput
    Languages?: LanguagesUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiences?: ProfessionalExperiencesUncheckedUpdateManyWithoutUserNestedInput
    AcademicEducations?: AcademicEducationsUncheckedUpdateManyWithoutUserNestedInput
    PersonalDatas?: PersonalDataUncheckedUpdateManyWithoutUserNestedInput
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HabilitiesCreateManyUserInput = {
    id?: string
    name: string
    slug: string
    value?: number
  }

  export type ContactsCreateManyUserInput = {
    id?: string
    name: string
    phone: string
    is_whatsapp: boolean
  }

  export type LanguagesCreateManyUserInput = {
    id?: string
    name: string
    slug: string
    stars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalExperiencesCreateManyUserInput = {
    id?: string
    title: string
    company: string
    date_init: Date | string
    date_end?: Date | string | null
    is_actual_job?: boolean
  }

  export type AcademicEducationsCreateManyUserInput = {
    id?: string
    title: string
    university: string
    description: string
    date_init: Date | string
    date_end: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PersonalDataCreateManyUserInput = {
    id?: string
    fullname: string
    document: string
    avatar_url?: string
    birthday: Date | string
    profession?: string | null
  }

  export type AddressCreateManyUserInput = {
    id?: string
    street: string
    number: string
    district: string
    city: string
    state: string
    country: string
    zipcode: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalExperiencesDescriptionCreateManyUserInput = {
    id?: string
    description: string
    professional_experiences_id: string
  }

  export type HabilitiesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type HabilitiesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type HabilitiesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
  }

  export type ContactsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    is_whatsapp?: BoolFieldUpdateOperationsInput | boolean
    SocialMedias?: SocialMediasUpdateManyWithoutContactsNestedInput
  }

  export type ContactsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    is_whatsapp?: BoolFieldUpdateOperationsInput | boolean
    SocialMedias?: SocialMediasUncheckedUpdateManyWithoutContactsNestedInput
  }

  export type ContactsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    is_whatsapp?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LanguagesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguagesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguagesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalExperiencesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_actual_job?: BoolFieldUpdateOperationsInput | boolean
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUpdateManyWithoutProfessional_experiencesNestedInput
  }

  export type ProfessionalExperiencesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_actual_job?: BoolFieldUpdateOperationsInput | boolean
    ProfessionalExperiencesDescription?: ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutProfessional_experiencesNestedInput
  }

  export type ProfessionalExperiencesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_actual_job?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AcademicEducationsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicEducationsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicEducationsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date_init?: DateTimeFieldUpdateOperationsInput | Date | string
    date_end?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonalDataUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonalDataUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonalDataUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    avatar_url?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AddressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalExperiencesDescriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    professional_experiences?: ProfessionalExperiencesUpdateOneRequiredWithoutProfessionalExperiencesDescriptionNestedInput
  }

  export type ProfessionalExperiencesDescriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    professional_experiences_id?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    professional_experiences_id?: StringFieldUpdateOperationsInput | string
  }

  export type SocialMediasCreateManyContactsInput = {
    id?: string
    name: string
    slug: string
    url: string
  }

  export type SocialMediasUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type SocialMediasUncheckedUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type SocialMediasUncheckedUpdateManyWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionalExperiencesDescriptionCreateManyProfessional_experiencesInput = {
    id?: string
    description: string
    user_id: string
  }

  export type ProfessionalExperiencesDescriptionUpdateWithoutProfessional_experiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutProfessionalExperiencesDescriptionNestedInput
  }

  export type ProfessionalExperiencesDescriptionUncheckedUpdateWithoutProfessional_experiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessionalExperiencesDescriptionUncheckedUpdateManyWithoutProfessional_experiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactsCountOutputTypeDefaultArgs instead
     */
    export type ContactsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfessionalExperiencesCountOutputTypeDefaultArgs instead
     */
    export type ProfessionalExperiencesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfessionalExperiencesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HabilitiesDefaultArgs instead
     */
    export type HabilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HabilitiesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactsDefaultArgs instead
     */
    export type ContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SocialMediasDefaultArgs instead
     */
    export type SocialMediasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SocialMediasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LanguagesDefaultArgs instead
     */
    export type LanguagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LanguagesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfessionalExperiencesDefaultArgs instead
     */
    export type ProfessionalExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfessionalExperiencesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfessionalExperiencesDescriptionDefaultArgs instead
     */
    export type ProfessionalExperiencesDescriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfessionalExperiencesDescriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AcademicEducationsDefaultArgs instead
     */
    export type AcademicEducationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AcademicEducationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PersonalDataDefaultArgs instead
     */
    export type PersonalDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonalDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddressDefaultArgs instead
     */
    export type AddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}